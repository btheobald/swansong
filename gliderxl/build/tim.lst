ARM GAS  /tmp/cc1f5o3Z.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_TIM20_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_TIM20_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_TIM20_Init:
  26              	.LFB331:
  27              		.file 1 "Core/Src/tim.c"
   1:Core/Src/tim.c **** /**
   2:Core/Src/tim.c ****   ******************************************************************************
   3:Core/Src/tim.c ****   * @file    tim.c
   4:Core/Src/tim.c ****   * @brief   This file provides code for the configuration
   5:Core/Src/tim.c ****   *          of the TIM instances.
   6:Core/Src/tim.c ****   ******************************************************************************
   7:Core/Src/tim.c ****   * @attention
   8:Core/Src/tim.c ****   *
   9:Core/Src/tim.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/tim.c ****   * All rights reserved.</center></h2>
  11:Core/Src/tim.c ****   *
  12:Core/Src/tim.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/tim.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/tim.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/tim.c ****   *                             www.st.com/SLA0044
  16:Core/Src/tim.c ****   *
  17:Core/Src/tim.c ****   ******************************************************************************
  18:Core/Src/tim.c ****   */
  19:Core/Src/tim.c **** 
  20:Core/Src/tim.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/tim.c **** #include "tim.h"
  22:Core/Src/tim.c **** 
  23:Core/Src/tim.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/tim.c **** 
  25:Core/Src/tim.c **** /* USER CODE END 0 */
  26:Core/Src/tim.c **** 
  27:Core/Src/tim.c **** TIM_HandleTypeDef htim1;
  28:Core/Src/tim.c **** TIM_HandleTypeDef htim8;
  29:Core/Src/tim.c **** TIM_HandleTypeDef htim20;
  30:Core/Src/tim.c **** 
  31:Core/Src/tim.c **** /* TIM1 init function */
ARM GAS  /tmp/cc1f5o3Z.s 			page 2


  32:Core/Src/tim.c **** void MX_TIM1_Init(void)
  33:Core/Src/tim.c **** {
  34:Core/Src/tim.c **** 
  35:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 0 */
  36:Core/Src/tim.c **** 
  37:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 0 */
  38:Core/Src/tim.c **** 
  39:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  40:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
  41:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
  42:Core/Src/tim.c **** 
  43:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 1 */
  44:Core/Src/tim.c **** 
  45:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 1 */
  46:Core/Src/tim.c ****   htim1.Instance = TIM1;
  47:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
  48:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  49:Core/Src/tim.c ****   htim1.Init.Period = 65535;
  50:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  51:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
  52:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  53:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  54:Core/Src/tim.c ****   {
  55:Core/Src/tim.c ****     Error_Handler();
  56:Core/Src/tim.c ****   }
  57:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  58:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  59:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  60:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  61:Core/Src/tim.c ****   {
  62:Core/Src/tim.c ****     Error_Handler();
  63:Core/Src/tim.c ****   }
  64:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
  65:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
  66:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  67:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  68:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  69:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  70:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  71:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  72:Core/Src/tim.c ****   {
  73:Core/Src/tim.c ****     Error_Handler();
  74:Core/Src/tim.c ****   }
  75:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  76:Core/Src/tim.c ****   {
  77:Core/Src/tim.c ****     Error_Handler();
  78:Core/Src/tim.c ****   }
  79:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  80:Core/Src/tim.c ****   {
  81:Core/Src/tim.c ****     Error_Handler();
  82:Core/Src/tim.c ****   }
  83:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  84:Core/Src/tim.c ****   {
  85:Core/Src/tim.c ****     Error_Handler();
  86:Core/Src/tim.c ****   }
  87:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  88:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
ARM GAS  /tmp/cc1f5o3Z.s 			page 3


  89:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  90:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
  91:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  96:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  97:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
  98:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  99:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 100:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 101:Core/Src/tim.c ****   {
 102:Core/Src/tim.c ****     Error_Handler();
 103:Core/Src/tim.c ****   }
 104:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 105:Core/Src/tim.c **** 
 106:Core/Src/tim.c ****   /* USER CODE END TIM1_Init 2 */
 107:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim1);
 108:Core/Src/tim.c **** 
 109:Core/Src/tim.c **** }
 110:Core/Src/tim.c **** /* TIM8 init function */
 111:Core/Src/tim.c **** void MX_TIM8_Init(void)
 112:Core/Src/tim.c **** {
 113:Core/Src/tim.c **** 
 114:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_Init 0 */
 115:Core/Src/tim.c **** 
 116:Core/Src/tim.c ****   /* USER CODE END TIM8_Init 0 */
 117:Core/Src/tim.c **** 
 118:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 119:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 120:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 121:Core/Src/tim.c **** 
 122:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_Init 1 */
 123:Core/Src/tim.c **** 
 124:Core/Src/tim.c ****   /* USER CODE END TIM8_Init 1 */
 125:Core/Src/tim.c ****   htim8.Instance = TIM8;
 126:Core/Src/tim.c ****   htim8.Init.Prescaler = 0;
 127:Core/Src/tim.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 128:Core/Src/tim.c ****   htim8.Init.Period = 65535;
 129:Core/Src/tim.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 130:Core/Src/tim.c ****   htim8.Init.RepetitionCounter = 0;
 131:Core/Src/tim.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 132:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 133:Core/Src/tim.c ****   {
 134:Core/Src/tim.c ****     Error_Handler();
 135:Core/Src/tim.c ****   }
 136:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 137:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 138:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 139:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 140:Core/Src/tim.c ****   {
 141:Core/Src/tim.c ****     Error_Handler();
 142:Core/Src/tim.c ****   }
 143:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 144:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 145:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
ARM GAS  /tmp/cc1f5o3Z.s 			page 4


 146:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 147:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 148:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 149:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 150:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 151:Core/Src/tim.c ****   {
 152:Core/Src/tim.c ****     Error_Handler();
 153:Core/Src/tim.c ****   }
 154:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 155:Core/Src/tim.c ****   {
 156:Core/Src/tim.c ****     Error_Handler();
 157:Core/Src/tim.c ****   }
 158:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 159:Core/Src/tim.c ****   {
 160:Core/Src/tim.c ****     Error_Handler();
 161:Core/Src/tim.c ****   }
 162:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 163:Core/Src/tim.c ****   {
 164:Core/Src/tim.c ****     Error_Handler();
 165:Core/Src/tim.c ****   }
 166:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 167:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 168:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 169:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 170:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 171:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 172:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 173:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 174:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 175:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 176:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 177:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 178:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 179:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 180:Core/Src/tim.c ****   {
 181:Core/Src/tim.c ****     Error_Handler();
 182:Core/Src/tim.c ****   }
 183:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_Init 2 */
 184:Core/Src/tim.c **** 
 185:Core/Src/tim.c ****   /* USER CODE END TIM8_Init 2 */
 186:Core/Src/tim.c ****   HAL_TIM_MspPostInit(&htim8);
 187:Core/Src/tim.c **** 
 188:Core/Src/tim.c **** }
 189:Core/Src/tim.c **** /* TIM20 init function */
 190:Core/Src/tim.c **** void MX_TIM20_Init(void)
 191:Core/Src/tim.c **** {
  28              		.loc 1 191 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 96
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 98B0     		sub	sp, sp, #96
  38              	.LCFI1:
ARM GAS  /tmp/cc1f5o3Z.s 			page 5


  39              		.cfi_def_cfa_offset 104
 192:Core/Src/tim.c **** 
 193:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_Init 0 */
 194:Core/Src/tim.c **** 
 195:Core/Src/tim.c ****   /* USER CODE END TIM20_Init 0 */
 196:Core/Src/tim.c **** 
 197:Core/Src/tim.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
  40              		.loc 1 197 0
  41 0004 0024     		movs	r4, #0
  42 0006 1594     		str	r4, [sp, #84]
  43 0008 1694     		str	r4, [sp, #88]
  44 000a 1794     		str	r4, [sp, #92]
 198:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
  45              		.loc 1 198 0
  46 000c 0E94     		str	r4, [sp, #56]
  47 000e 0F94     		str	r4, [sp, #60]
  48 0010 1094     		str	r4, [sp, #64]
  49 0012 1194     		str	r4, [sp, #68]
  50 0014 1294     		str	r4, [sp, #72]
  51 0016 1394     		str	r4, [sp, #76]
  52 0018 1494     		str	r4, [sp, #80]
 199:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
  53              		.loc 1 199 0
  54 001a 3422     		movs	r2, #52
  55 001c 2146     		mov	r1, r4
  56 001e 01A8     		add	r0, sp, #4
  57 0020 FFF7FEFF 		bl	memset
  58              	.LVL0:
 200:Core/Src/tim.c **** 
 201:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_Init 1 */
 202:Core/Src/tim.c **** 
 203:Core/Src/tim.c ****   /* USER CODE END TIM20_Init 1 */
 204:Core/Src/tim.c ****   htim20.Instance = TIM20;
  59              		.loc 1 204 0
  60 0024 2448     		ldr	r0, .L11
  61 0026 254B     		ldr	r3, .L11+4
  62 0028 0360     		str	r3, [r0]
 205:Core/Src/tim.c ****   htim20.Init.Prescaler = 0;
  63              		.loc 1 205 0
  64 002a 4460     		str	r4, [r0, #4]
 206:Core/Src/tim.c ****   htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
  65              		.loc 1 206 0
  66 002c 8460     		str	r4, [r0, #8]
 207:Core/Src/tim.c ****   htim20.Init.Period = 65535;
  67              		.loc 1 207 0
  68 002e 4FF6FF73 		movw	r3, #65535
  69 0032 C360     		str	r3, [r0, #12]
 208:Core/Src/tim.c ****   htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  70              		.loc 1 208 0
  71 0034 0461     		str	r4, [r0, #16]
 209:Core/Src/tim.c ****   htim20.Init.RepetitionCounter = 0;
  72              		.loc 1 209 0
  73 0036 4461     		str	r4, [r0, #20]
 210:Core/Src/tim.c ****   htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  74              		.loc 1 210 0
  75 0038 8461     		str	r4, [r0, #24]
 211:Core/Src/tim.c ****   if (HAL_TIM_OC_Init(&htim20) != HAL_OK)
ARM GAS  /tmp/cc1f5o3Z.s 			page 6


  76              		.loc 1 211 0
  77 003a FFF7FEFF 		bl	HAL_TIM_OC_Init
  78              	.LVL1:
  79 003e 0028     		cmp	r0, #0
  80 0040 2DD1     		bne	.L7
  81              	.L2:
 212:Core/Src/tim.c ****   {
 213:Core/Src/tim.c ****     Error_Handler();
 214:Core/Src/tim.c ****   }
 215:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  82              		.loc 1 215 0
  83 0042 0023     		movs	r3, #0
  84 0044 1593     		str	r3, [sp, #84]
 216:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  85              		.loc 1 216 0
  86 0046 1693     		str	r3, [sp, #88]
 217:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  87              		.loc 1 217 0
  88 0048 1793     		str	r3, [sp, #92]
 218:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
  89              		.loc 1 218 0
  90 004a 15A9     		add	r1, sp, #84
  91 004c 1A48     		ldr	r0, .L11
  92 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
  93              	.LVL2:
  94 0052 38BB     		cbnz	r0, .L8
  95              	.L3:
 219:Core/Src/tim.c ****   {
 220:Core/Src/tim.c ****     Error_Handler();
 221:Core/Src/tim.c ****   }
 222:Core/Src/tim.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
  96              		.loc 1 222 0
  97 0054 0023     		movs	r3, #0
  98 0056 0E93     		str	r3, [sp, #56]
 223:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
  99              		.loc 1 223 0
 100 0058 0F93     		str	r3, [sp, #60]
 224:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 101              		.loc 1 224 0
 102 005a 1093     		str	r3, [sp, #64]
 225:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 103              		.loc 1 225 0
 104 005c 1293     		str	r3, [sp, #72]
 226:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 105              		.loc 1 226 0
 106 005e 1393     		str	r3, [sp, #76]
 227:Core/Src/tim.c ****   if (HAL_TIM_OC_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_6) != HAL_OK)
 107              		.loc 1 227 0
 108 0060 1422     		movs	r2, #20
 109 0062 0EA9     		add	r1, sp, #56
 110 0064 1448     		ldr	r0, .L11
 111 0066 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 112              	.LVL3:
 113 006a F0B9     		cbnz	r0, .L9
 114              	.L4:
 228:Core/Src/tim.c ****   {
 229:Core/Src/tim.c ****     Error_Handler();
ARM GAS  /tmp/cc1f5o3Z.s 			page 7


 230:Core/Src/tim.c ****   }
 231:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 115              		.loc 1 231 0
 116 006c 0023     		movs	r3, #0
 117 006e 0193     		str	r3, [sp, #4]
 232:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 118              		.loc 1 232 0
 119 0070 0293     		str	r3, [sp, #8]
 233:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 120              		.loc 1 233 0
 121 0072 0393     		str	r3, [sp, #12]
 234:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 122              		.loc 1 234 0
 123 0074 0493     		str	r3, [sp, #16]
 235:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 124              		.loc 1 235 0
 125 0076 0593     		str	r3, [sp, #20]
 236:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 126              		.loc 1 236 0
 127 0078 4FF40052 		mov	r2, #8192
 128 007c 0692     		str	r2, [sp, #24]
 237:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 129              		.loc 1 237 0
 130 007e 0793     		str	r3, [sp, #28]
 238:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 131              		.loc 1 238 0
 132 0080 0893     		str	r3, [sp, #32]
 239:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 133              		.loc 1 239 0
 134 0082 0993     		str	r3, [sp, #36]
 240:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 135              		.loc 1 240 0
 136 0084 4FF00072 		mov	r2, #33554432
 137 0088 0A92     		str	r2, [sp, #40]
 241:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 138              		.loc 1 241 0
 139 008a 0B93     		str	r3, [sp, #44]
 242:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 140              		.loc 1 242 0
 141 008c 0C93     		str	r3, [sp, #48]
 243:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 142              		.loc 1 243 0
 143 008e 0D93     		str	r3, [sp, #52]
 244:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 144              		.loc 1 244 0
 145 0090 01A9     		add	r1, sp, #4
 146 0092 0948     		ldr	r0, .L11
 147 0094 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 148              	.LVL4:
 149 0098 50B9     		cbnz	r0, .L10
 150              	.L1:
 245:Core/Src/tim.c ****   {
 246:Core/Src/tim.c ****     Error_Handler();
 247:Core/Src/tim.c ****   }
 248:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_Init 2 */
 249:Core/Src/tim.c **** 
 250:Core/Src/tim.c ****   /* USER CODE END TIM20_Init 2 */
ARM GAS  /tmp/cc1f5o3Z.s 			page 8


 251:Core/Src/tim.c **** 
 252:Core/Src/tim.c **** }
 151              		.loc 1 252 0
 152 009a 18B0     		add	sp, sp, #96
 153              	.LCFI2:
 154              		.cfi_remember_state
 155              		.cfi_def_cfa_offset 8
 156              		@ sp needed
 157 009c 10BD     		pop	{r4, pc}
 158              	.L7:
 159              	.LCFI3:
 160              		.cfi_restore_state
 213:Core/Src/tim.c ****   }
 161              		.loc 1 213 0
 162 009e FFF7FEFF 		bl	Error_Handler
 163              	.LVL5:
 164 00a2 CEE7     		b	.L2
 165              	.L8:
 220:Core/Src/tim.c ****   }
 166              		.loc 1 220 0
 167 00a4 FFF7FEFF 		bl	Error_Handler
 168              	.LVL6:
 169 00a8 D4E7     		b	.L3
 170              	.L9:
 229:Core/Src/tim.c ****   }
 171              		.loc 1 229 0
 172 00aa FFF7FEFF 		bl	Error_Handler
 173              	.LVL7:
 174 00ae DDE7     		b	.L4
 175              	.L10:
 246:Core/Src/tim.c ****   }
 176              		.loc 1 246 0
 177 00b0 FFF7FEFF 		bl	Error_Handler
 178              	.LVL8:
 179              		.loc 1 252 0
 180 00b4 F1E7     		b	.L1
 181              	.L12:
 182 00b6 00BF     		.align	2
 183              	.L11:
 184 00b8 00000000 		.word	htim20
 185 00bc 00500140 		.word	1073827840
 186              		.cfi_endproc
 187              	.LFE331:
 189              		.section	.text.HAL_TIM_PWM_MspInit,"ax",%progbits
 190              		.align	1
 191              		.global	HAL_TIM_PWM_MspInit
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv4-sp-d16
 197              	HAL_TIM_PWM_MspInit:
 198              	.LFB332:
 253:Core/Src/tim.c **** 
 254:Core/Src/tim.c **** void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
 255:Core/Src/tim.c **** {
 199              		.loc 1 255 0
 200              		.cfi_startproc
ARM GAS  /tmp/cc1f5o3Z.s 			page 9


 201              		@ args = 0, pretend = 0, frame = 8
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204              	.LVL9:
 205 0000 82B0     		sub	sp, sp, #8
 206              	.LCFI4:
 207              		.cfi_def_cfa_offset 8
 256:Core/Src/tim.c **** 
 257:Core/Src/tim.c ****   if(tim_pwmHandle->Instance==TIM1)
 208              		.loc 1 257 0
 209 0002 0368     		ldr	r3, [r0]
 210 0004 0E4A     		ldr	r2, .L19
 211 0006 9342     		cmp	r3, r2
 212 0008 04D0     		beq	.L17
 258:Core/Src/tim.c ****   {
 259:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 0 */
 260:Core/Src/tim.c **** 
 261:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 0 */
 262:Core/Src/tim.c ****     /* TIM1 clock enable */
 263:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_ENABLE();
 264:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 265:Core/Src/tim.c **** 
 266:Core/Src/tim.c ****   /* USER CODE END TIM1_MspInit 1 */
 267:Core/Src/tim.c ****   }
 268:Core/Src/tim.c ****   else if(tim_pwmHandle->Instance==TIM8)
 213              		.loc 1 268 0
 214 000a 0E4A     		ldr	r2, .L19+4
 215 000c 9342     		cmp	r3, r2
 216 000e 0CD0     		beq	.L18
 217              	.L13:
 269:Core/Src/tim.c ****   {
 270:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspInit 0 */
 271:Core/Src/tim.c **** 
 272:Core/Src/tim.c ****   /* USER CODE END TIM8_MspInit 0 */
 273:Core/Src/tim.c ****     /* TIM8 clock enable */
 274:Core/Src/tim.c ****     __HAL_RCC_TIM8_CLK_ENABLE();
 275:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspInit 1 */
 276:Core/Src/tim.c **** 
 277:Core/Src/tim.c ****   /* USER CODE END TIM8_MspInit 1 */
 278:Core/Src/tim.c ****   }
 279:Core/Src/tim.c **** }
 218              		.loc 1 279 0
 219 0010 02B0     		add	sp, sp, #8
 220              	.LCFI5:
 221              		.cfi_remember_state
 222              		.cfi_def_cfa_offset 0
 223              		@ sp needed
 224 0012 7047     		bx	lr
 225              	.L17:
 226              	.LCFI6:
 227              		.cfi_restore_state
 228              	.LBB2:
 263:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspInit 1 */
 229              		.loc 1 263 0
 230 0014 0C4B     		ldr	r3, .L19+8
 231 0016 1A6E     		ldr	r2, [r3, #96]
 232 0018 42F40062 		orr	r2, r2, #2048
ARM GAS  /tmp/cc1f5o3Z.s 			page 10


 233 001c 1A66     		str	r2, [r3, #96]
 234 001e 1B6E     		ldr	r3, [r3, #96]
 235 0020 03F40063 		and	r3, r3, #2048
 236 0024 0093     		str	r3, [sp]
 237 0026 009B     		ldr	r3, [sp]
 238              	.LBE2:
 239 0028 F2E7     		b	.L13
 240              	.L18:
 241              	.LBB3:
 274:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspInit 1 */
 242              		.loc 1 274 0
 243 002a 074B     		ldr	r3, .L19+8
 244 002c 1A6E     		ldr	r2, [r3, #96]
 245 002e 42F40052 		orr	r2, r2, #8192
 246 0032 1A66     		str	r2, [r3, #96]
 247 0034 1B6E     		ldr	r3, [r3, #96]
 248 0036 03F40053 		and	r3, r3, #8192
 249 003a 0193     		str	r3, [sp, #4]
 250 003c 019B     		ldr	r3, [sp, #4]
 251              	.LBE3:
 252              		.loc 1 279 0
 253 003e E7E7     		b	.L13
 254              	.L20:
 255              		.align	2
 256              	.L19:
 257 0040 002C0140 		.word	1073818624
 258 0044 00340140 		.word	1073820672
 259 0048 00100240 		.word	1073876992
 260              		.cfi_endproc
 261              	.LFE332:
 263              		.section	.text.HAL_TIM_OC_MspInit,"ax",%progbits
 264              		.align	1
 265              		.global	HAL_TIM_OC_MspInit
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	HAL_TIM_OC_MspInit:
 272              	.LFB333:
 280:Core/Src/tim.c **** 
 281:Core/Src/tim.c **** void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
 282:Core/Src/tim.c **** {
 273              		.loc 1 282 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL10:
 283:Core/Src/tim.c **** 
 284:Core/Src/tim.c ****   if(tim_ocHandle->Instance==TIM20)
 279              		.loc 1 284 0
 280 0000 0268     		ldr	r2, [r0]
 281 0002 094B     		ldr	r3, .L28
 282 0004 9A42     		cmp	r2, r3
 283 0006 00D0     		beq	.L27
 284 0008 7047     		bx	lr
 285              	.L27:
ARM GAS  /tmp/cc1f5o3Z.s 			page 11


 282:Core/Src/tim.c **** 
 286              		.loc 1 282 0
 287 000a 82B0     		sub	sp, sp, #8
 288              	.LCFI7:
 289              		.cfi_def_cfa_offset 8
 290              	.LBB4:
 285:Core/Src/tim.c ****   {
 286:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_MspInit 0 */
 287:Core/Src/tim.c **** 
 288:Core/Src/tim.c ****   /* USER CODE END TIM20_MspInit 0 */
 289:Core/Src/tim.c ****     /* TIM20 clock enable */
 290:Core/Src/tim.c ****     __HAL_RCC_TIM20_CLK_ENABLE();
 291              		.loc 1 290 0
 292 000c 03F54043 		add	r3, r3, #49152
 293 0010 1A6E     		ldr	r2, [r3, #96]
 294 0012 42F48012 		orr	r2, r2, #1048576
 295 0016 1A66     		str	r2, [r3, #96]
 296 0018 1B6E     		ldr	r3, [r3, #96]
 297 001a 03F48013 		and	r3, r3, #1048576
 298 001e 0193     		str	r3, [sp, #4]
 299 0020 019B     		ldr	r3, [sp, #4]
 300              	.LBE4:
 291:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_MspInit 1 */
 292:Core/Src/tim.c **** 
 293:Core/Src/tim.c ****   /* USER CODE END TIM20_MspInit 1 */
 294:Core/Src/tim.c ****   }
 295:Core/Src/tim.c **** }
 301              		.loc 1 295 0
 302 0022 02B0     		add	sp, sp, #8
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 0
 305              		@ sp needed
 306 0024 7047     		bx	lr
 307              	.L29:
 308 0026 00BF     		.align	2
 309              	.L28:
 310 0028 00500140 		.word	1073827840
 311              		.cfi_endproc
 312              	.LFE333:
 314              		.section	.text.HAL_TIM_MspPostInit,"ax",%progbits
 315              		.align	1
 316              		.global	HAL_TIM_MspPostInit
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu fpv4-sp-d16
 322              	HAL_TIM_MspPostInit:
 323              	.LFB334:
 296:Core/Src/tim.c **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 297:Core/Src/tim.c **** {
 324              		.loc 1 297 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 32
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL11:
 329 0000 00B5     		push	{lr}
 330              	.LCFI9:
ARM GAS  /tmp/cc1f5o3Z.s 			page 12


 331              		.cfi_def_cfa_offset 4
 332              		.cfi_offset 14, -4
 333 0002 89B0     		sub	sp, sp, #36
 334              	.LCFI10:
 335              		.cfi_def_cfa_offset 40
 298:Core/Src/tim.c **** 
 299:Core/Src/tim.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 336              		.loc 1 299 0
 337 0004 0023     		movs	r3, #0
 338 0006 0393     		str	r3, [sp, #12]
 339 0008 0493     		str	r3, [sp, #16]
 340 000a 0593     		str	r3, [sp, #20]
 341 000c 0693     		str	r3, [sp, #24]
 342 000e 0793     		str	r3, [sp, #28]
 300:Core/Src/tim.c ****   if(timHandle->Instance==TIM1)
 343              		.loc 1 300 0
 344 0010 0368     		ldr	r3, [r0]
 345 0012 194A     		ldr	r2, .L36
 346 0014 9342     		cmp	r3, r2
 347 0016 05D0     		beq	.L34
 301:Core/Src/tim.c ****   {
 302:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 0 */
 303:Core/Src/tim.c **** 
 304:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 0 */
 305:Core/Src/tim.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 306:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 307:Core/Src/tim.c ****     PC0     ------> TIM1_CH1
 308:Core/Src/tim.c ****     PC1     ------> TIM1_CH2
 309:Core/Src/tim.c ****     PC2     ------> TIM1_CH3
 310:Core/Src/tim.c ****     PC3     ------> TIM1_CH4
 311:Core/Src/tim.c ****     */
 312:Core/Src/tim.c ****     GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 313:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 314:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 315:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 316:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 317:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 318:Core/Src/tim.c **** 
 319:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspPostInit 1 */
 320:Core/Src/tim.c **** 
 321:Core/Src/tim.c ****   /* USER CODE END TIM1_MspPostInit 1 */
 322:Core/Src/tim.c ****   }
 323:Core/Src/tim.c ****   else if(timHandle->Instance==TIM8)
 348              		.loc 1 323 0
 349 0018 184A     		ldr	r2, .L36+4
 350 001a 9342     		cmp	r3, r2
 351 001c 16D0     		beq	.L35
 352              	.LVL12:
 353              	.L30:
 324:Core/Src/tim.c ****   {
 325:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspPostInit 0 */
 326:Core/Src/tim.c **** 
 327:Core/Src/tim.c ****   /* USER CODE END TIM8_MspPostInit 0 */
 328:Core/Src/tim.c **** 
 329:Core/Src/tim.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 330:Core/Src/tim.c ****     /**TIM8 GPIO Configuration
 331:Core/Src/tim.c ****     PC6     ------> TIM8_CH1
ARM GAS  /tmp/cc1f5o3Z.s 			page 13


 332:Core/Src/tim.c ****     PC7     ------> TIM8_CH2
 333:Core/Src/tim.c ****     PC8     ------> TIM8_CH3
 334:Core/Src/tim.c ****     PC9     ------> TIM8_CH4
 335:Core/Src/tim.c ****     */
 336:Core/Src/tim.c ****     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 337:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 338:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 339:Core/Src/tim.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 340:Core/Src/tim.c ****     GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 341:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 342:Core/Src/tim.c **** 
 343:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspPostInit 1 */
 344:Core/Src/tim.c **** 
 345:Core/Src/tim.c ****   /* USER CODE END TIM8_MspPostInit 1 */
 346:Core/Src/tim.c ****   }
 347:Core/Src/tim.c **** 
 348:Core/Src/tim.c **** }
 354              		.loc 1 348 0
 355 001e 09B0     		add	sp, sp, #36
 356              	.LCFI11:
 357              		.cfi_remember_state
 358              		.cfi_def_cfa_offset 4
 359              		@ sp needed
 360 0020 5DF804FB 		ldr	pc, [sp], #4
 361              	.LVL13:
 362              	.L34:
 363              	.LCFI12:
 364              		.cfi_restore_state
 365              	.LBB5:
 305:Core/Src/tim.c ****     /**TIM1 GPIO Configuration
 366              		.loc 1 305 0
 367 0024 164B     		ldr	r3, .L36+8
 368 0026 DA6C     		ldr	r2, [r3, #76]
 369 0028 42F00402 		orr	r2, r2, #4
 370 002c DA64     		str	r2, [r3, #76]
 371 002e DB6C     		ldr	r3, [r3, #76]
 372 0030 03F00403 		and	r3, r3, #4
 373 0034 0193     		str	r3, [sp, #4]
 374 0036 019B     		ldr	r3, [sp, #4]
 375              	.LBE5:
 312:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 376              		.loc 1 312 0
 377 0038 0F23     		movs	r3, #15
 378 003a 0393     		str	r3, [sp, #12]
 313:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 379              		.loc 1 313 0
 380 003c 0223     		movs	r3, #2
 381 003e 0493     		str	r3, [sp, #16]
 316:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 382              		.loc 1 316 0
 383 0040 0793     		str	r3, [sp, #28]
 317:Core/Src/tim.c **** 
 384              		.loc 1 317 0
 385 0042 03A9     		add	r1, sp, #12
 386 0044 0F48     		ldr	r0, .L36+12
 387              	.LVL14:
 388 0046 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc1f5o3Z.s 			page 14


 389              	.LVL15:
 390 004a E8E7     		b	.L30
 391              	.LVL16:
 392              	.L35:
 393              	.LBB6:
 329:Core/Src/tim.c ****     /**TIM8 GPIO Configuration
 394              		.loc 1 329 0
 395 004c 0C4B     		ldr	r3, .L36+8
 396 004e DA6C     		ldr	r2, [r3, #76]
 397 0050 42F00402 		orr	r2, r2, #4
 398 0054 DA64     		str	r2, [r3, #76]
 399 0056 DB6C     		ldr	r3, [r3, #76]
 400 0058 03F00403 		and	r3, r3, #4
 401 005c 0293     		str	r3, [sp, #8]
 402 005e 029B     		ldr	r3, [sp, #8]
 403              	.LBE6:
 336:Core/Src/tim.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 404              		.loc 1 336 0
 405 0060 4FF47073 		mov	r3, #960
 406 0064 0393     		str	r3, [sp, #12]
 337:Core/Src/tim.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 407              		.loc 1 337 0
 408 0066 0223     		movs	r3, #2
 409 0068 0493     		str	r3, [sp, #16]
 340:Core/Src/tim.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 410              		.loc 1 340 0
 411 006a 0423     		movs	r3, #4
 412 006c 0793     		str	r3, [sp, #28]
 341:Core/Src/tim.c **** 
 413              		.loc 1 341 0
 414 006e 03A9     		add	r1, sp, #12
 415 0070 0448     		ldr	r0, .L36+12
 416              	.LVL17:
 417 0072 FFF7FEFF 		bl	HAL_GPIO_Init
 418              	.LVL18:
 419              		.loc 1 348 0
 420 0076 D2E7     		b	.L30
 421              	.L37:
 422              		.align	2
 423              	.L36:
 424 0078 002C0140 		.word	1073818624
 425 007c 00340140 		.word	1073820672
 426 0080 00100240 		.word	1073876992
 427 0084 00080048 		.word	1207961600
 428              		.cfi_endproc
 429              	.LFE334:
 431              		.section	.text.MX_TIM1_Init,"ax",%progbits
 432              		.align	1
 433              		.global	MX_TIM1_Init
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 437              		.fpu fpv4-sp-d16
 439              	MX_TIM1_Init:
 440              	.LFB329:
  33:Core/Src/tim.c **** 
 441              		.loc 1 33 0
ARM GAS  /tmp/cc1f5o3Z.s 			page 15


 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 96
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 10B5     		push	{r4, lr}
 446              	.LCFI13:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 4, -8
 449              		.cfi_offset 14, -4
 450 0002 98B0     		sub	sp, sp, #96
 451              	.LCFI14:
 452              		.cfi_def_cfa_offset 104
  39:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 453              		.loc 1 39 0
 454 0004 0024     		movs	r4, #0
 455 0006 1594     		str	r4, [sp, #84]
 456 0008 1694     		str	r4, [sp, #88]
 457 000a 1794     		str	r4, [sp, #92]
  40:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 458              		.loc 1 40 0
 459 000c 0E94     		str	r4, [sp, #56]
 460 000e 0F94     		str	r4, [sp, #60]
 461 0010 1094     		str	r4, [sp, #64]
 462 0012 1194     		str	r4, [sp, #68]
 463 0014 1294     		str	r4, [sp, #72]
 464 0016 1394     		str	r4, [sp, #76]
 465 0018 1494     		str	r4, [sp, #80]
  41:Core/Src/tim.c **** 
 466              		.loc 1 41 0
 467 001a 3422     		movs	r2, #52
 468 001c 2146     		mov	r1, r4
 469 001e 01A8     		add	r0, sp, #4
 470 0020 FFF7FEFF 		bl	memset
 471              	.LVL19:
  46:Core/Src/tim.c ****   htim1.Init.Prescaler = 0;
 472              		.loc 1 46 0
 473 0024 3648     		ldr	r0, .L54
 474 0026 374B     		ldr	r3, .L54+4
 475 0028 0360     		str	r3, [r0]
  47:Core/Src/tim.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 476              		.loc 1 47 0
 477 002a 4460     		str	r4, [r0, #4]
  48:Core/Src/tim.c ****   htim1.Init.Period = 65535;
 478              		.loc 1 48 0
 479 002c 8460     		str	r4, [r0, #8]
  49:Core/Src/tim.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 480              		.loc 1 49 0
 481 002e 4FF6FF73 		movw	r3, #65535
 482 0032 C360     		str	r3, [r0, #12]
  50:Core/Src/tim.c ****   htim1.Init.RepetitionCounter = 0;
 483              		.loc 1 50 0
 484 0034 0461     		str	r4, [r0, #16]
  51:Core/Src/tim.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 485              		.loc 1 51 0
 486 0036 4461     		str	r4, [r0, #20]
  52:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 487              		.loc 1 52 0
 488 0038 8461     		str	r4, [r0, #24]
ARM GAS  /tmp/cc1f5o3Z.s 			page 16


  53:Core/Src/tim.c ****   {
 489              		.loc 1 53 0
 490 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 491              	.LVL20:
 492 003e 0028     		cmp	r0, #0
 493 0040 48D1     		bne	.L47
 494              	.L39:
  57:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 495              		.loc 1 57 0
 496 0042 0023     		movs	r3, #0
 497 0044 1593     		str	r3, [sp, #84]
  58:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 498              		.loc 1 58 0
 499 0046 1693     		str	r3, [sp, #88]
  59:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 500              		.loc 1 59 0
 501 0048 1793     		str	r3, [sp, #92]
  60:Core/Src/tim.c ****   {
 502              		.loc 1 60 0
 503 004a 15A9     		add	r1, sp, #84
 504 004c 2C48     		ldr	r0, .L54
 505 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 506              	.LVL21:
 507 0052 0028     		cmp	r0, #0
 508 0054 41D1     		bne	.L48
 509              	.L40:
  64:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 510              		.loc 1 64 0
 511 0056 6023     		movs	r3, #96
 512 0058 0E93     		str	r3, [sp, #56]
  65:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 513              		.loc 1 65 0
 514 005a 0022     		movs	r2, #0
 515 005c 0F92     		str	r2, [sp, #60]
  66:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 516              		.loc 1 66 0
 517 005e 1092     		str	r2, [sp, #64]
  67:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 518              		.loc 1 67 0
 519 0060 1192     		str	r2, [sp, #68]
  68:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 520              		.loc 1 68 0
 521 0062 1292     		str	r2, [sp, #72]
  69:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 522              		.loc 1 69 0
 523 0064 1392     		str	r2, [sp, #76]
  70:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 524              		.loc 1 70 0
 525 0066 1492     		str	r2, [sp, #80]
  71:Core/Src/tim.c ****   {
 526              		.loc 1 71 0
 527 0068 0EA9     		add	r1, sp, #56
 528 006a 2548     		ldr	r0, .L54
 529 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 530              	.LVL22:
 531 0070 0028     		cmp	r0, #0
 532 0072 35D1     		bne	.L49
ARM GAS  /tmp/cc1f5o3Z.s 			page 17


 533              	.L41:
  75:Core/Src/tim.c ****   {
 534              		.loc 1 75 0
 535 0074 0422     		movs	r2, #4
 536 0076 0EA9     		add	r1, sp, #56
 537 0078 2148     		ldr	r0, .L54
 538 007a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 539              	.LVL23:
 540 007e 0028     		cmp	r0, #0
 541 0080 31D1     		bne	.L50
 542              	.L42:
  79:Core/Src/tim.c ****   {
 543              		.loc 1 79 0
 544 0082 0822     		movs	r2, #8
 545 0084 0EA9     		add	r1, sp, #56
 546 0086 1E48     		ldr	r0, .L54
 547 0088 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 548              	.LVL24:
 549 008c 0028     		cmp	r0, #0
 550 008e 2DD1     		bne	.L51
 551              	.L43:
  83:Core/Src/tim.c ****   {
 552              		.loc 1 83 0
 553 0090 0C22     		movs	r2, #12
 554 0092 0EA9     		add	r1, sp, #56
 555 0094 1A48     		ldr	r0, .L54
 556 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 557              	.LVL25:
 558 009a 50BB     		cbnz	r0, .L52
 559              	.L44:
  87:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 560              		.loc 1 87 0
 561 009c 0023     		movs	r3, #0
 562 009e 0193     		str	r3, [sp, #4]
  88:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 563              		.loc 1 88 0
 564 00a0 0293     		str	r3, [sp, #8]
  89:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 565              		.loc 1 89 0
 566 00a2 0393     		str	r3, [sp, #12]
  90:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 567              		.loc 1 90 0
 568 00a4 0493     		str	r3, [sp, #16]
  91:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 569              		.loc 1 91 0
 570 00a6 0593     		str	r3, [sp, #20]
  92:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 571              		.loc 1 92 0
 572 00a8 4FF40052 		mov	r2, #8192
 573 00ac 0692     		str	r2, [sp, #24]
  93:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 574              		.loc 1 93 0
 575 00ae 0793     		str	r3, [sp, #28]
  94:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 576              		.loc 1 94 0
 577 00b0 0893     		str	r3, [sp, #32]
  95:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
ARM GAS  /tmp/cc1f5o3Z.s 			page 18


 578              		.loc 1 95 0
 579 00b2 0993     		str	r3, [sp, #36]
  96:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 580              		.loc 1 96 0
 581 00b4 4FF00072 		mov	r2, #33554432
 582 00b8 0A92     		str	r2, [sp, #40]
  97:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 583              		.loc 1 97 0
 584 00ba 0B93     		str	r3, [sp, #44]
  98:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 585              		.loc 1 98 0
 586 00bc 0C93     		str	r3, [sp, #48]
  99:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 587              		.loc 1 99 0
 588 00be 0D93     		str	r3, [sp, #52]
 100:Core/Src/tim.c ****   {
 589              		.loc 1 100 0
 590 00c0 01A9     		add	r1, sp, #4
 591 00c2 0F48     		ldr	r0, .L54
 592 00c4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 593              	.LVL26:
 594 00c8 B0B9     		cbnz	r0, .L53
 595              	.L45:
 107:Core/Src/tim.c **** 
 596              		.loc 1 107 0
 597 00ca 0D48     		ldr	r0, .L54
 598 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 599              	.LVL27:
 109:Core/Src/tim.c **** /* TIM8 init function */
 600              		.loc 1 109 0
 601 00d0 18B0     		add	sp, sp, #96
 602              	.LCFI15:
 603              		.cfi_remember_state
 604              		.cfi_def_cfa_offset 8
 605              		@ sp needed
 606 00d2 10BD     		pop	{r4, pc}
 607              	.L47:
 608              	.LCFI16:
 609              		.cfi_restore_state
  55:Core/Src/tim.c ****   }
 610              		.loc 1 55 0
 611 00d4 FFF7FEFF 		bl	Error_Handler
 612              	.LVL28:
 613 00d8 B3E7     		b	.L39
 614              	.L48:
  62:Core/Src/tim.c ****   }
 615              		.loc 1 62 0
 616 00da FFF7FEFF 		bl	Error_Handler
 617              	.LVL29:
 618 00de BAE7     		b	.L40
 619              	.L49:
  73:Core/Src/tim.c ****   }
 620              		.loc 1 73 0
 621 00e0 FFF7FEFF 		bl	Error_Handler
 622              	.LVL30:
 623 00e4 C6E7     		b	.L41
 624              	.L50:
ARM GAS  /tmp/cc1f5o3Z.s 			page 19


  77:Core/Src/tim.c ****   }
 625              		.loc 1 77 0
 626 00e6 FFF7FEFF 		bl	Error_Handler
 627              	.LVL31:
 628 00ea CAE7     		b	.L42
 629              	.L51:
  81:Core/Src/tim.c ****   }
 630              		.loc 1 81 0
 631 00ec FFF7FEFF 		bl	Error_Handler
 632              	.LVL32:
 633 00f0 CEE7     		b	.L43
 634              	.L52:
  85:Core/Src/tim.c ****   }
 635              		.loc 1 85 0
 636 00f2 FFF7FEFF 		bl	Error_Handler
 637              	.LVL33:
 638 00f6 D1E7     		b	.L44
 639              	.L53:
 102:Core/Src/tim.c ****   }
 640              		.loc 1 102 0
 641 00f8 FFF7FEFF 		bl	Error_Handler
 642              	.LVL34:
 643 00fc E5E7     		b	.L45
 644              	.L55:
 645 00fe 00BF     		.align	2
 646              	.L54:
 647 0100 00000000 		.word	htim1
 648 0104 002C0140 		.word	1073818624
 649              		.cfi_endproc
 650              	.LFE329:
 652              		.section	.text.MX_TIM8_Init,"ax",%progbits
 653              		.align	1
 654              		.global	MX_TIM8_Init
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv4-sp-d16
 660              	MX_TIM8_Init:
 661              	.LFB330:
 112:Core/Src/tim.c **** 
 662              		.loc 1 112 0
 663              		.cfi_startproc
 664              		@ args = 0, pretend = 0, frame = 96
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666 0000 10B5     		push	{r4, lr}
 667              	.LCFI17:
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 4, -8
 670              		.cfi_offset 14, -4
 671 0002 98B0     		sub	sp, sp, #96
 672              	.LCFI18:
 673              		.cfi_def_cfa_offset 104
 118:Core/Src/tim.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 674              		.loc 1 118 0
 675 0004 0024     		movs	r4, #0
 676 0006 1594     		str	r4, [sp, #84]
 677 0008 1694     		str	r4, [sp, #88]
ARM GAS  /tmp/cc1f5o3Z.s 			page 20


 678 000a 1794     		str	r4, [sp, #92]
 119:Core/Src/tim.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 679              		.loc 1 119 0
 680 000c 0E94     		str	r4, [sp, #56]
 681 000e 0F94     		str	r4, [sp, #60]
 682 0010 1094     		str	r4, [sp, #64]
 683 0012 1194     		str	r4, [sp, #68]
 684 0014 1294     		str	r4, [sp, #72]
 685 0016 1394     		str	r4, [sp, #76]
 686 0018 1494     		str	r4, [sp, #80]
 120:Core/Src/tim.c **** 
 687              		.loc 1 120 0
 688 001a 3422     		movs	r2, #52
 689 001c 2146     		mov	r1, r4
 690 001e 01A8     		add	r0, sp, #4
 691 0020 FFF7FEFF 		bl	memset
 692              	.LVL35:
 125:Core/Src/tim.c ****   htim8.Init.Prescaler = 0;
 693              		.loc 1 125 0
 694 0024 3648     		ldr	r0, .L72
 695 0026 374B     		ldr	r3, .L72+4
 696 0028 0360     		str	r3, [r0]
 126:Core/Src/tim.c ****   htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 697              		.loc 1 126 0
 698 002a 4460     		str	r4, [r0, #4]
 127:Core/Src/tim.c ****   htim8.Init.Period = 65535;
 699              		.loc 1 127 0
 700 002c 8460     		str	r4, [r0, #8]
 128:Core/Src/tim.c ****   htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 701              		.loc 1 128 0
 702 002e 4FF6FF73 		movw	r3, #65535
 703 0032 C360     		str	r3, [r0, #12]
 129:Core/Src/tim.c ****   htim8.Init.RepetitionCounter = 0;
 704              		.loc 1 129 0
 705 0034 0461     		str	r4, [r0, #16]
 130:Core/Src/tim.c ****   htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 706              		.loc 1 130 0
 707 0036 4461     		str	r4, [r0, #20]
 131:Core/Src/tim.c ****   if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 708              		.loc 1 131 0
 709 0038 8461     		str	r4, [r0, #24]
 132:Core/Src/tim.c ****   {
 710              		.loc 1 132 0
 711 003a FFF7FEFF 		bl	HAL_TIM_PWM_Init
 712              	.LVL36:
 713 003e 0028     		cmp	r0, #0
 714 0040 48D1     		bne	.L65
 715              	.L57:
 136:Core/Src/tim.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 716              		.loc 1 136 0
 717 0042 0023     		movs	r3, #0
 718 0044 1593     		str	r3, [sp, #84]
 137:Core/Src/tim.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 719              		.loc 1 137 0
 720 0046 1693     		str	r3, [sp, #88]
 138:Core/Src/tim.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 721              		.loc 1 138 0
ARM GAS  /tmp/cc1f5o3Z.s 			page 21


 722 0048 1793     		str	r3, [sp, #92]
 139:Core/Src/tim.c ****   {
 723              		.loc 1 139 0
 724 004a 15A9     		add	r1, sp, #84
 725 004c 2C48     		ldr	r0, .L72
 726 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 727              	.LVL37:
 728 0052 0028     		cmp	r0, #0
 729 0054 41D1     		bne	.L66
 730              	.L58:
 143:Core/Src/tim.c ****   sConfigOC.Pulse = 0;
 731              		.loc 1 143 0
 732 0056 6023     		movs	r3, #96
 733 0058 0E93     		str	r3, [sp, #56]
 144:Core/Src/tim.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 734              		.loc 1 144 0
 735 005a 0022     		movs	r2, #0
 736 005c 0F92     		str	r2, [sp, #60]
 145:Core/Src/tim.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 737              		.loc 1 145 0
 738 005e 1092     		str	r2, [sp, #64]
 146:Core/Src/tim.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 739              		.loc 1 146 0
 740 0060 1192     		str	r2, [sp, #68]
 147:Core/Src/tim.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 741              		.loc 1 147 0
 742 0062 1292     		str	r2, [sp, #72]
 148:Core/Src/tim.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 743              		.loc 1 148 0
 744 0064 1392     		str	r2, [sp, #76]
 149:Core/Src/tim.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 745              		.loc 1 149 0
 746 0066 1492     		str	r2, [sp, #80]
 150:Core/Src/tim.c ****   {
 747              		.loc 1 150 0
 748 0068 0EA9     		add	r1, sp, #56
 749 006a 2548     		ldr	r0, .L72
 750 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 751              	.LVL38:
 752 0070 0028     		cmp	r0, #0
 753 0072 35D1     		bne	.L67
 754              	.L59:
 154:Core/Src/tim.c ****   {
 755              		.loc 1 154 0
 756 0074 0422     		movs	r2, #4
 757 0076 0EA9     		add	r1, sp, #56
 758 0078 2148     		ldr	r0, .L72
 759 007a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 760              	.LVL39:
 761 007e 0028     		cmp	r0, #0
 762 0080 31D1     		bne	.L68
 763              	.L60:
 158:Core/Src/tim.c ****   {
 764              		.loc 1 158 0
 765 0082 0822     		movs	r2, #8
 766 0084 0EA9     		add	r1, sp, #56
 767 0086 1E48     		ldr	r0, .L72
ARM GAS  /tmp/cc1f5o3Z.s 			page 22


 768 0088 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 769              	.LVL40:
 770 008c 0028     		cmp	r0, #0
 771 008e 2DD1     		bne	.L69
 772              	.L61:
 162:Core/Src/tim.c ****   {
 773              		.loc 1 162 0
 774 0090 0C22     		movs	r2, #12
 775 0092 0EA9     		add	r1, sp, #56
 776 0094 1A48     		ldr	r0, .L72
 777 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 778              	.LVL41:
 779 009a 50BB     		cbnz	r0, .L70
 780              	.L62:
 166:Core/Src/tim.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 781              		.loc 1 166 0
 782 009c 0023     		movs	r3, #0
 783 009e 0193     		str	r3, [sp, #4]
 167:Core/Src/tim.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 784              		.loc 1 167 0
 785 00a0 0293     		str	r3, [sp, #8]
 168:Core/Src/tim.c ****   sBreakDeadTimeConfig.DeadTime = 0;
 786              		.loc 1 168 0
 787 00a2 0393     		str	r3, [sp, #12]
 169:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 788              		.loc 1 169 0
 789 00a4 0493     		str	r3, [sp, #16]
 170:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 790              		.loc 1 170 0
 791 00a6 0593     		str	r3, [sp, #20]
 171:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 792              		.loc 1 171 0
 793 00a8 4FF40052 		mov	r2, #8192
 794 00ac 0692     		str	r2, [sp, #24]
 172:Core/Src/tim.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 795              		.loc 1 172 0
 796 00ae 0793     		str	r3, [sp, #28]
 173:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 797              		.loc 1 173 0
 798 00b0 0893     		str	r3, [sp, #32]
 174:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 799              		.loc 1 174 0
 800 00b2 0993     		str	r3, [sp, #36]
 175:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 801              		.loc 1 175 0
 802 00b4 4FF00072 		mov	r2, #33554432
 803 00b8 0A92     		str	r2, [sp, #40]
 176:Core/Src/tim.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 804              		.loc 1 176 0
 805 00ba 0B93     		str	r3, [sp, #44]
 177:Core/Src/tim.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 806              		.loc 1 177 0
 807 00bc 0C93     		str	r3, [sp, #48]
 178:Core/Src/tim.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 808              		.loc 1 178 0
 809 00be 0D93     		str	r3, [sp, #52]
 179:Core/Src/tim.c ****   {
ARM GAS  /tmp/cc1f5o3Z.s 			page 23


 810              		.loc 1 179 0
 811 00c0 01A9     		add	r1, sp, #4
 812 00c2 0F48     		ldr	r0, .L72
 813 00c4 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 814              	.LVL42:
 815 00c8 B0B9     		cbnz	r0, .L71
 816              	.L63:
 186:Core/Src/tim.c **** 
 817              		.loc 1 186 0
 818 00ca 0D48     		ldr	r0, .L72
 819 00cc FFF7FEFF 		bl	HAL_TIM_MspPostInit
 820              	.LVL43:
 188:Core/Src/tim.c **** /* TIM20 init function */
 821              		.loc 1 188 0
 822 00d0 18B0     		add	sp, sp, #96
 823              	.LCFI19:
 824              		.cfi_remember_state
 825              		.cfi_def_cfa_offset 8
 826              		@ sp needed
 827 00d2 10BD     		pop	{r4, pc}
 828              	.L65:
 829              	.LCFI20:
 830              		.cfi_restore_state
 134:Core/Src/tim.c ****   }
 831              		.loc 1 134 0
 832 00d4 FFF7FEFF 		bl	Error_Handler
 833              	.LVL44:
 834 00d8 B3E7     		b	.L57
 835              	.L66:
 141:Core/Src/tim.c ****   }
 836              		.loc 1 141 0
 837 00da FFF7FEFF 		bl	Error_Handler
 838              	.LVL45:
 839 00de BAE7     		b	.L58
 840              	.L67:
 152:Core/Src/tim.c ****   }
 841              		.loc 1 152 0
 842 00e0 FFF7FEFF 		bl	Error_Handler
 843              	.LVL46:
 844 00e4 C6E7     		b	.L59
 845              	.L68:
 156:Core/Src/tim.c ****   }
 846              		.loc 1 156 0
 847 00e6 FFF7FEFF 		bl	Error_Handler
 848              	.LVL47:
 849 00ea CAE7     		b	.L60
 850              	.L69:
 160:Core/Src/tim.c ****   }
 851              		.loc 1 160 0
 852 00ec FFF7FEFF 		bl	Error_Handler
 853              	.LVL48:
 854 00f0 CEE7     		b	.L61
 855              	.L70:
 164:Core/Src/tim.c ****   }
 856              		.loc 1 164 0
 857 00f2 FFF7FEFF 		bl	Error_Handler
 858              	.LVL49:
ARM GAS  /tmp/cc1f5o3Z.s 			page 24


 859 00f6 D1E7     		b	.L62
 860              	.L71:
 181:Core/Src/tim.c ****   }
 861              		.loc 1 181 0
 862 00f8 FFF7FEFF 		bl	Error_Handler
 863              	.LVL50:
 864 00fc E5E7     		b	.L63
 865              	.L73:
 866 00fe 00BF     		.align	2
 867              	.L72:
 868 0100 00000000 		.word	htim8
 869 0104 00340140 		.word	1073820672
 870              		.cfi_endproc
 871              	.LFE330:
 873              		.section	.text.HAL_TIM_PWM_MspDeInit,"ax",%progbits
 874              		.align	1
 875              		.global	HAL_TIM_PWM_MspDeInit
 876              		.syntax unified
 877              		.thumb
 878              		.thumb_func
 879              		.fpu fpv4-sp-d16
 881              	HAL_TIM_PWM_MspDeInit:
 882              	.LFB335:
 349:Core/Src/tim.c **** 
 350:Core/Src/tim.c **** void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
 351:Core/Src/tim.c **** {
 883              		.loc 1 351 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 0, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888              	.LVL51:
 352:Core/Src/tim.c **** 
 353:Core/Src/tim.c ****   if(tim_pwmHandle->Instance==TIM1)
 889              		.loc 1 353 0
 890 0000 0368     		ldr	r3, [r0]
 891 0002 0A4A     		ldr	r2, .L79
 892 0004 9342     		cmp	r3, r2
 893 0006 03D0     		beq	.L77
 354:Core/Src/tim.c ****   {
 355:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 0 */
 356:Core/Src/tim.c **** 
 357:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 0 */
 358:Core/Src/tim.c ****     /* Peripheral clock disable */
 359:Core/Src/tim.c ****     __HAL_RCC_TIM1_CLK_DISABLE();
 360:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 361:Core/Src/tim.c **** 
 362:Core/Src/tim.c ****   /* USER CODE END TIM1_MspDeInit 1 */
 363:Core/Src/tim.c ****   }
 364:Core/Src/tim.c ****   else if(tim_pwmHandle->Instance==TIM8)
 894              		.loc 1 364 0
 895 0008 094A     		ldr	r2, .L79+4
 896 000a 9342     		cmp	r3, r2
 897 000c 07D0     		beq	.L78
 898              	.L74:
 365:Core/Src/tim.c ****   {
 366:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspDeInit 0 */
ARM GAS  /tmp/cc1f5o3Z.s 			page 25


 367:Core/Src/tim.c **** 
 368:Core/Src/tim.c ****   /* USER CODE END TIM8_MspDeInit 0 */
 369:Core/Src/tim.c ****     /* Peripheral clock disable */
 370:Core/Src/tim.c ****     __HAL_RCC_TIM8_CLK_DISABLE();
 371:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 372:Core/Src/tim.c **** 
 373:Core/Src/tim.c ****   /* USER CODE END TIM8_MspDeInit 1 */
 374:Core/Src/tim.c ****   }
 375:Core/Src/tim.c **** }
 899              		.loc 1 375 0
 900 000e 7047     		bx	lr
 901              	.L77:
 359:Core/Src/tim.c ****   /* USER CODE BEGIN TIM1_MspDeInit 1 */
 902              		.loc 1 359 0
 903 0010 02F56442 		add	r2, r2, #58368
 904 0014 136E     		ldr	r3, [r2, #96]
 905 0016 23F40063 		bic	r3, r3, #2048
 906 001a 1366     		str	r3, [r2, #96]
 907 001c 7047     		bx	lr
 908              	.L78:
 370:Core/Src/tim.c ****   /* USER CODE BEGIN TIM8_MspDeInit 1 */
 909              		.loc 1 370 0
 910 001e 02F55C42 		add	r2, r2, #56320
 911 0022 136E     		ldr	r3, [r2, #96]
 912 0024 23F40053 		bic	r3, r3, #8192
 913 0028 1366     		str	r3, [r2, #96]
 914              		.loc 1 375 0
 915 002a F0E7     		b	.L74
 916              	.L80:
 917              		.align	2
 918              	.L79:
 919 002c 002C0140 		.word	1073818624
 920 0030 00340140 		.word	1073820672
 921              		.cfi_endproc
 922              	.LFE335:
 924              		.section	.text.HAL_TIM_OC_MspDeInit,"ax",%progbits
 925              		.align	1
 926              		.global	HAL_TIM_OC_MspDeInit
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu fpv4-sp-d16
 932              	HAL_TIM_OC_MspDeInit:
 933              	.LFB336:
 376:Core/Src/tim.c **** 
 377:Core/Src/tim.c **** void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef* tim_ocHandle)
 378:Core/Src/tim.c **** {
 934              		.loc 1 378 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939              	.LVL52:
 379:Core/Src/tim.c **** 
 380:Core/Src/tim.c ****   if(tim_ocHandle->Instance==TIM20)
 940              		.loc 1 380 0
 941 0000 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cc1f5o3Z.s 			page 26


 942 0002 054B     		ldr	r3, .L84
 943 0004 9A42     		cmp	r2, r3
 944 0006 00D0     		beq	.L83
 945              	.L81:
 381:Core/Src/tim.c ****   {
 382:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_MspDeInit 0 */
 383:Core/Src/tim.c **** 
 384:Core/Src/tim.c ****   /* USER CODE END TIM20_MspDeInit 0 */
 385:Core/Src/tim.c ****     /* Peripheral clock disable */
 386:Core/Src/tim.c ****     __HAL_RCC_TIM20_CLK_DISABLE();
 387:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_MspDeInit 1 */
 388:Core/Src/tim.c **** 
 389:Core/Src/tim.c ****   /* USER CODE END TIM20_MspDeInit 1 */
 390:Core/Src/tim.c ****   }
 391:Core/Src/tim.c **** }
 946              		.loc 1 391 0
 947 0008 7047     		bx	lr
 948              	.L83:
 386:Core/Src/tim.c ****   /* USER CODE BEGIN TIM20_MspDeInit 1 */
 949              		.loc 1 386 0
 950 000a 044A     		ldr	r2, .L84+4
 951 000c 136E     		ldr	r3, [r2, #96]
 952 000e 23F48013 		bic	r3, r3, #1048576
 953 0012 1366     		str	r3, [r2, #96]
 954              		.loc 1 391 0
 955 0014 F8E7     		b	.L81
 956              	.L85:
 957 0016 00BF     		.align	2
 958              	.L84:
 959 0018 00500140 		.word	1073827840
 960 001c 00100240 		.word	1073876992
 961              		.cfi_endproc
 962              	.LFE336:
 964              		.comm	htim20,76,4
 965              		.comm	htim8,76,4
 966              		.comm	htim1,76,4
 967              		.text
 968              	.Letext0:
 969              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 970              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 971              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 972              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 973              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g484xx.h"
 974              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 975              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 976              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 977              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 978              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 979              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 980              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 981              		.file 14 "Core/Inc/tim.h"
 982              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim_ex.h"
 983              		.file 16 "Core/Inc/main.h"
 984              		.file 17 "<built-in>"
ARM GAS  /tmp/cc1f5o3Z.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tim.c
     /tmp/cc1f5o3Z.s:18     .text.MX_TIM20_Init:0000000000000000 $t
     /tmp/cc1f5o3Z.s:25     .text.MX_TIM20_Init:0000000000000000 MX_TIM20_Init
     /tmp/cc1f5o3Z.s:184    .text.MX_TIM20_Init:00000000000000b8 $d
                            *COM*:000000000000004c htim20
     /tmp/cc1f5o3Z.s:190    .text.HAL_TIM_PWM_MspInit:0000000000000000 $t
     /tmp/cc1f5o3Z.s:197    .text.HAL_TIM_PWM_MspInit:0000000000000000 HAL_TIM_PWM_MspInit
     /tmp/cc1f5o3Z.s:257    .text.HAL_TIM_PWM_MspInit:0000000000000040 $d
     /tmp/cc1f5o3Z.s:264    .text.HAL_TIM_OC_MspInit:0000000000000000 $t
     /tmp/cc1f5o3Z.s:271    .text.HAL_TIM_OC_MspInit:0000000000000000 HAL_TIM_OC_MspInit
     /tmp/cc1f5o3Z.s:310    .text.HAL_TIM_OC_MspInit:0000000000000028 $d
     /tmp/cc1f5o3Z.s:315    .text.HAL_TIM_MspPostInit:0000000000000000 $t
     /tmp/cc1f5o3Z.s:322    .text.HAL_TIM_MspPostInit:0000000000000000 HAL_TIM_MspPostInit
     /tmp/cc1f5o3Z.s:424    .text.HAL_TIM_MspPostInit:0000000000000078 $d
     /tmp/cc1f5o3Z.s:432    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc1f5o3Z.s:439    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc1f5o3Z.s:647    .text.MX_TIM1_Init:0000000000000100 $d
                            *COM*:000000000000004c htim1
     /tmp/cc1f5o3Z.s:653    .text.MX_TIM8_Init:0000000000000000 $t
     /tmp/cc1f5o3Z.s:660    .text.MX_TIM8_Init:0000000000000000 MX_TIM8_Init
     /tmp/cc1f5o3Z.s:868    .text.MX_TIM8_Init:0000000000000100 $d
                            *COM*:000000000000004c htim8
     /tmp/cc1f5o3Z.s:874    .text.HAL_TIM_PWM_MspDeInit:0000000000000000 $t
     /tmp/cc1f5o3Z.s:881    .text.HAL_TIM_PWM_MspDeInit:0000000000000000 HAL_TIM_PWM_MspDeInit
     /tmp/cc1f5o3Z.s:919    .text.HAL_TIM_PWM_MspDeInit:000000000000002c $d
     /tmp/cc1f5o3Z.s:925    .text.HAL_TIM_OC_MspDeInit:0000000000000000 $t
     /tmp/cc1f5o3Z.s:932    .text.HAL_TIM_OC_MspDeInit:0000000000000000 HAL_TIM_OC_MspDeInit
     /tmp/cc1f5o3Z.s:959    .text.HAL_TIM_OC_MspDeInit:0000000000000018 $d

UNDEFINED SYMBOLS
memset
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
Error_Handler
HAL_GPIO_Init
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
