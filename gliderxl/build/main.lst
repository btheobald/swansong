ARM GAS  /tmp/ccW2zlda.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.my_write_spi,"ax",%progbits
  18              		.align	1
  19              		.global	my_write_spi
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	my_write_spi:
  26              	.LFB333:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "adc.h"
  23:Core/Src/main.c **** #include "dac.h"
  24:Core/Src/main.c **** #include "dma.h"
  25:Core/Src/main.c **** #include "app_fatfs.h"
  26:Core/Src/main.c **** #include "i2c.h"
  27:Core/Src/main.c **** #include "opamp.h"
  28:Core/Src/main.c **** #include "quadspi.h"
  29:Core/Src/main.c **** #include "spi.h"
  30:Core/Src/main.c **** #include "tim.h"
  31:Core/Src/main.c **** #include "usart.h"
ARM GAS  /tmp/ccW2zlda.s 			page 2


  32:Core/Src/main.c **** #include "usb_device.h"
  33:Core/Src/main.c **** #include "gpio.h"
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  37:Core/Src/main.c **** #include <stdio.h>
  38:Core/Src/main.c **** #include <string.h>
  39:Core/Src/main.c **** #include <stdarg.h>
  40:Core/Src/main.c **** #include "ICM_20948_C.h"
  41:Core/Src/main.c **** #include <math.h>
  42:Core/Src/main.c **** #include "ssd1306.h"
  43:Core/Src/main.c **** #include "ssd1306_tests.h"
  44:Core/Src/main.c **** #include "ms5637.h"
  45:Core/Src/main.c **** #include "lwgps.h"
  46:Core/Src/main.c **** #include "lwrb.h"
  47:Core/Src/main.c **** /* USER CODE END Includes */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PTD */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  55:Core/Src/main.c **** /* USER CODE BEGIN PD */
  56:Core/Src/main.c **** //#define USE_SPI
  57:Core/Src/main.c **** ICM_20948_Status_e my_write_spi(uint8_t reg, uint8_t* data, uint32_t len, void* user) {
  28              		.loc 1 57 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 83B0     		sub	sp, sp, #12
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 32
  44 0004 0446     		mov	r4, r0
  45 0006 0E46     		mov	r6, r1
  46 0008 1746     		mov	r7, r2
  58:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
  47              		.loc 1 58 0
  48 000a 104D     		ldr	r5, .L3
  49 000c 0022     		movs	r2, #0
  50              	.LVL1:
  51 000e 4FF40061 		mov	r1, #2048
  52              	.LVL2:
  53 0012 2846     		mov	r0, r5
  54              	.LVL3:
  55 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
  56              	.LVL4:
  59:Core/Src/main.c ****   uint8_t wa = (reg & 0x7F);
ARM GAS  /tmp/ccW2zlda.s 			page 3


  57              		.loc 1 59 0
  58 0018 04F07F04 		and	r4, r4, #127
  59 001c 02A9     		add	r1, sp, #8
  60 001e 01F8014D 		strb	r4, [r1, #-1]!
  60:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi3, &wa, 1, 100);
  61              		.loc 1 60 0
  62 0022 0B4C     		ldr	r4, .L3+4
  63 0024 6423     		movs	r3, #100
  64 0026 0122     		movs	r2, #1
  65 0028 2046     		mov	r0, r4
  66 002a FFF7FEFF 		bl	HAL_SPI_Transmit
  67              	.LVL5:
  61:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi3, data, len, 100);
  68              		.loc 1 61 0
  69 002e 6423     		movs	r3, #100
  70 0030 BAB2     		uxth	r2, r7
  71 0032 3146     		mov	r1, r6
  72 0034 2046     		mov	r0, r4
  73 0036 FFF7FEFF 		bl	HAL_SPI_Transmit
  74              	.LVL6:
  62:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
  75              		.loc 1 62 0
  76 003a 0122     		movs	r2, #1
  77 003c 4FF40061 		mov	r1, #2048
  78 0040 2846     		mov	r0, r5
  79 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
  80              	.LVL7:
  63:Core/Src/main.c ****   return ICM_20948_Stat_Ok;
  64:Core/Src/main.c **** }
  81              		.loc 1 64 0
  82 0046 0020     		movs	r0, #0
  83 0048 03B0     		add	sp, sp, #12
  84              	.LCFI2:
  85              		.cfi_def_cfa_offset 20
  86              		@ sp needed
  87 004a F0BD     		pop	{r4, r5, r6, r7, pc}
  88              	.LVL8:
  89              	.L4:
  90              		.align	2
  91              	.L3:
  92 004c 00080048 		.word	1207961600
  93 0050 00000000 		.word	hspi3
  94              		.cfi_endproc
  95              	.LFE333:
  97              		.section	.text.my_read_spi,"ax",%progbits
  98              		.align	1
  99              		.global	my_read_spi
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu fpv4-sp-d16
 105              	my_read_spi:
 106              	.LFB334:
  65:Core/Src/main.c **** ICM_20948_Status_e my_read_spi(uint8_t reg, uint8_t* buff, uint32_t len, void* user) {
 107              		.loc 1 65 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccW2zlda.s 			page 4


 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              	.LVL9:
 112 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 20
 115              		.cfi_offset 4, -20
 116              		.cfi_offset 5, -16
 117              		.cfi_offset 6, -12
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 83B0     		sub	sp, sp, #12
 121              	.LCFI4:
 122              		.cfi_def_cfa_offset 32
 123 0004 0446     		mov	r4, r0
 124 0006 0E46     		mov	r6, r1
 125 0008 1746     		mov	r7, r2
  66:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_RESET);
 126              		.loc 1 66 0
 127 000a 104D     		ldr	r5, .L7
 128 000c 0022     		movs	r2, #0
 129              	.LVL10:
 130 000e 4FF40061 		mov	r1, #2048
 131              	.LVL11:
 132 0012 2846     		mov	r0, r5
 133              	.LVL12:
 134 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 135              	.LVL13:
  67:Core/Src/main.c ****   uint8_t ra = (reg | 0x80);
 136              		.loc 1 67 0
 137 0018 64F07F04 		orn	r4, r4, #127
 138 001c 02A9     		add	r1, sp, #8
 139 001e 01F8014D 		strb	r4, [r1, #-1]!
  68:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi3, &ra, 1, 100);
 140              		.loc 1 68 0
 141 0022 0B4C     		ldr	r4, .L7+4
 142 0024 6423     		movs	r3, #100
 143 0026 0122     		movs	r2, #1
 144 0028 2046     		mov	r0, r4
 145 002a FFF7FEFF 		bl	HAL_SPI_Transmit
 146              	.LVL14:
  69:Core/Src/main.c ****   HAL_SPI_Receive(&hspi3, buff, len, 100);
 147              		.loc 1 69 0
 148 002e 6423     		movs	r3, #100
 149 0030 BAB2     		uxth	r2, r7
 150 0032 3146     		mov	r1, r6
 151 0034 2046     		mov	r0, r4
 152 0036 FFF7FEFF 		bl	HAL_SPI_Receive
 153              	.LVL15:
  70:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 154              		.loc 1 70 0
 155 003a 0122     		movs	r2, #1
 156 003c 4FF40061 		mov	r1, #2048
 157 0040 2846     		mov	r0, r5
 158 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 159              	.LVL16:
  71:Core/Src/main.c ****   return ICM_20948_Stat_Ok;
  72:Core/Src/main.c **** }
ARM GAS  /tmp/ccW2zlda.s 			page 5


 160              		.loc 1 72 0
 161 0046 0020     		movs	r0, #0
 162 0048 03B0     		add	sp, sp, #12
 163              	.LCFI5:
 164              		.cfi_def_cfa_offset 20
 165              		@ sp needed
 166 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 167              	.LVL17:
 168              	.L8:
 169              		.align	2
 170              	.L7:
 171 004c 00080048 		.word	1207961600
 172 0050 00000000 		.word	hspi3
 173              		.cfi_endproc
 174              	.LFE334:
 176              		.section	.text.myprintf,"ax",%progbits
 177              		.align	1
 178              		.global	myprintf
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	myprintf:
 185              	.LFB335:
  73:Core/Src/main.c **** const ICM_20948_Serif_t mySerif = {my_write_spi, my_read_spi};
  74:Core/Src/main.c **** /* USER CODE END PD */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  77:Core/Src/main.c **** /* USER CODE BEGIN PM */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PM */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE BEGIN PV */
  84:Core/Src/main.c **** ICM_20948_Device_t myICM;
  85:Core/Src/main.c **** lwgps_t hgps;
  86:Core/Src/main.c **** lwrb_t hgps_buff;
  87:Core/Src/main.c **** uint8_t hgps_buff_data[512];
  88:Core/Src/main.c ****   
  89:Core/Src/main.c **** /* USER CODE END PV */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  92:Core/Src/main.c **** void SystemClock_Config(void);
  93:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* USER CODE END PFP */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  98:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  99:Core/Src/main.c **** void myprintf(const char *fmt, ...) {
 186              		.loc 1 99 0
 187              		.cfi_startproc
 188              		@ args = 4, pretend = 16, frame = 8
 189              		@ frame_needed = 0, uses_anonymous_args = 1
 190              	.LVL18:
 191 0000 0FB4     		push	{r0, r1, r2, r3}
ARM GAS  /tmp/ccW2zlda.s 			page 6


 192              	.LCFI6:
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 0, -16
 195              		.cfi_offset 1, -12
 196              		.cfi_offset 2, -8
 197              		.cfi_offset 3, -4
 198 0002 10B5     		push	{r4, lr}
 199              	.LCFI7:
 200              		.cfi_def_cfa_offset 24
 201              		.cfi_offset 4, -24
 202              		.cfi_offset 14, -20
 203 0004 82B0     		sub	sp, sp, #8
 204              	.LCFI8:
 205              		.cfi_def_cfa_offset 32
 206 0006 04AB     		add	r3, sp, #16
 207 0008 53F8042B 		ldr	r2, [r3], #4
 100:Core/Src/main.c ****   static char buffer[256];
 101:Core/Src/main.c ****   va_list args;
 102:Core/Src/main.c ****   va_start(args, fmt);
 208              		.loc 1 102 0
 209 000c 0193     		str	r3, [sp, #4]
 103:Core/Src/main.c ****   vsnprintf(buffer, sizeof(buffer), fmt, args);
 210              		.loc 1 103 0
 211 000e 094C     		ldr	r4, .L11
 212 0010 4FF48071 		mov	r1, #256
 213 0014 2046     		mov	r0, r4
 214 0016 FFF7FEFF 		bl	vsnprintf
 215              	.LVL19:
 104:Core/Src/main.c ****   va_end(args);
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   int len = strlen(buffer);
 216              		.loc 1 106 0
 217 001a 2046     		mov	r0, r4
 218 001c FFF7FEFF 		bl	strlen
 219              	.LVL20:
 107:Core/Src/main.c ****   CDC_Transmit_FS(buffer, len);
 220              		.loc 1 107 0
 221 0020 0146     		mov	r1, r0
 222 0022 2046     		mov	r0, r4
 223              	.LVL21:
 224 0024 FFF7FEFF 		bl	CDC_Transmit_FS
 225              	.LVL22:
 108:Core/Src/main.c **** }
 226              		.loc 1 108 0
 227 0028 02B0     		add	sp, sp, #8
 228              	.LCFI9:
 229              		.cfi_def_cfa_offset 24
 230              		@ sp needed
 231 002a BDE81040 		pop	{r4, lr}
 232              	.LCFI10:
 233              		.cfi_restore 14
 234              		.cfi_restore 4
 235              		.cfi_def_cfa_offset 16
 236 002e 04B0     		add	sp, sp, #16
 237              	.LCFI11:
 238              		.cfi_restore 3
 239              		.cfi_restore 2
ARM GAS  /tmp/ccW2zlda.s 			page 7


 240              		.cfi_restore 1
 241              		.cfi_restore 0
 242              		.cfi_def_cfa_offset 0
 243 0030 7047     		bx	lr
 244              	.L12:
 245 0032 00BF     		.align	2
 246              	.L11:
 247 0034 00000000 		.word	.LANCHOR0
 248              		.cfi_endproc
 249              	.LFE335:
 251              		.section	.text.UART_GPS_Callback,"ax",%progbits
 252              		.align	1
 253              		.global	UART_GPS_Callback
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	UART_GPS_Callback:
 260              	.LFB338:
 109:Core/Src/main.c **** /* USER CODE END 0 */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /**
 112:Core/Src/main.c ****   * @brief  The application entry point.
 113:Core/Src/main.c ****   * @retval int
 114:Core/Src/main.c ****   */
 115:Core/Src/main.c **** int main(void)
 116:Core/Src/main.c **** {
 117:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE END 1 */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Core/Src/main.c ****   HAL_Init();
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* USER CODE END Init */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* Configure the system clock */
 131:Core/Src/main.c ****   SystemClock_Config();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* USER CODE END SysInit */
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /* Initialize all configured peripherals */
 138:Core/Src/main.c ****   MX_GPIO_Init();
 139:Core/Src/main.c ****   MX_DMA_Init();
 140:Core/Src/main.c ****   MX_QUADSPI1_Init();
 141:Core/Src/main.c ****   MX_SPI3_Init();
 142:Core/Src/main.c ****   MX_TIM8_Init();
 143:Core/Src/main.c ****   MX_ADC2_Init();
 144:Core/Src/main.c ****   MX_DAC3_Init();
 145:Core/Src/main.c ****   MX_OPAMP2_Init();
 146:Core/Src/main.c ****   MX_OPAMP4_Init();
ARM GAS  /tmp/ccW2zlda.s 			page 8


 147:Core/Src/main.c ****   MX_TIM1_Init();
 148:Core/Src/main.c ****   MX_TIM20_Init();
 149:Core/Src/main.c ****   if (MX_FATFS_Init() != APP_OK) {
 150:Core/Src/main.c ****     Error_Handler();
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   MX_UART5_Init();
 153:Core/Src/main.c ****   MX_I2C2_Init();
 154:Core/Src/main.c ****   MX_USB_Device_Init();
 155:Core/Src/main.c ****   MX_USART1_UART_Init();
 156:Core/Src/main.c ****   MX_ADC5_Init();
 157:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   HAL_GPIO_WritePin(BUZZER_DAC_GPIO_Port, BUZZER_DAC_Pin, GPIO_PIN_RESET);
 160:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 161:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_FORCEON_GPIO_Port, GPS_FORCEON_Pin, GPIO_PIN_SET);
 162:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_EXT_INT_GPIO_Port, GPS_EXT_INT_Pin, GPIO_PIN_SET);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   HAL_GPIO_WritePin(SD_NCS_GPIO_Port, SD_NCS_Pin, GPIO_PIN_SET);
 165:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 166:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_SPI_LS_EN_GPIO_Port, IMU_SPI_LS_EN_Pin, GPIO_PIN_SET);
 167:Core/Src/main.c ****   HAL_Delay(100);
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   myICM._dmp_firmware_available = true;
 170:Core/Src/main.c ****   myICM._firmware_loaded = false;
 171:Core/Src/main.c ****   myICM._last_bank = 255;
 172:Core/Src/main.c ****   myICM._last_mems_bank = 255;
 173:Core/Src/main.c ****   myICM._gyroSF = 0; 
 174:Core/Src/main.c ****   myICM._gyroSFpll = 0;
 175:Core/Src/main.c ****   myICM._enabled_Android_0 = 0; 
 176:Core/Src/main.c **** 	myICM._enabled_Android_1 = 0; 
 177:Core/Src/main.c ****   myICM._enabled_Android_intr_0 = 0;
 178:Core/Src/main.c **** 	myICM._enabled_Android_intr_1 = 0; 
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   ICM_20948_link_serif( &myICM, &mySerif);
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /*ssd1306_Init();
 185:Core/Src/main.c ****   ssd1306_Fill(White);
 186:Core/Src/main.c ****   ssd1306_WriteString("Swansong", Font_16x26, Black);
 187:Core/Src/main.c ****   ssd1306_UpdateScreen();*/
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   myprintf("\r\nICM 20948 Setup\r\n");
 190:Core/Src/main.c ****   if(ICM_20948_check_id( &myICM ) == ICM_20948_Stat_Ok) {
 191:Core/Src/main.c ****     myprintf("- Read ID - PASS\r\n");
 192:Core/Src/main.c ****   } else {
 193:Core/Src/main.c ****     myprintf("- Read ID - FAIL (Remove Board Power)\r\n"); // TODO: Try a software reset?
 194:Core/Src/main.c ****     while(1) {};
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   if(ICM_20948_sw_reset( &myICM) == ICM_20948_Stat_Ok) {
 198:Core/Src/main.c ****     myprintf("- SW Reset - PASS\r\n");
 199:Core/Src/main.c ****   } else {
 200:Core/Src/main.c ****     myprintf("- SW Reset - FAIL\r\n"); // TODO: Try a software reset?
 201:Core/Src/main.c ****     while(1) {};
 202:Core/Src/main.c ****   }
 203:Core/Src/main.c ****   HAL_Delay(100);
ARM GAS  /tmp/ccW2zlda.s 			page 9


 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   if(ICM_20948_sleep( &myICM, false ) == ICM_20948_Stat_Ok) {
 206:Core/Src/main.c ****     myprintf("- Wake from Sleep - PASS\r\n");
 207:Core/Src/main.c ****   } else {
 208:Core/Src/main.c ****     myprintf("- Wake from Sleep - FAIL\r\n"); // TODO: Try a software reset?
 209:Core/Src/main.c ****     while(1) {};
 210:Core/Src/main.c ****   }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   if(ICM_20948_low_power( &myICM, false ) == ICM_20948_Stat_Ok) {
 213:Core/Src/main.c ****     myprintf("- Full power mode - PASS\r\n");
 214:Core/Src/main.c ****   } else {
 215:Core/Src/main.c ****     myprintf("- Full power mode - FAIL\r\n"); // TODO: Try a software reset?
 216:Core/Src/main.c ****     while(1) {};
 217:Core/Src/main.c ****   }
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   if(ICM_20948_i2c_master_passthrough( &myICM, false ) == ICM_20948_Stat_Ok) {
 220:Core/Src/main.c ****     myprintf("- Disable I2C Passthrough - PASS\r\n");
 221:Core/Src/main.c ****   } else {
 222:Core/Src/main.c ****     myprintf("- Disable I2C Passthrough - FAIL\r\n");
 223:Core/Src/main.c ****     while(1) {};
 224:Core/Src/main.c ****   }
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   if(ICM_20948_i2c_master_enable( &myICM, true ) == ICM_20948_Stat_Ok) {
 227:Core/Src/main.c ****     myprintf("- Enable I2C Master - PASS\r\n");
 228:Core/Src/main.c ****   } else {
 229:Core/Src/main.c ****     myprintf("- Enable I2C Master - FAIL\r\n");
 230:Core/Src/main.c ****     while(1) {};
 231:Core/Src/main.c ****   }
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   if(ICM_20948_i2c_master_reset( &myICM ) == ICM_20948_Stat_Ok) {
 234:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 235:Core/Src/main.c ****   } else {
 236:Core/Src/main.c ****     myprintf("- I2C Master Reset - FAIL\r\n");
 237:Core/Src/main.c ****     while(1) {};
 238:Core/Src/main.c ****   }
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   HAL_Delay(100);
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   if(ICM_20948_i2c_master_reset( &myICM ) == ICM_20948_Stat_Ok) {
 243:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 244:Core/Src/main.c ****   } else {
 245:Core/Src/main.c ****     myprintf("- I2C Master Reset - FAIL\r\n");
 246:Core/Src/main.c ****     while(1) {};
 247:Core/Src/main.c ****   }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   HAL_Delay(100);
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   if(ICM_20948_i2c_master_reset( &myICM ) == ICM_20948_Stat_Ok) {
 252:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 253:Core/Src/main.c ****   } else {
 254:Core/Src/main.c ****     myprintf("- I2C Master Reset - FAIL\r\n");
 255:Core/Src/main.c ****     while(1) {};
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   HAL_Delay(100);
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****   uint8_t AK09916_whoiam = 0;
ARM GAS  /tmp/ccW2zlda.s 			page 10


 261:Core/Src/main.c ****   ICM_20948_i2c_master_single_r( &myICM, MAG_AK09916_I2C_ADDR, AK09916_REG_WIA2, &AK09916_whoiam);
 262:Core/Src/main.c ****   myprintf("- AK09916 WHOIAM - 0x%02x - 0x%02x\r\n", AK09916_whoiam, MAG_AK09916_WHO_AM_I & 0xFF);
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   AK09916_CNTL2_Reg_t regctrl2;
 265:Core/Src/main.c ****   regctrl2.MODE = AK09916_mode_cont_100hz;
 266:Core/Src/main.c ****   if(ICM_20948_i2c_master_single_w( &myICM, MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL2, (uint8_t)&regc
 267:Core/Src/main.c ****     myprintf("- AK09916 Configure Control 2 - PASS\r\n");
 268:Core/Src/main.c ****   } else {
 269:Core/Src/main.c ****     myprintf("- AK09916 Configure Control 2 - FAIL\r\n");
 270:Core/Src/main.c ****     while(1) {};
 271:Core/Src/main.c ****   }
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   if(ICM_20948_i2c_controller_configure_peripheral( &myICM, 0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST
 274:Core/Src/main.c ****     myprintf("- AK09916 Configure Status 1- PASS\r\n");
 275:Core/Src/main.c ****   } else {
 276:Core/Src/main.c ****     myprintf("- AK09916 Configure Status 1 - FAIL\r\n");
 277:Core/Src/main.c ****     while(1) {};
 278:Core/Src/main.c ****   }
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   if( ICM_20948_set_clock_source( &myICM, ICM_20948_Clock_Auto ) == ICM_20948_Stat_Ok ) {
 281:Core/Src/main.c ****     myprintf("- Set Clock - PASS\r\n");
 282:Core/Src/main.c ****   } else {
 283:Core/Src/main.c ****     myprintf("- Set Clock - FAIL\r\n");
 284:Core/Src/main.c ****     while(1) {};
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   if( ICM_20948_set_bank( &myICM, 0 ) == ICM_20948_Stat_Ok ) {
 288:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 289:Core/Src/main.c ****   } else {
 290:Core/Src/main.c ****     myprintf("- Set Bank 0 - FAIL\r\n");
 291:Core/Src/main.c ****     while(1) {};
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   uint8_t pwr_mgmt2 = 0x40;
 295:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_PWR_MGMT_2, &pwr_mgmt2, 1 ) == ICM_20948_Stat_Ok ) {
 296:Core/Src/main.c ****     myprintf("- Write Power Management 2 - PASS\r\n");
 297:Core/Src/main.c ****   } else {
 298:Core/Src/main.c ****     myprintf("- Write Power Management 2 - FAIL\r\n");
 299:Core/Src/main.c ****     while(1) {};
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   if ( ICM_20948_set_sample_mode( &myICM, (ICM_20948_Internal_Mst | ICM_20948_Internal_Acc | ICM_20
 303:Core/Src/main.c ****     myprintf("- Set Sample Mode A G M - PASS\r\n");
 304:Core/Src/main.c ****   } else {
 305:Core/Src/main.c ****     myprintf("- Set Sample Mode A G M - FAIL\r\n");
 306:Core/Src/main.c ****     while(1) {};
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   if ( ICM_20948_enable_FIFO( &myICM, false) == ICM_20948_Stat_Ok ) {
 310:Core/Src/main.c ****     myprintf("- Disable FIFO - PASS\r\n");
 311:Core/Src/main.c ****   } else {
 312:Core/Src/main.c ****     myprintf("- Disable FIFO - FAIL\r\n");
 313:Core/Src/main.c ****     while(1) {};
 314:Core/Src/main.c ****   }
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   if ( ICM_20948_enable_DMP( &myICM, false) == ICM_20948_Stat_Ok ) {
 317:Core/Src/main.c ****     myprintf("- Disable DMP - PASS\r\n");
ARM GAS  /tmp/ccW2zlda.s 			page 11


 318:Core/Src/main.c ****   } else {
 319:Core/Src/main.c ****     myprintf("- Disable DMP - FAIL\r\n");
 320:Core/Src/main.c ****     while(1) {};
 321:Core/Src/main.c ****   }
 322:Core/Src/main.c ****   
 323:Core/Src/main.c ****   ICM_20948_fss_t myFSS;
 324:Core/Src/main.c ****   myFSS.a = gpm4;
 325:Core/Src/main.c ****   myFSS.g = dps2000;
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   if ( ICM_20948_set_full_scale( &myICM, (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myFSS) 
 328:Core/Src/main.c ****     myprintf("- Set Full Scale A G - PASS\r\n");
 329:Core/Src/main.c ****   } else {
 330:Core/Src/main.c ****     myprintf("- Set Full Scale A G - FAIL\r\n");
 331:Core/Src/main.c ****     while(1) {};
 332:Core/Src/main.c ****   }
 333:Core/Src/main.c ****   
 334:Core/Src/main.c ****   if( ICM_20948_set_bank( &myICM, 0 ) == ICM_20948_Stat_Ok ) {
 335:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 336:Core/Src/main.c ****   } else {
 337:Core/Src/main.c ****     myprintf("- Set Bank 0 - FAIL\r\n");
 338:Core/Src/main.c ****     while(1) {};
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   uint8_t zero = 0;
 342:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_FIFO_EN_1, &zero, 1) == ICM_20948_Stat_Ok) {
 343:Core/Src/main.c ****     myprintf("- Set FIFO Enable 1 - PASS\r\n");
 344:Core/Src/main.c ****   } else {
 345:Core/Src/main.c ****     myprintf("- Set FIFO Enable 1 - FAIL\r\n");
 346:Core/Src/main.c ****     while(1) {};
 347:Core/Src/main.c ****   }
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_FIFO_EN_2, &zero, 1) == ICM_20948_Stat_Ok) {
 350:Core/Src/main.c ****     myprintf("- Set FIFO Enable 2 - PASS\r\n");
 351:Core/Src/main.c ****   } else {
 352:Core/Src/main.c ****     myprintf("- Set FIFO Enable 2 - FAIL\r\n");
 353:Core/Src/main.c ****     while(1) {};
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   // Disable data ready interrupt
 357:Core/Src/main.c ****   ICM_20948_INT_enable_t en;    
 358:Core/Src/main.c ****   if ( ICM_20948_int_enable( &myICM, NULL, &en ) == ICM_20948_Stat_Ok ) {
 359:Core/Src/main.c ****     myprintf("- Read Data Ready Interrupt Enable - PASS\r\n");
 360:Core/Src/main.c ****   } else {
 361:Core/Src/main.c ****     myprintf("- Read Data Ready Interrupt Enable - FAIL\r\n");
 362:Core/Src/main.c ****     while(1) {};
 363:Core/Src/main.c ****   }
 364:Core/Src/main.c ****   en.RAW_DATA_0_RDY_EN = false;                  
 365:Core/Src/main.c ****   if ( ICM_20948_int_enable( &myICM, &en, &en ) == ICM_20948_Stat_Ok ) {
 366:Core/Src/main.c ****     myprintf("- Set Data Ready Interrupt Disable - PASS\r\n");
 367:Core/Src/main.c ****   } else {
 368:Core/Src/main.c ****     myprintf("- Set Data Ready Interrupt Disable - FAIL\r\n");
 369:Core/Src/main.c ****     while(1) {};
 370:Core/Src/main.c ****   }
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   if ( ICM_20948_reset_FIFO( &myICM ) == ICM_20948_Stat_Ok ) {
 373:Core/Src/main.c ****     myprintf("- Reset FIFO - PASS\r\n");
 374:Core/Src/main.c ****   } else {
ARM GAS  /tmp/ccW2zlda.s 			page 12


 375:Core/Src/main.c ****     myprintf("- Reset FIFO - FAIL\r\n");
 376:Core/Src/main.c ****     while(1) {};
 377:Core/Src/main.c ****   }
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   ICM_20948_smplrt_t mySmplrt;
 380:Core/Src/main.c ****   mySmplrt.g = 19; // ODR is computed as follows: 1.1 kHz/(1+GYRO_SMPLRT_DIV[7:0]). 19 = 55Hz. Inve
 381:Core/Src/main.c ****   mySmplrt.a = 19; // ODR is computed as follows: 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0]). 19 = 56.25H
 382:Core/Src/main.c ****   if ( ICM_20948_set_sample_rate( &myICM, (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), mySmpl
 383:Core/Src/main.c ****     myprintf("- Set Sample Rate A G - PASS\r\n");
 384:Core/Src/main.c ****   } else {
 385:Core/Src/main.c ****     myprintf("- Set Sample Rate A G - FAIL\r\n");
 386:Core/Src/main.c ****     while(1) {};
 387:Core/Src/main.c ****   }
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   // Load DMP Firmware
 390:Core/Src/main.c ****   if ( ICM_20948_set_dmp_start_address( &myICM, DMP_START_ADDRESS) == ICM_20948_Stat_Ok ) {
 391:Core/Src/main.c ****     myprintf("- Set DMP Start Address - PASS\r\n");
 392:Core/Src/main.c ****   } else {
 393:Core/Src/main.c ****     myprintf("- Set DMP Start Address - FAIL\r\n");
 394:Core/Src/main.c ****     while(1) {};
 395:Core/Src/main.c ****   }
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   if ( ICM_20948_firmware_load( &myICM ) == ICM_20948_Stat_Ok ) {
 398:Core/Src/main.c ****     myprintf("- Load DMP Firmware - PASS\r\n");
 399:Core/Src/main.c ****   } else {
 400:Core/Src/main.c ****     myprintf("- Load DMP Firmware - FAIL\r\n");
 401:Core/Src/main.c ****     while(1) {};
 402:Core/Src/main.c ****   }
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   if ( ICM_20948_set_dmp_start_address( &myICM, DMP_START_ADDRESS) == ICM_20948_Stat_Ok ) {
 405:Core/Src/main.c ****     myprintf("- Set DMP Start Address Bytes - PASS\r\n");
 406:Core/Src/main.c ****   } else {
 407:Core/Src/main.c ****     myprintf("- Set DMP Start Address Bytes - FAIL\r\n");
 408:Core/Src/main.c ****     while(1) {};
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   
 411:Core/Src/main.c ****   if ( ICM_20948_set_bank( &myICM, 0) == ICM_20948_Stat_Ok ) {
 412:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 413:Core/Src/main.c ****   } else {
 414:Core/Src/main.c ****     myprintf("- Set Bank 0 - FAIL\r\n");
 415:Core/Src/main.c ****     while(1) {};
 416:Core/Src/main.c ****   }
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   uint8_t fix = 0x48;
 419:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_HW_FIX_DISABLE, &fix, 1) == ICM_20948_Stat_Ok) {
 420:Core/Src/main.c ****     myprintf("- Set HW Fix - PASS\r\n");
 421:Core/Src/main.c ****   } else {
 422:Core/Src/main.c ****     myprintf("- Set HW Fix - FAIL\r\n");
 423:Core/Src/main.c ****     while(1) {};
 424:Core/Src/main.c ****   }
 425:Core/Src/main.c ****   
 426:Core/Src/main.c ****   if ( ICM_20948_set_bank( &myICM, 0) == ICM_20948_Stat_Ok ) {
 427:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 428:Core/Src/main.c ****   } else {
 429:Core/Src/main.c ****     myprintf("- Set Bank 0 - FAIL\r\n");
 430:Core/Src/main.c ****     while(1) {};
 431:Core/Src/main.c ****   }
ARM GAS  /tmp/ccW2zlda.s 			page 13


 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   uint8_t fifoPrio = 0xE4;
 434:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_SINGLE_FIFO_PRIORITY_SEL, &fifoPrio, 1) == ICM_20948_S
 435:Core/Src/main.c ****     myprintf("- FIFO Priority Select - PASS\r\n");
 436:Core/Src/main.c ****   } else {
 437:Core/Src/main.c ****     myprintf("- FIFO Priority Select - FAIL\r\n");
 438:Core/Src/main.c ****     while(1) {};
 439:Core/Src/main.c ****   }
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   const unsigned char accScale[4] = {0x04, 0x00, 0x00, 0x00};
 442:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACC_SCALE, 4, accScale) == ICM_20948_Stat_Ok) {
 443:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 1 Select - PASS\r\n");
 444:Core/Src/main.c ****   } else {
 445:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 1 Select - FAIL\r\n");
 446:Core/Src/main.c ****     while(1) {};
 447:Core/Src/main.c ****   }
 448:Core/Src/main.c ****   const unsigned char accScale2[4] = {0x00, 0x04, 0x00, 0x00};
 449:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACC_SCALE2, 4, accScale2) == ICM_20948_Stat_Ok) {
 450:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 2 Select - PASS\r\n");
 451:Core/Src/main.c ****   } else {
 452:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 2 Select - FAIL\r\n");
 453:Core/Src/main.c ****     while(1) {};
 454:Core/Src/main.c ****   }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   const unsigned char mountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 457:Core/Src/main.c ****   const unsigned char mountMultiplierPlus[4] = {0x09, 0x99, 0x99, 0x99}; // Value taken from InvenS
 458:Core/Src/main.c ****   const unsigned char mountMultiplierMinus[4] = {0xF6, 0x66, 0x66, 0x67}; // Value taken from Inven
 459:Core/Src/main.c ****   uint8_t cpass_mtx_stat = 1;
 460:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_00, 4, &mountMultiplierPlus[0]) ==
 461:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_01, 4, &mountMultiplierZero[0]) ==
 462:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_02, 4, &mountMultiplierZero[0]) ==
 463:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_10, 4, &mountMultiplierZero[0]) ==
 464:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_11, 4, &mountMultiplierMinus[0]) =
 465:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_12, 4, &mountMultiplierZero[0]) ==
 466:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_20, 4, &mountMultiplierZero[0]) ==
 467:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_21, 4, &mountMultiplierZero[0]) ==
 468:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_22, 4, &mountMultiplierMinus[0]) =
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   if(cpass_mtx_stat) {
 471:Core/Src/main.c ****     myprintf("- DMP Compass Mount Matrix Set - PASS\r\n");
 472:Core/Src/main.c ****   } else {
 473:Core/Src/main.c ****     myprintf("- DMP Compass Mount Matrix Set - Fail\r\n");
 474:Core/Src/main.c ****     while(1) {};
 475:Core/Src/main.c ****   }
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   const unsigned char b2sMountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 478:Core/Src/main.c ****   const unsigned char b2sMountMultiplierPlus[4] = {0x40, 0x00, 0x00, 0x00}; // Value taken from Inv
 479:Core/Src/main.c ****   uint8_t b2s_mtx_stat = 1;
 480:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_00, 4, &b2sMountMultiplierPlus[0]) == 
 481:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_01, 4, &b2sMountMultiplierZero[0]) == 
 482:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_02, 4, &b2sMountMultiplierZero[0]) == 
 483:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_10, 4, &b2sMountMultiplierZero[0]) == 
 484:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_11, 4, &b2sMountMultiplierPlus[0]) == 
 485:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_12, 4, &b2sMountMultiplierZero[0]) == 
 486:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_20, 4, &b2sMountMultiplierZero[0]) == 
 487:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_21, 4, &b2sMountMultiplierZero[0]) == 
 488:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_22, 4, &b2sMountMultiplierPlus[0]) == 
ARM GAS  /tmp/ccW2zlda.s 			page 14


 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   if(b2s_mtx_stat) {
 491:Core/Src/main.c ****     myprintf("- B2S Mount Matrix Set - PASS\r\n");
 492:Core/Src/main.c ****   } else {
 493:Core/Src/main.c ****     myprintf("- B2S Mount Matrix Set - Fail\r\n");
 494:Core/Src/main.c ****     while(1) {};
 495:Core/Src/main.c ****   }
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   if( inv_icm20948_set_gyro_sf( &myICM, 19, 3) == ICM_20948_Stat_Ok) { // 19 = 55Hz (see above), 3 
 498:Core/Src/main.c ****     myprintf("- DMP Gyroscope Sample Rate Select - PASS\r\n");
 499:Core/Src/main.c ****   } else {
 500:Core/Src/main.c ****     myprintf("- DMP Gyroscope Sample Rate Select - Fail\r\n");
 501:Core/Src/main.c ****     while(1) {};
 502:Core/Src/main.c ****   }
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   const unsigned char gyroFullScale[4] = {0x10, 0x00, 0x00, 0x00}; // 2000dps : 2^28
 505:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, GYRO_FULLSCALE, 4, gyroFullScale) == ICM_20948_Stat_Ok) {
 506:Core/Src/main.c ****     myprintf("- DMP Gyroscope Full Scale Select - PASS\r\n");
 507:Core/Src/main.c ****   } else {
 508:Core/Src/main.c ****     myprintf("- DMP Gyroscope Full Scale Select - Fail\r\n");
 509:Core/Src/main.c ****     while(1) {};
 510:Core/Src/main.c ****   }
 511:Core/Src/main.c ****   
 512:Core/Src/main.c ****   const unsigned char accelOnlyGain[4] = {0x03, 0xA4, 0x92, 0x49}; // 56Hz
 513:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_ONLY_GAIN, 4, accelOnlyGain) == ICM_20948_Stat_Ok) {
 514:Core/Src/main.c ****     myprintf("- DMP Accelerometer Gain Select - PASS\r\n");
 515:Core/Src/main.c ****   } else {
 516:Core/Src/main.c ****     myprintf("- DMP Accelerometer Gain Select - Fail\r\n");
 517:Core/Src/main.c ****     while(1) {};
 518:Core/Src/main.c ****   }
 519:Core/Src/main.c ****   
 520:Core/Src/main.c ****   const unsigned char accelAlphaVar[4] = {0x34, 0x92, 0x49, 0x25}; // 56Hz
 521:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_ALPHA_VAR, 4, accelAlphaVar) == ICM_20948_Stat_Ok) {
 522:Core/Src/main.c ****     myprintf("- DMP Accelerometer Alpha Select - PASS\r\n");
 523:Core/Src/main.c ****   } else {
 524:Core/Src/main.c ****     myprintf("- DMP Accelerometer Alpha Select - Fail\r\n");
 525:Core/Src/main.c ****     while(1) {};
 526:Core/Src/main.c ****   }
 527:Core/Src/main.c ****   
 528:Core/Src/main.c ****   const unsigned char accelAVar[4] = {0x0B, 0x6D, 0xB6, 0xDB}; // 56Hz
 529:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_A_VAR, 4, accelAVar) == ICM_20948_Stat_Ok) {
 530:Core/Src/main.c ****     myprintf("- DMP Accelerometer A Var Select - PASS\r\n");
 531:Core/Src/main.c ****   } else {
 532:Core/Src/main.c ****     myprintf("- DMP Accelerometer A Var Select - Fail\r\n");
 533:Core/Src/main.c ****     while(1) {};
 534:Core/Src/main.c ****   }
 535:Core/Src/main.c ****   
 536:Core/Src/main.c ****   const unsigned char accelCalRate[4] = {0x00, 0x00};
 537:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_CAL_RATE, 2, accelCalRate) == ICM_20948_Stat_Ok) {
 538:Core/Src/main.c ****     myprintf("- DMP Accelerometer Calibration Rate Select - PASS\r\n");
 539:Core/Src/main.c ****   } else {
 540:Core/Src/main.c ****     myprintf("- DMP Accelerometer Calibration Rate Select - Fail\r\n");
 541:Core/Src/main.c ****     while(1) {};
 542:Core/Src/main.c ****   }
 543:Core/Src/main.c ****   
 544:Core/Src/main.c ****   const unsigned char compassRate[2] = {0x00, 0x64}; // 100Hz
 545:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, CPASS_TIME_BUFFER, 2, compassRate) == ICM_20948_Stat_Ok) {
ARM GAS  /tmp/ccW2zlda.s 			page 15


 546:Core/Src/main.c ****     myprintf("- DMP Compass Sample Rate Select - PASS\r\n");
 547:Core/Src/main.c ****   } else {
 548:Core/Src/main.c ****     myprintf("- DMP Compass Sample Rate Select - Fail\r\n");
 549:Core/Src/main.c ****     while(1) {};
 550:Core/Src/main.c ****   }
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   if ( inv_icm20948_enable_dmp_sensor( &myICM, INV_ICM20948_SENSOR_ORIENTATION, 1) == ICM_20948_Sta
 553:Core/Src/main.c ****     myprintf("- DMP Enable Orientation - PASS\r\n");
 554:Core/Src/main.c ****   } else {
 555:Core/Src/main.c ****     myprintf("- DMP Enable Orientation - Fail\r\n");
 556:Core/Src/main.c ****     while(1) {};
 557:Core/Src/main.c ****   }
 558:Core/Src/main.c ****   if ( inv_icm20948_set_dmp_sensor_period( &myICM, DMP_ODR_Reg_Quat9, 0) == ICM_20948_Stat_Ok) {
 559:Core/Src/main.c ****     myprintf("- DMP Set Sensor Period - PASS\r\n");
 560:Core/Src/main.c ****   } else {
 561:Core/Src/main.c ****     myprintf("- DMP Set Sensor Period - Fail\r\n");
 562:Core/Src/main.c ****     while(1) {};
 563:Core/Src/main.c ****   }
 564:Core/Src/main.c ****   if ( ICM_20948_enable_FIFO( &myICM, 1) == ICM_20948_Stat_Ok ) {
 565:Core/Src/main.c ****     myprintf("- Enable FIFO - PASS\r\n");
 566:Core/Src/main.c ****   } else {
 567:Core/Src/main.c ****     myprintf("- Enable FIFO - Fail\r\n");
 568:Core/Src/main.c ****     while(1) {};
 569:Core/Src/main.c ****   }
 570:Core/Src/main.c ****   if ( ICM_20948_enable_DMP( &myICM, 1) == ICM_20948_Stat_Ok ) {
 571:Core/Src/main.c ****     myprintf("- Enable DMP - PASS\r\n");
 572:Core/Src/main.c ****   } else {
 573:Core/Src/main.c ****     myprintf("- Enable DMP - Fail\r\n");
 574:Core/Src/main.c ****     while(1) {};
 575:Core/Src/main.c ****   }
 576:Core/Src/main.c ****   if ( ICM_20948_reset_DMP( &myICM ) == ICM_20948_Stat_Ok ) {
 577:Core/Src/main.c ****     myprintf("- Reset DMP - PASS\r\n");
 578:Core/Src/main.c ****   } else {
 579:Core/Src/main.c ****     myprintf("- Reset DMP - Fail\r\n");
 580:Core/Src/main.c ****     while(1) {};
 581:Core/Src/main.c ****   }
 582:Core/Src/main.c ****   if ( ICM_20948_reset_FIFO( &myICM ) == ICM_20948_Stat_Ok ) {
 583:Core/Src/main.c ****     myprintf("- Reset FIFO - PASS\r\n");
 584:Core/Src/main.c ****   } else {
 585:Core/Src/main.c ****     myprintf("- Reset FIFO - Fail\r\n");
 586:Core/Src/main.c ****     while(1) {};
 587:Core/Src/main.c ****   }
 588:Core/Src/main.c **** 
 589:Core/Src/main.c ****   HAL_Delay(100);
 590:Core/Src/main.c ****   myprintf("\r\nICM 20948 DMP Enable - PASS\r\n");
 591:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 592:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****   uint8_t i2c_buf[4];
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****   if(ms5637_is_connected() == false) {
 597:Core/Src/main.c ****     myprintf("No response from ms5637");
 598:Core/Src/main.c ****     while(1) {}
 599:Core/Src/main.c ****   }
 600:Core/Src/main.c ****   ms5637_reset();
 601:Core/Src/main.c ****   float temperature = 0;
 602:Core/Src/main.c ****   float pressure = 0;
ARM GAS  /tmp/ccW2zlda.s 			page 16


 603:Core/Src/main.c ****   float altitude = 0;
 604:Core/Src/main.c **** 
 605:Core/Src/main.c ****   float avg_alt_sum = 0;
 606:Core/Src/main.c ****   uint32_t avg_batv_sum = 0;
 607:Core/Src/main.c ****   int avg_count = 0;
 608:Core/Src/main.c ****   float avg_alt = 0;
 609:Core/Src/main.c ****   uint32_t avg_batv = 0;
 610:Core/Src/main.c **** 
 611:Core/Src/main.c ****   ssd1306_Init();
 612:Core/Src/main.c ****   char buf[16] = {};
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   __HAL_UART_ENABLE(&huart1);
 615:Core/Src/main.c **** 
 616:Core/Src/main.c ****   HAL_OPAMP_Start(&hopamp4);
 617:Core/Src/main.c **** 
 618:Core/Src/main.c ****   lwgps_init(&hgps);
 619:Core/Src/main.c ****   lwrb_init(&hgps_buff, hgps_buff_data, 512);
 620:Core/Src/main.c ****   
 621:Core/Src/main.c ****   char str[16];
 622:Core/Src/main.c ****   uint8_t rx;
 623:Core/Src/main.c **** 
 624:Core/Src/main.c ****   //USART1->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 625:Core/Src/main.c ****   __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 626:Core/Src/main.c **** 
 627:Core/Src/main.c ****   while(1) {
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****     HAL_ADC_Start(&hadc5);
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****     if(ms5637_read_temperature_and_pressure(&temperature, &pressure) != ms5637_status_ok) {
 632:Core/Src/main.c ****       myprintf("Failed to get Temperature and Pressure\r\n");
 633:Core/Src/main.c ****       while(1) {}
 634:Core/Src/main.c ****     } else {
 635:Core/Src/main.c ****       //myprintf("%2.2fC, %4.2fhPa\r\n", temperature, pressure);
 636:Core/Src/main.c ****     }
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc5, 10);
 639:Core/Src/main.c ****     uint16_t batv = HAL_ADC_GetValue(&hadc5);
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****     const float reftemp = 10.0f;
 642:Core/Src/main.c ****     const float refpres = 1026.0f;
 643:Core/Src/main.c ****     const float atmo_const = -29.27112;
 644:Core/Src/main.c **** 
 645:Core/Src/main.c ****     altitude = (log(pressure)-log(refpres))*atmo_const*(temperature+273.15);
 646:Core/Src/main.c ****     avg_alt_sum += altitude;
 647:Core/Src/main.c ****     avg_batv_sum += batv;
 648:Core/Src/main.c ****     avg_count++;
 649:Core/Src/main.c ****     if(avg_count == 30) {
 650:Core/Src/main.c ****       avg_alt = avg_alt_sum/avg_count;
 651:Core/Src/main.c ****       avg_batv = avg_batv_sum/avg_count;
 652:Core/Src/main.c ****       avg_count = 0;
 653:Core/Src/main.c ****       avg_alt_sum = 0;
 654:Core/Src/main.c ****       avg_batv_sum = 0;
 655:Core/Src/main.c ****     }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c ****     if (lwrb_get_full(&hgps_buff)) {        /* Check if anything in buffer now */
 658:Core/Src/main.c ****         while (lwrb_read(&hgps_buff, &rx, 1) == 1) {
 659:Core/Src/main.c ****             lwgps_process(&hgps, &rx, 1); 
ARM GAS  /tmp/ccW2zlda.s 			page 17


 660:Core/Src/main.c ****         }
 661:Core/Src/main.c ****     }
 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****     ssd1306_Fill(Black);
 664:Core/Src/main.c ****     sprintf(buf, "%2.1fC %4.0f %2.1fm", temperature, pressure, avg_alt );
 665:Core/Src/main.c ****     ssd1306_SetCursor(1,1);
 666:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 667:Core/Src/main.c ****     sprintf(buf, "%2.1fV %d/%d %2.1fm", (float)((2.5/4096)*batv)*2.0, hgps.sats_in_use, hgps.sats_i
 668:Core/Src/main.c ****     ssd1306_SetCursor(1,12);
 669:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 670:Core/Src/main.c ****     sprintf(buf, "%.5f %.5f", hgps.latitude, hgps.longitude );
 671:Core/Src/main.c ****     ssd1306_SetCursor(1,22);
 672:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 673:Core/Src/main.c **** 
 674:Core/Src/main.c ****     ssd1306_UpdateScreen();
 675:Core/Src/main.c ****     //HAL_Delay(5);
 676:Core/Src/main.c ****     HAL_GPIO_TogglePin(NAV_STAT_0_GPIO_Port, NAV_STAT_1_Pin);
 677:Core/Src/main.c ****   }
 678:Core/Src/main.c **** 
 679:Core/Src/main.c ****   float roll_cal = 0;
 680:Core/Src/main.c ****   float pitch_cal = 0;
 681:Core/Src/main.c ****   float yaw_cal = 0;
 682:Core/Src/main.c **** 
 683:Core/Src/main.c ****   uint8_t gps_fix_last = 1;
 684:Core/Src/main.c ****   /* USER CODE END 2 */
 685:Core/Src/main.c **** 
 686:Core/Src/main.c ****   /* Infinite loop */
 687:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 688:Core/Src/main.c ****   while (1)
 689:Core/Src/main.c ****   {
 690:Core/Src/main.c ****     /* USER CODE END WHILE */
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 693:Core/Src/main.c **** 
 694:Core/Src/main.c ****     icm_20948_DMP_data_t data;
 695:Core/Src/main.c ****     ICM_20948_Status_e read_stat;
 696:Core/Src/main.c ****     read_stat = inv_icm20948_read_dmp_data( &myICM, &data );
 697:Core/Src/main.c **** 
 698:Core/Src/main.c ****     if(read_stat == ICM_20948_Stat_Ok || read_stat == ICM_20948_Stat_FIFOMoreDataAvail ) {
 699:Core/Src/main.c ****       if( (data.header & DMP_header_bitmap_Quat9) > 0 ) { // We have asked for orientation data so 
 700:Core/Src/main.c ****         float q1 = ((float)data.Quat9.Data.Q1) / 1073741824.0; // Convert to double. Divide by 2^30
 701:Core/Src/main.c ****         float q2 = ((float)data.Quat9.Data.Q2) / 1073741824.0; // Convert to double. Divide by 2^30
 702:Core/Src/main.c ****         float q3 = ((float)data.Quat9.Data.Q3) / 1073741824.0; // Convert to double. Divide by 2^30
 703:Core/Src/main.c ****         float q0 = sqrt( 1.0 - ((q1 * q1) + (q2 * q2) + (q3 * q3)));
 704:Core/Src/main.c **** 
 705:Core/Src/main.c ****         //myprintf("{\"quat_w\":%.2f, \"quat_x\":%.2f, \"quat_y\":%.2f, \"quat_z\":%.2f}\r\n", q0, 
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****         float qwqwMinusHalf = q0 * q0 - 0.5f; // calculate common terms to avoid repeated operation
 708:Core/Src/main.c ****         float roll = atan2f(q2 * q3 - q0 * q1, qwqwMinusHalf + q3 * q3);
 709:Core/Src/main.c ****         float pitch = -1.0f * asinf(2.0f * (q1 * q3 + q0 * q2));
 710:Core/Src/main.c ****         float yaw = atan2f(q1 * q2 - q0 * q3, qwqwMinusHalf + q1 * q1);
 711:Core/Src/main.c **** 
 712:Core/Src/main.c ****         if(HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_SET) {
 713:Core/Src/main.c ****           pitch_cal = pitch;
 714:Core/Src/main.c ****           yaw_cal = yaw;
 715:Core/Src/main.c ****           roll_cal = roll;
 716:Core/Src/main.c ****         }
ARM GAS  /tmp/ccW2zlda.s 			page 18


 717:Core/Src/main.c **** 
 718:Core/Src/main.c ****         //myprintf("%f; %f; %f\r\n", roll-roll_cal, pitch-pitch_cal, yaw-yaw_cal);
 719:Core/Src/main.c **** 
 720:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_5);
 721:Core/Src/main.c **** 
 722:Core/Src/main.c ****         if(read_stat != ICM_20948_Stat_FIFOMoreDataAvail) {
 723:Core/Src/main.c ****           HAL_Delay(10);
 724:Core/Src/main.c ****         }
 725:Core/Src/main.c ****       }
 726:Core/Src/main.c ****       if( (data.header & DMP_header_bitmap_Compass) > 0 ) { // We have asked for orientation data s
 727:Core/Src/main.c ****         uint32_t mx = data.Compass_Calibr.Data.X;
 728:Core/Src/main.c ****         uint32_t my = data.Compass_Calibr.Data.Y;
 729:Core/Src/main.c ****         uint32_t mz = data.Compass_Calibr.Data.Z;
 730:Core/Src/main.c **** 
 731:Core/Src/main.c ****         //myprintf("%d, %d, %d\r\n", mx, my, mz);
 732:Core/Src/main.c **** 
 733:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_5);
 734:Core/Src/main.c **** 
 735:Core/Src/main.c ****         if(read_stat != ICM_20948_Stat_FIFOMoreDataAvail) {
 736:Core/Src/main.c ****           HAL_Delay(10);
 737:Core/Src/main.c ****         }
 738:Core/Src/main.c ****       }
 739:Core/Src/main.c ****     }
 740:Core/Src/main.c ****     //HAL_Delay(500);
 741:Core/Src/main.c ****   }
 742:Core/Src/main.c ****   /* USER CODE END 3 */
 743:Core/Src/main.c **** }
 744:Core/Src/main.c **** 
 745:Core/Src/main.c **** /**
 746:Core/Src/main.c ****   * @brief System Clock Configuration
 747:Core/Src/main.c ****   * @retval None
 748:Core/Src/main.c ****   */
 749:Core/Src/main.c **** void SystemClock_Config(void)
 750:Core/Src/main.c **** {
 751:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 752:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 753:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 754:Core/Src/main.c **** 
 755:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 756:Core/Src/main.c ****   */
 757:Core/Src/main.c ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 758:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 759:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 760:Core/Src/main.c ****   */
 761:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 762:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 763:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 764:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 765:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 766:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 767:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 768:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 75;
 769:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 770:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 771:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 772:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 773:Core/Src/main.c ****   {
ARM GAS  /tmp/ccW2zlda.s 			page 19


 774:Core/Src/main.c ****     Error_Handler();
 775:Core/Src/main.c ****   }
 776:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 777:Core/Src/main.c ****   */
 778:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 779:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 780:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 781:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 782:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 783:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 784:Core/Src/main.c **** 
 785:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 786:Core/Src/main.c ****   {
 787:Core/Src/main.c ****     Error_Handler();
 788:Core/Src/main.c ****   }
 789:Core/Src/main.c ****   /** Initializes the peripherals clocks
 790:Core/Src/main.c ****   */
 791:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART5
 792:Core/Src/main.c ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
 793:Core/Src/main.c ****                               |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345
 794:Core/Src/main.c ****                               |RCC_PERIPHCLK_QSPI;
 795:Core/Src/main.c ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 796:Core/Src/main.c ****   PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 797:Core/Src/main.c ****   PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 798:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 799:Core/Src/main.c ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800:Core/Src/main.c ****   PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 801:Core/Src/main.c ****   PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 802:Core/Src/main.c **** 
 803:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804:Core/Src/main.c ****   {
 805:Core/Src/main.c ****     Error_Handler();
 806:Core/Src/main.c ****   }
 807:Core/Src/main.c **** }
 808:Core/Src/main.c **** 
 809:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 810:Core/Src/main.c **** #define LINEMAX 512
 811:Core/Src/main.c **** void UART_GPS_Callback() {
 261              		.loc 1 811 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 38B5     		push	{r3, r4, r5, lr}
 266              	.LCFI12:
 267              		.cfi_def_cfa_offset 16
 268              		.cfi_offset 3, -16
 269              		.cfi_offset 4, -12
 270              		.cfi_offset 5, -8
 271              		.cfi_offset 14, -4
 812:Core/Src/main.c **** 
 813:Core/Src/main.c ****   static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
 814:Core/Src/main.c ****   static int rx_index = 0;
 815:Core/Src/main.c **** 
 816:Core/Src/main.c ****   if (USART1->ISR & USART_ISR_RXNE) // Received character?
 272              		.loc 1 816 0
 273 0002 174B     		ldr	r3, .L20
 274 0004 DB69     		ldr	r3, [r3, #28]
ARM GAS  /tmp/ccW2zlda.s 			page 20


 275 0006 13F0200F 		tst	r3, #32
 276 000a 16D0     		beq	.L13
 277              	.LBB4:
 817:Core/Src/main.c ****   {
 818:Core/Src/main.c **** 
 819:Core/Src/main.c ****   char rx = (char)(USART1->RDR & 0xFF);
 278              		.loc 1 819 0
 279 000c 144B     		ldr	r3, .L20
 280 000e 5B6A     		ldr	r3, [r3, #36]
 281 0010 DBB2     		uxtb	r3, r3
 282              	.LVL23:
 820:Core/Src/main.c ****   if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 283              		.loc 1 820 0
 284 0012 0D2B     		cmp	r3, #13
 285 0014 12D0     		beq	.L15
 286              		.loc 1 820 0 is_stmt 0 discriminator 1
 287 0016 0A2B     		cmp	r3, #10
 288 0018 10D0     		beq	.L15
 821:Core/Src/main.c ****   {
 822:Core/Src/main.c ****   if (rx_index != 0) // Line has some content?
 823:Core/Src/main.c ****   {
 824:Core/Src/main.c ****   rx_buffer[rx_index++] = rx; // Add Final Character
 825:Core/Src/main.c ****   rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 826:Core/Src/main.c ****   lwrb_write(&hgps_buff, &rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
 827:Core/Src/main.c ****   rx_index = 0; // Reset content pointer
 828:Core/Src/main.c ****   }
 829:Core/Src/main.c ****   }
 830:Core/Src/main.c ****   else
 831:Core/Src/main.c ****   {
 832:Core/Src/main.c ****   if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 289              		.loc 1 832 0 is_stmt 1
 290 001a 242B     		cmp	r3, #36
 291 001c 04D0     		beq	.L17
 292              		.loc 1 832 0 is_stmt 0 discriminator 1
 293 001e 114A     		ldr	r2, .L20+4
 294 0020 1268     		ldr	r2, [r2]
 295 0022 B2F5007F 		cmp	r2, #512
 296 0026 02D1     		bne	.L18
 297              	.L17:
 833:Core/Src/main.c ****   rx_index = 0;
 298              		.loc 1 833 0 is_stmt 1
 299 0028 0E4A     		ldr	r2, .L20+4
 300 002a 0021     		movs	r1, #0
 301 002c 1160     		str	r1, [r2]
 302              	.L18:
 834:Core/Src/main.c ****   rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 303              		.loc 1 834 0
 304 002e 0D49     		ldr	r1, .L20+4
 305 0030 0A68     		ldr	r2, [r1]
 306 0032 501C     		adds	r0, r2, #1
 307 0034 0860     		str	r0, [r1]
 308 0036 0C49     		ldr	r1, .L20+8
 309 0038 8B54     		strb	r3, [r1, r2]
 310              	.LVL24:
 311              	.L13:
 312              	.LBE4:
 835:Core/Src/main.c ****   }
ARM GAS  /tmp/ccW2zlda.s 			page 21


 836:Core/Src/main.c ****   }
 837:Core/Src/main.c ****   //USART1->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 838:Core/Src/main.c **** }
 313              		.loc 1 838 0
 314 003a 38BD     		pop	{r3, r4, r5, pc}
 315              	.LVL25:
 316              	.L15:
 317              	.LBB5:
 822:Core/Src/main.c ****   {
 318              		.loc 1 822 0
 319 003c 094A     		ldr	r2, .L20+4
 320 003e 1268     		ldr	r2, [r2]
 321 0040 002A     		cmp	r2, #0
 322 0042 FAD0     		beq	.L13
 824:Core/Src/main.c ****   rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 323              		.loc 1 824 0
 324 0044 501C     		adds	r0, r2, #1
 325 0046 0849     		ldr	r1, .L20+8
 326 0048 8B54     		strb	r3, [r1, r2]
 825:Core/Src/main.c ****   lwrb_write(&hgps_buff, &rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
 327              		.loc 1 825 0
 328 004a 0232     		adds	r2, r2, #2
 329 004c 054C     		ldr	r4, .L20+4
 330 004e 2260     		str	r2, [r4]
 331 0050 0025     		movs	r5, #0
 332 0052 0D54     		strb	r5, [r1, r0]
 826:Core/Src/main.c ****   rx_index = 0; // Reset content pointer
 333              		.loc 1 826 0
 334 0054 0548     		ldr	r0, .L20+12
 335 0056 FFF7FEFF 		bl	lwrb_write
 336              	.LVL26:
 827:Core/Src/main.c ****   }
 337              		.loc 1 827 0
 338 005a 2560     		str	r5, [r4]
 339 005c EDE7     		b	.L13
 340              	.L21:
 341 005e 00BF     		.align	2
 342              	.L20:
 343 0060 00380140 		.word	1073821696
 344 0064 00000000 		.word	.LANCHOR1
 345 0068 00000000 		.word	.LANCHOR2
 346 006c 00000000 		.word	hgps_buff
 347              	.LBE5:
 348              		.cfi_endproc
 349              	.LFE338:
 351              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 352              		.align	1
 353              		.global	HAL_TIM_PeriodElapsedCallback
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 357              		.fpu fpv4-sp-d16
 359              	HAL_TIM_PeriodElapsedCallback:
 360              	.LFB339:
 839:Core/Src/main.c **** /* USER CODE END 4 */
 840:Core/Src/main.c **** 
 841:Core/Src/main.c ****  /**
ARM GAS  /tmp/ccW2zlda.s 			page 22


 842:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 843:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 844:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 845:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 846:Core/Src/main.c ****   * @param  htim : TIM handle
 847:Core/Src/main.c ****   * @retval None
 848:Core/Src/main.c ****   */
 849:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 850:Core/Src/main.c **** {
 361              		.loc 1 850 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              	.LVL27:
 366 0000 08B5     		push	{r3, lr}
 367              	.LCFI13:
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 3, -8
 370              		.cfi_offset 14, -4
 851:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 852:Core/Src/main.c **** 
 853:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 854:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 371              		.loc 1 854 0
 372 0002 0268     		ldr	r2, [r0]
 373 0004 034B     		ldr	r3, .L26
 374 0006 9A42     		cmp	r2, r3
 375 0008 00D0     		beq	.L25
 376              	.LVL28:
 377              	.L22:
 855:Core/Src/main.c ****     HAL_IncTick();
 856:Core/Src/main.c ****   }
 857:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 858:Core/Src/main.c **** 
 859:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 860:Core/Src/main.c **** }
 378              		.loc 1 860 0
 379 000a 08BD     		pop	{r3, pc}
 380              	.LVL29:
 381              	.L25:
 855:Core/Src/main.c ****     HAL_IncTick();
 382              		.loc 1 855 0
 383 000c FFF7FEFF 		bl	HAL_IncTick
 384              	.LVL30:
 385              		.loc 1 860 0
 386 0010 FBE7     		b	.L22
 387              	.L27:
 388 0012 00BF     		.align	2
 389              	.L26:
 390 0014 00100040 		.word	1073745920
 391              		.cfi_endproc
 392              	.LFE339:
 394              		.section	.text.Error_Handler,"ax",%progbits
 395              		.align	1
 396              		.global	Error_Handler
 397              		.syntax unified
 398              		.thumb
ARM GAS  /tmp/ccW2zlda.s 			page 23


 399              		.thumb_func
 400              		.fpu fpv4-sp-d16
 402              	Error_Handler:
 403              	.LFB340:
 861:Core/Src/main.c **** 
 862:Core/Src/main.c **** /**
 863:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 864:Core/Src/main.c ****   * @retval None
 865:Core/Src/main.c ****   */
 866:Core/Src/main.c **** void Error_Handler(void)
 867:Core/Src/main.c **** {
 404              		.loc 1 867 0
 405              		.cfi_startproc
 406              		@ Volatile: function does not return.
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              	.LBB6:
 411              	.LBB7:
 412              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccW2zlda.s 			page 24


  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
ARM GAS  /tmp/ccW2zlda.s 			page 25


  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
ARM GAS  /tmp/ccW2zlda.s 			page 26


 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccW2zlda.s 			page 27


 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 413              		.loc 2 209 0
 414              		.syntax unified
 415              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 416 0000 72B6     		cpsid i
 417              	@ 0 "" 2
 418              		.thumb
 419              		.syntax unified
 420              	.L29:
 421 0002 FEE7     		b	.L29
 422              	.LBE7:
 423              	.LBE6:
 424              		.cfi_endproc
 425              	.LFE340:
 427              		.section	.text.SystemClock_Config,"ax",%progbits
 428              		.align	1
 429              		.global	SystemClock_Config
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 433              		.fpu fpv4-sp-d16
 435              	SystemClock_Config:
 436              	.LFB337:
 750:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 437              		.loc 1 750 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 160
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441 0000 00B5     		push	{lr}
 442              	.LCFI14:
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 14, -4
 445 0002 A9B0     		sub	sp, sp, #164
 446              	.LCFI15:
 447              		.cfi_def_cfa_offset 168
 751:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 448              		.loc 1 751 0
 449 0004 3822     		movs	r2, #56
 450 0006 0021     		movs	r1, #0
 451 0008 1AA8     		add	r0, sp, #104
 452 000a FFF7FEFF 		bl	memset
 453              	.LVL31:
 752:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 454              		.loc 1 752 0
 455 000e 0021     		movs	r1, #0
 456 0010 1591     		str	r1, [sp, #84]
 457 0012 1691     		str	r1, [sp, #88]
 458 0014 1791     		str	r1, [sp, #92]
 459 0016 1891     		str	r1, [sp, #96]
 460 0018 1991     		str	r1, [sp, #100]
 753:Core/Src/main.c **** 
 461              		.loc 1 753 0
 462 001a 5422     		movs	r2, #84
 463 001c 6846     		mov	r0, sp
 464 001e FFF7FEFF 		bl	memset
 465              	.LVL32:
 757:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  /tmp/ccW2zlda.s 			page 28


 466              		.loc 1 757 0
 467 0022 4FF40070 		mov	r0, #512
 468 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 469              	.LVL33:
 761:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 470              		.loc 1 761 0
 471 002a 2223     		movs	r3, #34
 472 002c 1A93     		str	r3, [sp, #104]
 762:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 473              		.loc 1 762 0
 474 002e 4FF48073 		mov	r3, #256
 475 0032 1D93     		str	r3, [sp, #116]
 763:Core/Src/main.c ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 476              		.loc 1 763 0
 477 0034 4023     		movs	r3, #64
 478 0036 1E93     		str	r3, [sp, #120]
 764:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 479              		.loc 1 764 0
 480 0038 0123     		movs	r3, #1
 481 003a 2093     		str	r3, [sp, #128]
 765:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 482              		.loc 1 765 0
 483 003c 0223     		movs	r3, #2
 484 003e 2193     		str	r3, [sp, #132]
 766:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 485              		.loc 1 766 0
 486 0040 2293     		str	r3, [sp, #136]
 767:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 75;
 487              		.loc 1 767 0
 488 0042 0422     		movs	r2, #4
 489 0044 2392     		str	r2, [sp, #140]
 768:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 490              		.loc 1 768 0
 491 0046 4B21     		movs	r1, #75
 492 0048 2491     		str	r1, [sp, #144]
 769:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 493              		.loc 1 769 0
 494 004a 2592     		str	r2, [sp, #148]
 770:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 495              		.loc 1 770 0
 496 004c 2693     		str	r3, [sp, #152]
 771:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 497              		.loc 1 771 0
 498 004e 2793     		str	r3, [sp, #156]
 772:Core/Src/main.c ****   {
 499              		.loc 1 772 0
 500 0050 1AA8     		add	r0, sp, #104
 501 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 502              	.LVL34:
 503 0056 08BB     		cbnz	r0, .L35
 778:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 504              		.loc 1 778 0
 505 0058 0F23     		movs	r3, #15
 506 005a 1593     		str	r3, [sp, #84]
 780:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 507              		.loc 1 780 0
 508 005c 0323     		movs	r3, #3
ARM GAS  /tmp/ccW2zlda.s 			page 29


 509 005e 1693     		str	r3, [sp, #88]
 781:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 510              		.loc 1 781 0
 511 0060 0023     		movs	r3, #0
 512 0062 1793     		str	r3, [sp, #92]
 782:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 513              		.loc 1 782 0
 514 0064 1893     		str	r3, [sp, #96]
 783:Core/Src/main.c **** 
 515              		.loc 1 783 0
 516 0066 1993     		str	r3, [sp, #100]
 785:Core/Src/main.c ****   {
 517              		.loc 1 785 0
 518 0068 0421     		movs	r1, #4
 519 006a 15A8     		add	r0, sp, #84
 520 006c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 521              	.LVL35:
 522 0070 B0B9     		cbnz	r0, .L36
 791:Core/Src/main.c ****                               |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
 523              		.loc 1 791 0
 524 0072 0D4B     		ldr	r3, .L38
 525 0074 0093     		str	r3, [sp]
 795:Core/Src/main.c ****   PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 526              		.loc 1 795 0
 527 0076 0023     		movs	r3, #0
 528 0078 0193     		str	r3, [sp, #4]
 796:Core/Src/main.c ****   PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 529              		.loc 1 796 0
 530 007a 0593     		str	r3, [sp, #20]
 797:Core/Src/main.c ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 531              		.loc 1 797 0
 532 007c 0893     		str	r3, [sp, #32]
 798:Core/Src/main.c ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 533              		.loc 1 798 0
 534 007e 0F93     		str	r3, [sp, #60]
 799:Core/Src/main.c ****   PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 535              		.loc 1 799 0
 536 0080 4FF00052 		mov	r2, #536870912
 537 0084 1192     		str	r2, [sp, #68]
 800:Core/Src/main.c ****   PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 538              		.loc 1 800 0
 539 0086 4FF00042 		mov	r2, #-2147483648
 540 008a 1292     		str	r2, [sp, #72]
 801:Core/Src/main.c **** 
 541              		.loc 1 801 0
 542 008c 1393     		str	r3, [sp, #76]
 803:Core/Src/main.c ****   {
 543              		.loc 1 803 0
 544 008e 6846     		mov	r0, sp
 545 0090 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 546              	.LVL36:
 547 0094 30B9     		cbnz	r0, .L37
 807:Core/Src/main.c **** 
 548              		.loc 1 807 0
 549 0096 29B0     		add	sp, sp, #164
 550              	.LCFI16:
 551              		.cfi_remember_state
ARM GAS  /tmp/ccW2zlda.s 			page 30


 552              		.cfi_def_cfa_offset 4
 553              		@ sp needed
 554 0098 5DF804FB 		ldr	pc, [sp], #4
 555              	.L35:
 556              	.LCFI17:
 557              		.cfi_restore_state
 774:Core/Src/main.c ****   }
 558              		.loc 1 774 0
 559 009c FFF7FEFF 		bl	Error_Handler
 560              	.LVL37:
 561              	.L36:
 787:Core/Src/main.c ****   }
 562              		.loc 1 787 0
 563 00a0 FFF7FEFF 		bl	Error_Handler
 564              	.LVL38:
 565              	.L37:
 805:Core/Src/main.c ****   }
 566              		.loc 1 805 0
 567 00a4 FFF7FEFF 		bl	Error_Handler
 568              	.LVL39:
 569              	.L39:
 570              		.align	2
 571              	.L38:
 572 00a8 91A00500 		.word	368785
 573              		.cfi_endproc
 574              	.LFE337:
 576              		.global	__aeabi_f2d
 577              		.global	__aeabi_dsub
 578              		.global	__aeabi_dmul
 579              		.global	__aeabi_dadd
 580              		.global	__aeabi_d2f
 581              		.global	__aeabi_i2d
 582              		.section	.text.main,"ax",%progbits
 583              		.align	1
 584              		.global	main
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu fpv4-sp-d16
 590              	main:
 591              	.LFB336:
 116:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 592              		.loc 1 116 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 96
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 597              	.LCFI18:
 598              		.cfi_def_cfa_offset 28
 599              		.cfi_offset 4, -28
 600              		.cfi_offset 5, -24
 601              		.cfi_offset 6, -20
 602              		.cfi_offset 7, -16
 603              		.cfi_offset 8, -12
 604              		.cfi_offset 9, -8
 605              		.cfi_offset 14, -4
 606 0004 2DED028B 		vpush.64	{d8}
ARM GAS  /tmp/ccW2zlda.s 			page 31


 607              	.LCFI19:
 608              		.cfi_def_cfa_offset 36
 609              		.cfi_offset 80, -36
 610              		.cfi_offset 81, -32
 611 0008 9FB0     		sub	sp, sp, #124
 612              	.LCFI20:
 613              		.cfi_def_cfa_offset 160
 124:Core/Src/main.c **** 
 614              		.loc 1 124 0
 615 000a FFF7FEFF 		bl	HAL_Init
 616              	.LVL40:
 131:Core/Src/main.c **** 
 617              		.loc 1 131 0
 618 000e FFF7FEFF 		bl	SystemClock_Config
 619              	.LVL41:
 138:Core/Src/main.c ****   MX_DMA_Init();
 620              		.loc 1 138 0
 621 0012 FFF7FEFF 		bl	MX_GPIO_Init
 622              	.LVL42:
 139:Core/Src/main.c ****   MX_QUADSPI1_Init();
 623              		.loc 1 139 0
 624 0016 FFF7FEFF 		bl	MX_DMA_Init
 625              	.LVL43:
 140:Core/Src/main.c ****   MX_SPI3_Init();
 626              		.loc 1 140 0
 627 001a FFF7FEFF 		bl	MX_QUADSPI1_Init
 628              	.LVL44:
 141:Core/Src/main.c ****   MX_TIM8_Init();
 629              		.loc 1 141 0
 630 001e FFF7FEFF 		bl	MX_SPI3_Init
 631              	.LVL45:
 142:Core/Src/main.c ****   MX_ADC2_Init();
 632              		.loc 1 142 0
 633 0022 FFF7FEFF 		bl	MX_TIM8_Init
 634              	.LVL46:
 143:Core/Src/main.c ****   MX_DAC3_Init();
 635              		.loc 1 143 0
 636 0026 FFF7FEFF 		bl	MX_ADC2_Init
 637              	.LVL47:
 144:Core/Src/main.c ****   MX_OPAMP2_Init();
 638              		.loc 1 144 0
 639 002a FFF7FEFF 		bl	MX_DAC3_Init
 640              	.LVL48:
 145:Core/Src/main.c ****   MX_OPAMP4_Init();
 641              		.loc 1 145 0
 642 002e FFF7FEFF 		bl	MX_OPAMP2_Init
 643              	.LVL49:
 146:Core/Src/main.c ****   MX_TIM1_Init();
 644              		.loc 1 146 0
 645 0032 FFF7FEFF 		bl	MX_OPAMP4_Init
 646              	.LVL50:
 147:Core/Src/main.c ****   MX_TIM20_Init();
 647              		.loc 1 147 0
 648 0036 FFF7FEFF 		bl	MX_TIM1_Init
 649              	.LVL51:
 148:Core/Src/main.c ****   if (MX_FATFS_Init() != APP_OK) {
 650              		.loc 1 148 0
ARM GAS  /tmp/ccW2zlda.s 			page 32


 651 003a FFF7FEFF 		bl	MX_TIM20_Init
 652              	.LVL52:
 149:Core/Src/main.c ****     Error_Handler();
 653              		.loc 1 149 0
 654 003e FFF7FEFF 		bl	MX_FATFS_Init
 655              	.LVL53:
 656 0042 08B1     		cbz	r0, .L41
 150:Core/Src/main.c ****   }
 657              		.loc 1 150 0
 658 0044 FFF7FEFF 		bl	Error_Handler
 659              	.LVL54:
 660              	.L41:
 152:Core/Src/main.c ****   MX_I2C2_Init();
 661              		.loc 1 152 0
 662 0048 FFF7FEFF 		bl	MX_UART5_Init
 663              	.LVL55:
 153:Core/Src/main.c ****   MX_USB_Device_Init();
 664              		.loc 1 153 0
 665 004c FFF7FEFF 		bl	MX_I2C2_Init
 666              	.LVL56:
 154:Core/Src/main.c ****   MX_USART1_UART_Init();
 667              		.loc 1 154 0
 668 0050 FFF7FEFF 		bl	MX_USB_Device_Init
 669              	.LVL57:
 155:Core/Src/main.c ****   MX_ADC5_Init();
 670              		.loc 1 155 0
 671 0054 FFF7FEFF 		bl	MX_USART1_UART_Init
 672              	.LVL58:
 156:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 673              		.loc 1 156 0
 674 0058 FFF7FEFF 		bl	MX_ADC5_Init
 675              	.LVL59:
 159:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 676              		.loc 1 159 0
 677 005c 0022     		movs	r2, #0
 678 005e 1021     		movs	r1, #16
 679 0060 4FF09040 		mov	r0, #1207959552
 680 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL60:
 160:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_FORCEON_GPIO_Port, GPS_FORCEON_Pin, GPIO_PIN_SET);
 682              		.loc 1 160 0
 683 0068 AB4D     		ldr	r5, .L248
 684 006a 0122     		movs	r2, #1
 685 006c 4FF40051 		mov	r1, #8192
 686 0070 2846     		mov	r0, r5
 687 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 688              	.LVL61:
 161:Core/Src/main.c ****   HAL_GPIO_WritePin(GPS_EXT_INT_GPIO_Port, GPS_EXT_INT_Pin, GPIO_PIN_SET);
 689              		.loc 1 161 0
 690 0076 0122     		movs	r2, #1
 691 0078 4FF48041 		mov	r1, #16384
 692 007c 2846     		mov	r0, r5
 693 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 694              	.LVL62:
 162:Core/Src/main.c **** 
 695              		.loc 1 162 0
 696 0082 0122     		movs	r2, #1
ARM GAS  /tmp/ccW2zlda.s 			page 33


 697 0084 4FF40041 		mov	r1, #32768
 698 0088 2846     		mov	r0, r5
 699 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 700              	.LVL63:
 164:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_NCS_GPIO_Port, IMU_NCS_Pin, GPIO_PIN_SET);
 701              		.loc 1 164 0
 702 008e 0122     		movs	r2, #1
 703 0090 4FF40041 		mov	r1, #32768
 704 0094 4FF09040 		mov	r0, #1207959552
 705 0098 FFF7FEFF 		bl	HAL_GPIO_WritePin
 706              	.LVL64:
 165:Core/Src/main.c ****   HAL_GPIO_WritePin(IMU_SPI_LS_EN_GPIO_Port, IMU_SPI_LS_EN_Pin, GPIO_PIN_SET);
 707              		.loc 1 165 0
 708 009c 0122     		movs	r2, #1
 709 009e 4FF40061 		mov	r1, #2048
 710 00a2 2846     		mov	r0, r5
 711 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 712              	.LVL65:
 166:Core/Src/main.c ****   HAL_Delay(100);
 713              		.loc 1 166 0
 714 00a8 0122     		movs	r2, #1
 715 00aa 0221     		movs	r1, #2
 716 00ac 4FF09040 		mov	r0, #1207959552
 717 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 718              	.LVL66:
 167:Core/Src/main.c **** 
 719              		.loc 1 167 0
 720 00b4 6420     		movs	r0, #100
 721 00b6 FFF7FEFF 		bl	HAL_Delay
 722              	.LVL67:
 169:Core/Src/main.c ****   myICM._firmware_loaded = false;
 723              		.loc 1 169 0
 724 00ba 984C     		ldr	r4, .L248+4
 725 00bc 0126     		movs	r6, #1
 726 00be 2671     		strb	r6, [r4, #4]
 170:Core/Src/main.c ****   myICM._last_bank = 255;
 727              		.loc 1 170 0
 728 00c0 0023     		movs	r3, #0
 729 00c2 6371     		strb	r3, [r4, #5]
 171:Core/Src/main.c ****   myICM._last_mems_bank = 255;
 730              		.loc 1 171 0
 731 00c4 FF22     		movs	r2, #255
 732 00c6 A271     		strb	r2, [r4, #6]
 172:Core/Src/main.c ****   myICM._gyroSF = 0; 
 733              		.loc 1 172 0
 734 00c8 E271     		strb	r2, [r4, #7]
 173:Core/Src/main.c ****   myICM._gyroSFpll = 0;
 735              		.loc 1 173 0
 736 00ca A360     		str	r3, [r4, #8]
 174:Core/Src/main.c ****   myICM._enabled_Android_0 = 0; 
 737              		.loc 1 174 0
 738 00cc 2373     		strb	r3, [r4, #12]
 175:Core/Src/main.c **** 	myICM._enabled_Android_1 = 0; 
 739              		.loc 1 175 0
 740 00ce 2361     		str	r3, [r4, #16]
 176:Core/Src/main.c ****   myICM._enabled_Android_intr_0 = 0;
 741              		.loc 1 176 0
ARM GAS  /tmp/ccW2zlda.s 			page 34


 742 00d0 6361     		str	r3, [r4, #20]
 177:Core/Src/main.c **** 	myICM._enabled_Android_intr_1 = 0; 
 743              		.loc 1 177 0
 744 00d2 A361     		str	r3, [r4, #24]
 178:Core/Src/main.c **** 
 745              		.loc 1 178 0
 746 00d4 E361     		str	r3, [r4, #28]
 180:Core/Src/main.c **** 
 747              		.loc 1 180 0
 748 00d6 9249     		ldr	r1, .L248+8
 749 00d8 2046     		mov	r0, r4
 750 00da FFF7FEFF 		bl	ICM_20948_link_serif
 751              	.LVL68:
 182:Core/Src/main.c **** 
 752              		.loc 1 182 0
 753 00de 3246     		mov	r2, r6
 754 00e0 2021     		movs	r1, #32
 755 00e2 2846     		mov	r0, r5
 756 00e4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 757              	.LVL69:
 189:Core/Src/main.c ****   if(ICM_20948_check_id( &myICM ) == ICM_20948_Stat_Ok) {
 758              		.loc 1 189 0
 759 00e8 8E48     		ldr	r0, .L248+12
 760 00ea FFF7FEFF 		bl	myprintf
 761              	.LVL70:
 190:Core/Src/main.c ****     myprintf("- Read ID - PASS\r\n");
 762              		.loc 1 190 0
 763 00ee 2046     		mov	r0, r4
 764 00f0 FFF7FEFF 		bl	ICM_20948_check_id
 765              	.LVL71:
 766 00f4 50B9     		cbnz	r0, .L42
 191:Core/Src/main.c ****   } else {
 767              		.loc 1 191 0
 768 00f6 8C48     		ldr	r0, .L248+16
 769 00f8 FFF7FEFF 		bl	myprintf
 770              	.LVL72:
 197:Core/Src/main.c ****     myprintf("- SW Reset - PASS\r\n");
 771              		.loc 1 197 0
 772 00fc 2046     		mov	r0, r4
 773 00fe FFF7FEFF 		bl	ICM_20948_sw_reset
 774              	.LVL73:
 775 0102 38B1     		cbz	r0, .L43
 200:Core/Src/main.c ****     while(1) {};
 776              		.loc 1 200 0
 777 0104 8948     		ldr	r0, .L248+20
 778 0106 FFF7FEFF 		bl	myprintf
 779              	.LVL74:
 780              	.L48:
 781 010a FEE7     		b	.L48
 782              	.L42:
 193:Core/Src/main.c ****     while(1) {};
 783              		.loc 1 193 0
 784 010c 8848     		ldr	r0, .L248+24
 785 010e FFF7FEFF 		bl	myprintf
 786              	.LVL75:
 787              	.L45:
 788 0112 FEE7     		b	.L45
ARM GAS  /tmp/ccW2zlda.s 			page 35


 789              	.L43:
 198:Core/Src/main.c ****   } else {
 790              		.loc 1 198 0
 791 0114 8748     		ldr	r0, .L248+28
 792 0116 FFF7FEFF 		bl	myprintf
 793              	.LVL76:
 203:Core/Src/main.c **** 
 794              		.loc 1 203 0
 795 011a 6420     		movs	r0, #100
 796 011c FFF7FEFF 		bl	HAL_Delay
 797              	.LVL77:
 205:Core/Src/main.c ****     myprintf("- Wake from Sleep - PASS\r\n");
 798              		.loc 1 205 0
 799 0120 0021     		movs	r1, #0
 800 0122 7E48     		ldr	r0, .L248+4
 801 0124 FFF7FEFF 		bl	ICM_20948_sleep
 802              	.LVL78:
 803 0128 18B1     		cbz	r0, .L46
 208:Core/Src/main.c ****     while(1) {};
 804              		.loc 1 208 0
 805 012a 8348     		ldr	r0, .L248+32
 806 012c FFF7FEFF 		bl	myprintf
 807              	.LVL79:
 808              	.L51:
 809 0130 FEE7     		b	.L51
 810              	.L46:
 206:Core/Src/main.c ****   } else {
 811              		.loc 1 206 0
 812 0132 8248     		ldr	r0, .L248+36
 813 0134 FFF7FEFF 		bl	myprintf
 814              	.LVL80:
 212:Core/Src/main.c ****     myprintf("- Full power mode - PASS\r\n");
 815              		.loc 1 212 0
 816 0138 0021     		movs	r1, #0
 817 013a 7848     		ldr	r0, .L248+4
 818 013c FFF7FEFF 		bl	ICM_20948_low_power
 819              	.LVL81:
 820 0140 18B1     		cbz	r0, .L49
 215:Core/Src/main.c ****     while(1) {};
 821              		.loc 1 215 0
 822 0142 7F48     		ldr	r0, .L248+40
 823 0144 FFF7FEFF 		bl	myprintf
 824              	.LVL82:
 825              	.L54:
 826 0148 FEE7     		b	.L54
 827              	.L49:
 213:Core/Src/main.c ****   } else {
 828              		.loc 1 213 0
 829 014a 7E48     		ldr	r0, .L248+44
 830 014c FFF7FEFF 		bl	myprintf
 831              	.LVL83:
 219:Core/Src/main.c ****     myprintf("- Disable I2C Passthrough - PASS\r\n");
 832              		.loc 1 219 0
 833 0150 0021     		movs	r1, #0
 834 0152 7248     		ldr	r0, .L248+4
 835 0154 FFF7FEFF 		bl	ICM_20948_i2c_master_passthrough
 836              	.LVL84:
ARM GAS  /tmp/ccW2zlda.s 			page 36


 837 0158 18B1     		cbz	r0, .L52
 222:Core/Src/main.c ****     while(1) {};
 838              		.loc 1 222 0
 839 015a 7B48     		ldr	r0, .L248+48
 840 015c FFF7FEFF 		bl	myprintf
 841              	.LVL85:
 842              	.L57:
 843 0160 FEE7     		b	.L57
 844              	.L52:
 220:Core/Src/main.c ****   } else {
 845              		.loc 1 220 0
 846 0162 7A48     		ldr	r0, .L248+52
 847 0164 FFF7FEFF 		bl	myprintf
 848              	.LVL86:
 226:Core/Src/main.c ****     myprintf("- Enable I2C Master - PASS\r\n");
 849              		.loc 1 226 0
 850 0168 0121     		movs	r1, #1
 851 016a 6C48     		ldr	r0, .L248+4
 852 016c FFF7FEFF 		bl	ICM_20948_i2c_master_enable
 853              	.LVL87:
 854 0170 18B1     		cbz	r0, .L55
 229:Core/Src/main.c ****     while(1) {};
 855              		.loc 1 229 0
 856 0172 7748     		ldr	r0, .L248+56
 857 0174 FFF7FEFF 		bl	myprintf
 858              	.LVL88:
 859              	.L60:
 860 0178 FEE7     		b	.L60
 861              	.L55:
 227:Core/Src/main.c ****   } else {
 862              		.loc 1 227 0
 863 017a 7648     		ldr	r0, .L248+60
 864 017c FFF7FEFF 		bl	myprintf
 865              	.LVL89:
 233:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 866              		.loc 1 233 0
 867 0180 6648     		ldr	r0, .L248+4
 868 0182 FFF7FEFF 		bl	ICM_20948_i2c_master_reset
 869              	.LVL90:
 870 0186 18B1     		cbz	r0, .L58
 236:Core/Src/main.c ****     while(1) {};
 871              		.loc 1 236 0
 872 0188 7348     		ldr	r0, .L248+64
 873 018a FFF7FEFF 		bl	myprintf
 874              	.LVL91:
 875              	.L63:
 876 018e FEE7     		b	.L63
 877              	.L58:
 234:Core/Src/main.c ****   } else {
 878              		.loc 1 234 0
 879 0190 7248     		ldr	r0, .L248+68
 880 0192 FFF7FEFF 		bl	myprintf
 881              	.LVL92:
 240:Core/Src/main.c **** 
 882              		.loc 1 240 0
 883 0196 6420     		movs	r0, #100
 884 0198 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /tmp/ccW2zlda.s 			page 37


 885              	.LVL93:
 242:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 886              		.loc 1 242 0
 887 019c 5F48     		ldr	r0, .L248+4
 888 019e FFF7FEFF 		bl	ICM_20948_i2c_master_reset
 889              	.LVL94:
 890 01a2 18B1     		cbz	r0, .L61
 245:Core/Src/main.c ****     while(1) {};
 891              		.loc 1 245 0
 892 01a4 6C48     		ldr	r0, .L248+64
 893 01a6 FFF7FEFF 		bl	myprintf
 894              	.LVL95:
 895              	.L66:
 896 01aa FEE7     		b	.L66
 897              	.L61:
 243:Core/Src/main.c ****   } else {
 898              		.loc 1 243 0
 899 01ac 6B48     		ldr	r0, .L248+68
 900 01ae FFF7FEFF 		bl	myprintf
 901              	.LVL96:
 249:Core/Src/main.c **** 
 902              		.loc 1 249 0
 903 01b2 6420     		movs	r0, #100
 904 01b4 FFF7FEFF 		bl	HAL_Delay
 905              	.LVL97:
 251:Core/Src/main.c ****     myprintf("- I2C Master Reset - PASS\r\n");
 906              		.loc 1 251 0
 907 01b8 5848     		ldr	r0, .L248+4
 908 01ba FFF7FEFF 		bl	ICM_20948_i2c_master_reset
 909              	.LVL98:
 910 01be 18B1     		cbz	r0, .L64
 254:Core/Src/main.c ****     while(1) {};
 911              		.loc 1 254 0
 912 01c0 6548     		ldr	r0, .L248+64
 913 01c2 FFF7FEFF 		bl	myprintf
 914              	.LVL99:
 915              	.L69:
 916 01c6 FEE7     		b	.L69
 917              	.L64:
 252:Core/Src/main.c ****   } else {
 918              		.loc 1 252 0
 919 01c8 6448     		ldr	r0, .L248+68
 920 01ca FFF7FEFF 		bl	myprintf
 921              	.LVL100:
 258:Core/Src/main.c **** 
 922              		.loc 1 258 0
 923 01ce 6420     		movs	r0, #100
 924 01d0 FFF7FEFF 		bl	HAL_Delay
 925              	.LVL101:
 260:Core/Src/main.c ****   ICM_20948_i2c_master_single_r( &myICM, MAG_AK09916_I2C_ADDR, AK09916_REG_WIA2, &AK09916_whoiam);
 926              		.loc 1 260 0
 927 01d4 1EAB     		add	r3, sp, #120
 928 01d6 0022     		movs	r2, #0
 929 01d8 03F8012D 		strb	r2, [r3, #-1]!
 261:Core/Src/main.c ****   myprintf("- AK09916 WHOIAM - 0x%02x - 0x%02x\r\n", AK09916_whoiam, MAG_AK09916_WHO_AM_I & 0xFF);
 930              		.loc 1 261 0
 931 01dc 4F4C     		ldr	r4, .L248+4
ARM GAS  /tmp/ccW2zlda.s 			page 38


 932 01de 0122     		movs	r2, #1
 933 01e0 0C21     		movs	r1, #12
 934 01e2 2046     		mov	r0, r4
 935 01e4 FFF7FEFF 		bl	ICM_20948_i2c_master_single_r
 936              	.LVL102:
 262:Core/Src/main.c **** 
 937              		.loc 1 262 0
 938 01e8 0922     		movs	r2, #9
 939 01ea 9DF87710 		ldrb	r1, [sp, #119]	@ zero_extendqisi2
 940 01ee 5C48     		ldr	r0, .L248+72
 941 01f0 FFF7FEFF 		bl	myprintf
 942              	.LVL103:
 265:Core/Src/main.c ****   if(ICM_20948_i2c_master_single_w( &myICM, MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL2, (uint8_t)&regc
 943              		.loc 1 265 0
 944 01f4 9DF87420 		ldrb	r2, [sp, #116]	@ zero_extendqisi2
 945 01f8 0823     		movs	r3, #8
 946 01fa 63F30402 		bfi	r2, r3, #0, #5
 947 01fe 1EAB     		add	r3, sp, #120
 948 0200 03F8042D 		strb	r2, [r3, #-4]!
 266:Core/Src/main.c ****     myprintf("- AK09916 Configure Control 2 - PASS\r\n");
 949              		.loc 1 266 0
 950 0204 DBB2     		uxtb	r3, r3
 951 0206 3122     		movs	r2, #49
 952 0208 0C21     		movs	r1, #12
 953 020a 2046     		mov	r0, r4
 954 020c FFF7FEFF 		bl	ICM_20948_i2c_master_single_w
 955              	.LVL104:
 956 0210 18B1     		cbz	r0, .L67
 269:Core/Src/main.c ****     while(1) {};
 957              		.loc 1 269 0
 958 0212 5448     		ldr	r0, .L248+76
 959 0214 FFF7FEFF 		bl	myprintf
 960              	.LVL105:
 961              	.L72:
 962 0218 FEE7     		b	.L72
 963              	.L67:
 267:Core/Src/main.c ****   } else {
 964              		.loc 1 267 0
 965 021a 5348     		ldr	r0, .L248+80
 966 021c FFF7FEFF 		bl	myprintf
 967              	.LVL106:
 273:Core/Src/main.c ****     myprintf("- AK09916 Configure Status 1- PASS\r\n");
 968              		.loc 1 273 0
 969 0220 0021     		movs	r1, #0
 970 0222 0591     		str	r1, [sp, #20]
 971 0224 0491     		str	r1, [sp, #16]
 972 0226 0391     		str	r1, [sp, #12]
 973 0228 0123     		movs	r3, #1
 974 022a 0293     		str	r3, [sp, #8]
 975 022c 0193     		str	r3, [sp, #4]
 976 022e 0923     		movs	r3, #9
 977 0230 0093     		str	r3, [sp]
 978 0232 1023     		movs	r3, #16
 979 0234 0C22     		movs	r2, #12
 980 0236 3948     		ldr	r0, .L248+4
 981 0238 FFF7FEFF 		bl	ICM_20948_i2c_controller_configure_peripheral
 982              	.LVL107:
ARM GAS  /tmp/ccW2zlda.s 			page 39


 983 023c 18B1     		cbz	r0, .L70
 276:Core/Src/main.c ****     while(1) {};
 984              		.loc 1 276 0
 985 023e 4B48     		ldr	r0, .L248+84
 986 0240 FFF7FEFF 		bl	myprintf
 987              	.LVL108:
 988              	.L75:
 989 0244 FEE7     		b	.L75
 990              	.L70:
 274:Core/Src/main.c ****   } else {
 991              		.loc 1 274 0
 992 0246 4A48     		ldr	r0, .L248+88
 993 0248 FFF7FEFF 		bl	myprintf
 994              	.LVL109:
 280:Core/Src/main.c ****     myprintf("- Set Clock - PASS\r\n");
 995              		.loc 1 280 0
 996 024c 0121     		movs	r1, #1
 997 024e 3348     		ldr	r0, .L248+4
 998 0250 FFF7FEFF 		bl	ICM_20948_set_clock_source
 999              	.LVL110:
 1000 0254 18B1     		cbz	r0, .L73
 283:Core/Src/main.c ****     while(1) {};
 1001              		.loc 1 283 0
 1002 0256 4748     		ldr	r0, .L248+92
 1003 0258 FFF7FEFF 		bl	myprintf
 1004              	.LVL111:
 1005              	.L78:
 1006 025c FEE7     		b	.L78
 1007              	.L73:
 281:Core/Src/main.c ****   } else {
 1008              		.loc 1 281 0
 1009 025e 4648     		ldr	r0, .L248+96
 1010 0260 FFF7FEFF 		bl	myprintf
 1011              	.LVL112:
 287:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 1012              		.loc 1 287 0
 1013 0264 0021     		movs	r1, #0
 1014 0266 2D48     		ldr	r0, .L248+4
 1015 0268 FFF7FEFF 		bl	ICM_20948_set_bank
 1016              	.LVL113:
 1017 026c 18B1     		cbz	r0, .L76
 290:Core/Src/main.c ****     while(1) {};
 1018              		.loc 1 290 0
 1019 026e 4348     		ldr	r0, .L248+100
 1020 0270 FFF7FEFF 		bl	myprintf
 1021              	.LVL114:
 1022              	.L81:
 1023 0274 FEE7     		b	.L81
 1024              	.L76:
 288:Core/Src/main.c ****   } else {
 1025              		.loc 1 288 0
 1026 0276 4248     		ldr	r0, .L248+104
 1027 0278 FFF7FEFF 		bl	myprintf
 1028              	.LVL115:
 294:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_PWR_MGMT_2, &pwr_mgmt2, 1 ) == ICM_20948_Stat_Ok ) {
 1029              		.loc 1 294 0
 1030 027c 1EAA     		add	r2, sp, #120
ARM GAS  /tmp/ccW2zlda.s 			page 40


 1031 027e 4023     		movs	r3, #64
 1032 0280 02F8053D 		strb	r3, [r2, #-5]!
 295:Core/Src/main.c ****     myprintf("- Write Power Management 2 - PASS\r\n");
 1033              		.loc 1 295 0
 1034 0284 0123     		movs	r3, #1
 1035 0286 0721     		movs	r1, #7
 1036 0288 2448     		ldr	r0, .L248+4
 1037 028a FFF7FEFF 		bl	ICM_20948_execute_w
 1038              	.LVL116:
 1039 028e 18B1     		cbz	r0, .L79
 298:Core/Src/main.c ****     while(1) {};
 1040              		.loc 1 298 0
 1041 0290 3C48     		ldr	r0, .L248+108
 1042 0292 FFF7FEFF 		bl	myprintf
 1043              	.LVL117:
 1044              	.L84:
 1045 0296 FEE7     		b	.L84
 1046              	.L79:
 296:Core/Src/main.c ****   } else {
 1047              		.loc 1 296 0
 1048 0298 3B48     		ldr	r0, .L248+112
 1049 029a FFF7FEFF 		bl	myprintf
 1050              	.LVL118:
 302:Core/Src/main.c ****     myprintf("- Set Sample Mode A G M - PASS\r\n");
 1051              		.loc 1 302 0
 1052 029e 0122     		movs	r2, #1
 1053 02a0 1321     		movs	r1, #19
 1054 02a2 1E48     		ldr	r0, .L248+4
 1055 02a4 FFF7FEFF 		bl	ICM_20948_set_sample_mode
 1056              	.LVL119:
 1057 02a8 18B1     		cbz	r0, .L82
 305:Core/Src/main.c ****     while(1) {};
 1058              		.loc 1 305 0
 1059 02aa 3848     		ldr	r0, .L248+116
 1060 02ac FFF7FEFF 		bl	myprintf
 1061              	.LVL120:
 1062              	.L87:
 1063 02b0 FEE7     		b	.L87
 1064              	.L82:
 303:Core/Src/main.c ****   } else {
 1065              		.loc 1 303 0
 1066 02b2 3748     		ldr	r0, .L248+120
 1067 02b4 FFF7FEFF 		bl	myprintf
 1068              	.LVL121:
 309:Core/Src/main.c ****     myprintf("- Disable FIFO - PASS\r\n");
 1069              		.loc 1 309 0
 1070 02b8 0021     		movs	r1, #0
 1071 02ba 1848     		ldr	r0, .L248+4
 1072 02bc FFF7FEFF 		bl	ICM_20948_enable_FIFO
 1073              	.LVL122:
 1074 02c0 18B1     		cbz	r0, .L85
 312:Core/Src/main.c ****     while(1) {};
 1075              		.loc 1 312 0
 1076 02c2 3448     		ldr	r0, .L248+124
 1077 02c4 FFF7FEFF 		bl	myprintf
 1078              	.LVL123:
 1079              	.L90:
ARM GAS  /tmp/ccW2zlda.s 			page 41


 1080 02c8 FEE7     		b	.L90
 1081              	.L85:
 310:Core/Src/main.c ****   } else {
 1082              		.loc 1 310 0
 1083 02ca 3348     		ldr	r0, .L248+128
 1084 02cc FFF7FEFF 		bl	myprintf
 1085              	.LVL124:
 316:Core/Src/main.c ****     myprintf("- Disable DMP - PASS\r\n");
 1086              		.loc 1 316 0
 1087 02d0 0021     		movs	r1, #0
 1088 02d2 1248     		ldr	r0, .L248+4
 1089 02d4 FFF7FEFF 		bl	ICM_20948_enable_DMP
 1090              	.LVL125:
 1091 02d8 18B1     		cbz	r0, .L88
 319:Core/Src/main.c ****     while(1) {};
 1092              		.loc 1 319 0
 1093 02da 3048     		ldr	r0, .L248+132
 1094 02dc FFF7FEFF 		bl	myprintf
 1095              	.LVL126:
 1096              	.L93:
 1097 02e0 FEE7     		b	.L93
 1098              	.L88:
 317:Core/Src/main.c ****   } else {
 1099              		.loc 1 317 0
 1100 02e2 2F48     		ldr	r0, .L248+136
 1101 02e4 FFF7FEFF 		bl	myprintf
 1102              	.LVL127:
 327:Core/Src/main.c ****     myprintf("- Set Full Scale A G - PASS\r\n");
 1103              		.loc 1 327 0
 1104 02e8 4FF00D02 		mov	r2, #13
 1105 02ec 0321     		movs	r1, #3
 1106 02ee 0B48     		ldr	r0, .L248+4
 1107 02f0 FFF7FEFF 		bl	ICM_20948_set_full_scale
 1108              	.LVL128:
 1109 02f4 18B1     		cbz	r0, .L91
 330:Core/Src/main.c ****     while(1) {};
 1110              		.loc 1 330 0
 1111 02f6 2B48     		ldr	r0, .L248+140
 1112 02f8 FFF7FEFF 		bl	myprintf
 1113              	.LVL129:
 1114              	.L96:
 1115 02fc FEE7     		b	.L96
 1116              	.L91:
 328:Core/Src/main.c ****   } else {
 1117              		.loc 1 328 0
 1118 02fe 2A48     		ldr	r0, .L248+144
 1119 0300 FFF7FEFF 		bl	myprintf
 1120              	.LVL130:
 334:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 1121              		.loc 1 334 0
 1122 0304 0021     		movs	r1, #0
 1123 0306 0548     		ldr	r0, .L248+4
 1124 0308 FFF7FEFF 		bl	ICM_20948_set_bank
 1125              	.LVL131:
 1126 030c 0028     		cmp	r0, #0
 1127 030e 4DD0     		beq	.L94
 337:Core/Src/main.c ****     while(1) {};
ARM GAS  /tmp/ccW2zlda.s 			page 42


 1128              		.loc 1 337 0
 1129 0310 1A48     		ldr	r0, .L248+100
 1130 0312 FFF7FEFF 		bl	myprintf
 1131              	.LVL132:
 1132              	.L99:
 1133 0316 FEE7     		b	.L99
 1134              	.L249:
 1135              		.align	2
 1136              	.L248:
 1137 0318 00080048 		.word	1207961600
 1138 031c 00000000 		.word	myICM
 1139 0320 00000000 		.word	.LANCHOR3
 1140 0324 00000000 		.word	.LC5
 1141 0328 14000000 		.word	.LC6
 1142 032c 64000000 		.word	.LC9
 1143 0330 28000000 		.word	.LC7
 1144 0334 50000000 		.word	.LC8
 1145 0338 94000000 		.word	.LC11
 1146 033c 78000000 		.word	.LC10
 1147 0340 CC000000 		.word	.LC13
 1148 0344 B0000000 		.word	.LC12
 1149 0348 0C010000 		.word	.LC15
 1150 034c E8000000 		.word	.LC14
 1151 0350 50010000 		.word	.LC17
 1152 0354 30010000 		.word	.LC16
 1153 0358 8C010000 		.word	.LC19
 1154 035c 70010000 		.word	.LC18
 1155 0360 A8010000 		.word	.LC20
 1156 0364 F8010000 		.word	.LC22
 1157 0368 D0010000 		.word	.LC21
 1158 036c 48020000 		.word	.LC24
 1159 0370 20020000 		.word	.LC23
 1160 0374 88020000 		.word	.LC26
 1161 0378 70020000 		.word	.LC25
 1162 037c B8020000 		.word	.LC28
 1163 0380 A0020000 		.word	.LC27
 1164 0384 F4020000 		.word	.LC30
 1165 0388 D0020000 		.word	.LC29
 1166 038c 3C030000 		.word	.LC32
 1167 0390 18030000 		.word	.LC31
 1168 0394 78030000 		.word	.LC34
 1169 0398 60030000 		.word	.LC33
 1170 039c A8030000 		.word	.LC36
 1171 03a0 90030000 		.word	.LC35
 1172 03a4 E0030000 		.word	.LC38
 1173 03a8 C0030000 		.word	.LC37
 1174              	.L94:
 335:Core/Src/main.c ****   } else {
 1175              		.loc 1 335 0
 1176 03ac A648     		ldr	r0, .L250
 1177 03ae FFF7FEFF 		bl	myprintf
 1178              	.LVL133:
 341:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_FIFO_EN_1, &zero, 1) == ICM_20948_Stat_Ok) {
 1179              		.loc 1 341 0
 1180 03b2 1EAA     		add	r2, sp, #120
 1181 03b4 0023     		movs	r3, #0
 1182 03b6 02F8063D 		strb	r3, [r2, #-6]!
ARM GAS  /tmp/ccW2zlda.s 			page 43


 342:Core/Src/main.c ****     myprintf("- Set FIFO Enable 1 - PASS\r\n");
 1183              		.loc 1 342 0
 1184 03ba 0123     		movs	r3, #1
 1185 03bc 6621     		movs	r1, #102
 1186 03be A348     		ldr	r0, .L250+4
 1187 03c0 FFF7FEFF 		bl	ICM_20948_execute_w
 1188              	.LVL134:
 1189 03c4 18B1     		cbz	r0, .L97
 345:Core/Src/main.c ****     while(1) {};
 1190              		.loc 1 345 0
 1191 03c6 A248     		ldr	r0, .L250+8
 1192 03c8 FFF7FEFF 		bl	myprintf
 1193              	.LVL135:
 1194              	.L102:
 1195 03cc FEE7     		b	.L102
 1196              	.L97:
 343:Core/Src/main.c ****   } else {
 1197              		.loc 1 343 0
 1198 03ce A148     		ldr	r0, .L250+12
 1199 03d0 FFF7FEFF 		bl	myprintf
 1200              	.LVL136:
 349:Core/Src/main.c ****     myprintf("- Set FIFO Enable 2 - PASS\r\n");
 1201              		.loc 1 349 0
 1202 03d4 0123     		movs	r3, #1
 1203 03d6 0DF17202 		add	r2, sp, #114
 1204 03da 6721     		movs	r1, #103
 1205 03dc 9B48     		ldr	r0, .L250+4
 1206 03de FFF7FEFF 		bl	ICM_20948_execute_w
 1207              	.LVL137:
 1208 03e2 18B1     		cbz	r0, .L100
 352:Core/Src/main.c ****     while(1) {};
 1209              		.loc 1 352 0
 1210 03e4 9C48     		ldr	r0, .L250+16
 1211 03e6 FFF7FEFF 		bl	myprintf
 1212              	.LVL138:
 1213              	.L105:
 1214 03ea FEE7     		b	.L105
 1215              	.L100:
 350:Core/Src/main.c ****   } else {
 1216              		.loc 1 350 0
 1217 03ec 9B48     		ldr	r0, .L250+20
 1218 03ee FFF7FEFF 		bl	myprintf
 1219              	.LVL139:
 358:Core/Src/main.c ****     myprintf("- Read Data Ready Interrupt Enable - PASS\r\n");
 1220              		.loc 1 358 0
 1221 03f2 1CAA     		add	r2, sp, #112
 1222 03f4 0021     		movs	r1, #0
 1223 03f6 9548     		ldr	r0, .L250+4
 1224 03f8 FFF7FEFF 		bl	ICM_20948_int_enable
 1225              	.LVL140:
 1226 03fc 18B1     		cbz	r0, .L103
 361:Core/Src/main.c ****     while(1) {};
 1227              		.loc 1 361 0
 1228 03fe 9848     		ldr	r0, .L250+24
 1229 0400 FFF7FEFF 		bl	myprintf
 1230              	.LVL141:
 1231              	.L108:
ARM GAS  /tmp/ccW2zlda.s 			page 44


 1232 0404 FEE7     		b	.L108
 1233              	.L103:
 359:Core/Src/main.c ****   } else {
 1234              		.loc 1 359 0
 1235 0406 9748     		ldr	r0, .L250+28
 1236 0408 FFF7FEFF 		bl	myprintf
 1237              	.LVL142:
 364:Core/Src/main.c ****   if ( ICM_20948_int_enable( &myICM, &en, &en ) == ICM_20948_Stat_Ok ) {
 1238              		.loc 1 364 0
 1239 040c 9DF87030 		ldrb	r3, [sp, #112]	@ zero_extendqisi2
 1240 0410 6FF34513 		bfc	r3, #5, #1
 1241 0414 1EA9     		add	r1, sp, #120
 1242 0416 01F8083D 		strb	r3, [r1, #-8]!
 365:Core/Src/main.c ****     myprintf("- Set Data Ready Interrupt Disable - PASS\r\n");
 1243              		.loc 1 365 0
 1244 041a 0A46     		mov	r2, r1
 1245 041c 8B48     		ldr	r0, .L250+4
 1246 041e FFF7FEFF 		bl	ICM_20948_int_enable
 1247              	.LVL143:
 1248 0422 18B1     		cbz	r0, .L106
 368:Core/Src/main.c ****     while(1) {};
 1249              		.loc 1 368 0
 1250 0424 9048     		ldr	r0, .L250+32
 1251 0426 FFF7FEFF 		bl	myprintf
 1252              	.LVL144:
 1253              	.L111:
 1254 042a FEE7     		b	.L111
 1255              	.L106:
 366:Core/Src/main.c ****   } else {
 1256              		.loc 1 366 0
 1257 042c 8F48     		ldr	r0, .L250+36
 1258 042e FFF7FEFF 		bl	myprintf
 1259              	.LVL145:
 372:Core/Src/main.c ****     myprintf("- Reset FIFO - PASS\r\n");
 1260              		.loc 1 372 0
 1261 0432 8648     		ldr	r0, .L250+4
 1262 0434 FFF7FEFF 		bl	ICM_20948_reset_FIFO
 1263              	.LVL146:
 1264 0438 18B1     		cbz	r0, .L109
 375:Core/Src/main.c ****     while(1) {};
 1265              		.loc 1 375 0
 1266 043a 8D48     		ldr	r0, .L250+40
 1267 043c FFF7FEFF 		bl	myprintf
 1268              	.LVL147:
 1269              	.L114:
 1270 0440 FEE7     		b	.L114
 1271              	.L109:
 373:Core/Src/main.c ****   } else {
 1272              		.loc 1 373 0
 1273 0442 8C48     		ldr	r0, .L250+44
 1274 0444 FFF7FEFF 		bl	myprintf
 1275              	.LVL148:
 380:Core/Src/main.c ****   mySmplrt.a = 19; // ODR is computed as follows: 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0]). 19 = 56.25H
 1276              		.loc 1 380 0
 1277 0448 1323     		movs	r3, #19
 1278 044a 8DF86E30 		strb	r3, [sp, #110]
 381:Core/Src/main.c ****   if ( ICM_20948_set_sample_rate( &myICM, (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), mySmpl
ARM GAS  /tmp/ccW2zlda.s 			page 45


 1279              		.loc 1 381 0
 1280 044e ADF86C30 		strh	r3, [sp, #108]	@ movhi
 382:Core/Src/main.c ****     myprintf("- Set Sample Rate A G - PASS\r\n");
 1281              		.loc 1 382 0
 1282 0452 1B9A     		ldr	r2, [sp, #108]
 1283 0454 0321     		movs	r1, #3
 1284 0456 7D48     		ldr	r0, .L250+4
 1285 0458 FFF7FEFF 		bl	ICM_20948_set_sample_rate
 1286              	.LVL149:
 1287 045c 18B1     		cbz	r0, .L112
 385:Core/Src/main.c ****     while(1) {};
 1288              		.loc 1 385 0
 1289 045e 8648     		ldr	r0, .L250+48
 1290 0460 FFF7FEFF 		bl	myprintf
 1291              	.LVL150:
 1292              	.L117:
 1293 0464 FEE7     		b	.L117
 1294              	.L112:
 383:Core/Src/main.c ****   } else {
 1295              		.loc 1 383 0
 1296 0466 8548     		ldr	r0, .L250+52
 1297 0468 FFF7FEFF 		bl	myprintf
 1298              	.LVL151:
 390:Core/Src/main.c ****     myprintf("- Set DMP Start Address - PASS\r\n");
 1299              		.loc 1 390 0
 1300 046c 4FF48051 		mov	r1, #4096
 1301 0470 7648     		ldr	r0, .L250+4
 1302 0472 FFF7FEFF 		bl	ICM_20948_set_dmp_start_address
 1303              	.LVL152:
 1304 0476 18B1     		cbz	r0, .L115
 393:Core/Src/main.c ****     while(1) {};
 1305              		.loc 1 393 0
 1306 0478 8148     		ldr	r0, .L250+56
 1307 047a FFF7FEFF 		bl	myprintf
 1308              	.LVL153:
 1309              	.L120:
 1310 047e FEE7     		b	.L120
 1311              	.L115:
 391:Core/Src/main.c ****   } else {
 1312              		.loc 1 391 0
 1313 0480 8048     		ldr	r0, .L250+60
 1314 0482 FFF7FEFF 		bl	myprintf
 1315              	.LVL154:
 397:Core/Src/main.c ****     myprintf("- Load DMP Firmware - PASS\r\n");
 1316              		.loc 1 397 0
 1317 0486 7148     		ldr	r0, .L250+4
 1318 0488 FFF7FEFF 		bl	ICM_20948_firmware_load
 1319              	.LVL155:
 1320 048c 18B1     		cbz	r0, .L118
 400:Core/Src/main.c ****     while(1) {};
 1321              		.loc 1 400 0
 1322 048e 7E48     		ldr	r0, .L250+64
 1323 0490 FFF7FEFF 		bl	myprintf
 1324              	.LVL156:
 1325              	.L123:
 1326 0494 FEE7     		b	.L123
 1327              	.L118:
ARM GAS  /tmp/ccW2zlda.s 			page 46


 398:Core/Src/main.c ****   } else {
 1328              		.loc 1 398 0
 1329 0496 7D48     		ldr	r0, .L250+68
 1330 0498 FFF7FEFF 		bl	myprintf
 1331              	.LVL157:
 404:Core/Src/main.c ****     myprintf("- Set DMP Start Address Bytes - PASS\r\n");
 1332              		.loc 1 404 0
 1333 049c 4FF48051 		mov	r1, #4096
 1334 04a0 6A48     		ldr	r0, .L250+4
 1335 04a2 FFF7FEFF 		bl	ICM_20948_set_dmp_start_address
 1336              	.LVL158:
 1337 04a6 18B1     		cbz	r0, .L121
 407:Core/Src/main.c ****     while(1) {};
 1338              		.loc 1 407 0
 1339 04a8 7948     		ldr	r0, .L250+72
 1340 04aa FFF7FEFF 		bl	myprintf
 1341              	.LVL159:
 1342              	.L126:
 1343 04ae FEE7     		b	.L126
 1344              	.L121:
 405:Core/Src/main.c ****   } else {
 1345              		.loc 1 405 0
 1346 04b0 7848     		ldr	r0, .L250+76
 1347 04b2 FFF7FEFF 		bl	myprintf
 1348              	.LVL160:
 411:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 1349              		.loc 1 411 0
 1350 04b6 0021     		movs	r1, #0
 1351 04b8 6448     		ldr	r0, .L250+4
 1352 04ba FFF7FEFF 		bl	ICM_20948_set_bank
 1353              	.LVL161:
 1354 04be 18B1     		cbz	r0, .L124
 414:Core/Src/main.c ****     while(1) {};
 1355              		.loc 1 414 0
 1356 04c0 7548     		ldr	r0, .L250+80
 1357 04c2 FFF7FEFF 		bl	myprintf
 1358              	.LVL162:
 1359              	.L129:
 1360 04c6 FEE7     		b	.L129
 1361              	.L124:
 412:Core/Src/main.c ****   } else {
 1362              		.loc 1 412 0
 1363 04c8 5F48     		ldr	r0, .L250
 1364 04ca FFF7FEFF 		bl	myprintf
 1365              	.LVL163:
 418:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_HW_FIX_DISABLE, &fix, 1) == ICM_20948_Stat_Ok) {
 1366              		.loc 1 418 0
 1367 04ce 1EAA     		add	r2, sp, #120
 1368 04d0 4823     		movs	r3, #72
 1369 04d2 02F80D3D 		strb	r3, [r2, #-13]!
 419:Core/Src/main.c ****     myprintf("- Set HW Fix - PASS\r\n");
 1370              		.loc 1 419 0
 1371 04d6 0123     		movs	r3, #1
 1372 04d8 7521     		movs	r1, #117
 1373 04da 5C48     		ldr	r0, .L250+4
 1374 04dc FFF7FEFF 		bl	ICM_20948_execute_w
 1375              	.LVL164:
ARM GAS  /tmp/ccW2zlda.s 			page 47


 1376 04e0 18B1     		cbz	r0, .L127
 422:Core/Src/main.c ****     while(1) {};
 1377              		.loc 1 422 0
 1378 04e2 6E48     		ldr	r0, .L250+84
 1379 04e4 FFF7FEFF 		bl	myprintf
 1380              	.LVL165:
 1381              	.L132:
 1382 04e8 FEE7     		b	.L132
 1383              	.L127:
 420:Core/Src/main.c ****   } else {
 1384              		.loc 1 420 0
 1385 04ea 6D48     		ldr	r0, .L250+88
 1386 04ec FFF7FEFF 		bl	myprintf
 1387              	.LVL166:
 426:Core/Src/main.c ****     myprintf("- Set Bank 0 - PASS\r\n");
 1388              		.loc 1 426 0
 1389 04f0 0021     		movs	r1, #0
 1390 04f2 5648     		ldr	r0, .L250+4
 1391 04f4 FFF7FEFF 		bl	ICM_20948_set_bank
 1392              	.LVL167:
 1393 04f8 18B1     		cbz	r0, .L130
 429:Core/Src/main.c ****     while(1) {};
 1394              		.loc 1 429 0
 1395 04fa 6748     		ldr	r0, .L250+80
 1396 04fc FFF7FEFF 		bl	myprintf
 1397              	.LVL168:
 1398              	.L135:
 1399 0500 FEE7     		b	.L135
 1400              	.L130:
 427:Core/Src/main.c ****   } else {
 1401              		.loc 1 427 0
 1402 0502 5148     		ldr	r0, .L250
 1403 0504 FFF7FEFF 		bl	myprintf
 1404              	.LVL169:
 433:Core/Src/main.c ****   if ( ICM_20948_execute_w( &myICM, AGB0_REG_SINGLE_FIFO_PRIORITY_SEL, &fifoPrio, 1) == ICM_20948_S
 1405              		.loc 1 433 0
 1406 0508 1EAA     		add	r2, sp, #120
 1407 050a E423     		movs	r3, #228
 1408 050c 02F80E3D 		strb	r3, [r2, #-14]!
 434:Core/Src/main.c ****     myprintf("- FIFO Priority Select - PASS\r\n");
 1409              		.loc 1 434 0
 1410 0510 0123     		movs	r3, #1
 1411 0512 2621     		movs	r1, #38
 1412 0514 4D48     		ldr	r0, .L250+4
 1413 0516 FFF7FEFF 		bl	ICM_20948_execute_w
 1414              	.LVL170:
 1415 051a 18B1     		cbz	r0, .L133
 437:Core/Src/main.c ****     while(1) {};
 1416              		.loc 1 437 0
 1417 051c 6148     		ldr	r0, .L250+92
 1418 051e FFF7FEFF 		bl	myprintf
 1419              	.LVL171:
 1420              	.L138:
 1421 0522 FEE7     		b	.L138
 1422              	.L133:
 435:Core/Src/main.c ****   } else {
 1423              		.loc 1 435 0
ARM GAS  /tmp/ccW2zlda.s 			page 48


 1424 0524 6048     		ldr	r0, .L250+96
 1425 0526 FFF7FEFF 		bl	myprintf
 1426              	.LVL172:
 441:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACC_SCALE, 4, accScale) == ICM_20948_Stat_Ok) {
 1427              		.loc 1 441 0
 1428 052a 0422     		movs	r2, #4
 1429 052c 8DF86420 		strb	r2, [sp, #100]
 1430 0530 0023     		movs	r3, #0
 1431 0532 8DF86530 		strb	r3, [sp, #101]
 1432 0536 8DF86630 		strb	r3, [sp, #102]
 1433 053a 8DF86730 		strb	r3, [sp, #103]
 442:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 1 Select - PASS\r\n");
 1434              		.loc 1 442 0
 1435 053e 19AB     		add	r3, sp, #100
 1436 0540 4FF4F071 		mov	r1, #480
 1437 0544 4148     		ldr	r0, .L250+4
 1438 0546 FFF7FEFF 		bl	inv_icm20948_write_mems
 1439              	.LVL173:
 1440 054a 18B1     		cbz	r0, .L136
 445:Core/Src/main.c ****     while(1) {};
 1441              		.loc 1 445 0
 1442 054c 5748     		ldr	r0, .L250+100
 1443 054e FFF7FEFF 		bl	myprintf
 1444              	.LVL174:
 1445              	.L141:
 1446 0552 FEE7     		b	.L141
 1447              	.L136:
 443:Core/Src/main.c ****   } else {
 1448              		.loc 1 443 0
 1449 0554 5648     		ldr	r0, .L250+104
 1450 0556 FFF7FEFF 		bl	myprintf
 1451              	.LVL175:
 448:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACC_SCALE2, 4, accScale2) == ICM_20948_Stat_Ok) {
 1452              		.loc 1 448 0
 1453 055a 0023     		movs	r3, #0
 1454 055c 8DF86030 		strb	r3, [sp, #96]
 1455 0560 0422     		movs	r2, #4
 1456 0562 8DF86120 		strb	r2, [sp, #97]
 1457 0566 8DF86230 		strb	r3, [sp, #98]
 1458 056a 8DF86330 		strb	r3, [sp, #99]
 449:Core/Src/main.c ****     myprintf("- DMP Accelerometer Scale 2 Select - PASS\r\n");
 1459              		.loc 1 449 0
 1460 056e 18AB     		add	r3, sp, #96
 1461 0570 40F2F441 		movw	r1, #1268
 1462 0574 3548     		ldr	r0, .L250+4
 1463 0576 FFF7FEFF 		bl	inv_icm20948_write_mems
 1464              	.LVL176:
 1465 057a 18B1     		cbz	r0, .L139
 452:Core/Src/main.c ****     while(1) {};
 1466              		.loc 1 452 0
 1467 057c 4D48     		ldr	r0, .L250+108
 1468 057e FFF7FEFF 		bl	myprintf
 1469              	.LVL177:
 1470              	.L144:
 1471 0582 FEE7     		b	.L144
 1472              	.L139:
 450:Core/Src/main.c ****   } else {
ARM GAS  /tmp/ccW2zlda.s 			page 49


 1473              		.loc 1 450 0
 1474 0584 4C48     		ldr	r0, .L250+112
 1475 0586 FFF7FEFF 		bl	myprintf
 1476              	.LVL178:
 456:Core/Src/main.c ****   const unsigned char mountMultiplierPlus[4] = {0x09, 0x99, 0x99, 0x99}; // Value taken from InvenS
 1477              		.loc 1 456 0
 1478 058a 0023     		movs	r3, #0
 1479 058c 1793     		str	r3, [sp, #92]
 457:Core/Src/main.c ****   const unsigned char mountMultiplierMinus[4] = {0xF6, 0x66, 0x66, 0x67}; // Value taken from Inven
 1480              		.loc 1 457 0
 1481 058e 4B4B     		ldr	r3, .L250+116
 1482 0590 1A68     		ldr	r2, [r3]
 1483 0592 1692     		str	r2, [sp, #88]
 458:Core/Src/main.c ****   uint8_t cpass_mtx_stat = 1;
 1484              		.loc 1 458 0
 1485 0594 5B68     		ldr	r3, [r3, #4]
 1486 0596 1593     		str	r3, [sp, #84]
 1487              	.LVL179:
 460:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_01, 4, &mountMultiplierZero[0]) ==
 1488              		.loc 1 460 0
 1489 0598 2C4D     		ldr	r5, .L250+4
 1490 059a 16AB     		add	r3, sp, #88
 1491 059c 0422     		movs	r2, #4
 1492 059e 4FF4B871 		mov	r1, #368
 1493 05a2 2846     		mov	r0, r5
 1494 05a4 FFF7FEFF 		bl	inv_icm20948_write_mems
 1495              	.LVL180:
 1496 05a8 0446     		mov	r4, r0
 1497              	.LVL181:
 461:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_02, 4, &mountMultiplierZero[0]) ==
 1498              		.loc 1 461 0
 1499 05aa 17AB     		add	r3, sp, #92
 1500 05ac 0422     		movs	r2, #4
 1501 05ae 4FF4BA71 		mov	r1, #372
 1502 05b2 2846     		mov	r0, r5
 1503 05b4 FFF7FEFF 		bl	inv_icm20948_write_mems
 1504              	.LVL182:
 1505 05b8 0443     		orrs	r4, r4, r0
 1506              	.LVL183:
 1507 05ba E4B2     		uxtb	r4, r4
 1508              	.LVL184:
 462:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_10, 4, &mountMultiplierZero[0]) ==
 1509              		.loc 1 462 0
 1510 05bc 17AB     		add	r3, sp, #92
 1511 05be 0422     		movs	r2, #4
 1512 05c0 4FF4BC71 		mov	r1, #376
 1513 05c4 2846     		mov	r0, r5
 1514 05c6 FFF7FEFF 		bl	inv_icm20948_write_mems
 1515              	.LVL185:
 1516 05ca 0443     		orrs	r4, r4, r0
 1517              	.LVL186:
 1518 05cc E4B2     		uxtb	r4, r4
 1519              	.LVL187:
 463:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_11, 4, &mountMultiplierMinus[0]) =
 1520              		.loc 1 463 0
 1521 05ce 17AB     		add	r3, sp, #92
 1522 05d0 0422     		movs	r2, #4
ARM GAS  /tmp/ccW2zlda.s 			page 50


 1523 05d2 4FF4BE71 		mov	r1, #380
 1524 05d6 2846     		mov	r0, r5
 1525 05d8 FFF7FEFF 		bl	inv_icm20948_write_mems
 1526              	.LVL188:
 1527 05dc 0443     		orrs	r4, r4, r0
 1528              	.LVL189:
 1529 05de E4B2     		uxtb	r4, r4
 1530              	.LVL190:
 464:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_12, 4, &mountMultiplierZero[0]) ==
 1531              		.loc 1 464 0
 1532 05e0 15AB     		add	r3, sp, #84
 1533 05e2 0422     		movs	r2, #4
 1534 05e4 4FF4C071 		mov	r1, #384
 1535 05e8 2846     		mov	r0, r5
 1536 05ea FFF7FEFF 		bl	inv_icm20948_write_mems
 1537              	.LVL191:
 1538 05ee 0443     		orrs	r4, r4, r0
 1539              	.LVL192:
 1540 05f0 E4B2     		uxtb	r4, r4
 1541              	.LVL193:
 465:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_20, 4, &mountMultiplierZero[0]) ==
 1542              		.loc 1 465 0
 1543 05f2 17AB     		add	r3, sp, #92
 1544 05f4 0422     		movs	r2, #4
 1545 05f6 4FF4C271 		mov	r1, #388
 1546 05fa 2846     		mov	r0, r5
 1547 05fc FFF7FEFF 		bl	inv_icm20948_write_mems
 1548              	.LVL194:
 1549 0600 0443     		orrs	r4, r4, r0
 1550              	.LVL195:
 1551 0602 E4B2     		uxtb	r4, r4
 1552              	.LVL196:
 466:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_21, 4, &mountMultiplierZero[0]) ==
 1553              		.loc 1 466 0
 1554 0604 17AB     		add	r3, sp, #92
 1555 0606 0422     		movs	r2, #4
 1556 0608 4FF4C471 		mov	r1, #392
 1557 060c 2846     		mov	r0, r5
 1558 060e FFF7FEFF 		bl	inv_icm20948_write_mems
 1559              	.LVL197:
 1560 0612 0443     		orrs	r4, r4, r0
 1561              	.LVL198:
 1562 0614 E4B2     		uxtb	r4, r4
 1563              	.LVL199:
 467:Core/Src/main.c ****   cpass_mtx_stat &= ( inv_icm20948_write_mems( &myICM, CPASS_MTX_22, 4, &mountMultiplierMinus[0]) =
 1564              		.loc 1 467 0
 1565 0616 17AB     		add	r3, sp, #92
 1566 0618 0422     		movs	r2, #4
 1567 061a 4FF4C671 		mov	r1, #396
 1568 061e 2846     		mov	r0, r5
 1569 0620 FFF7FEFF 		bl	inv_icm20948_write_mems
 1570              	.LVL200:
 1571 0624 0443     		orrs	r4, r4, r0
 1572              	.LVL201:
 1573 0626 E4B2     		uxtb	r4, r4
 1574              	.LVL202:
 468:Core/Src/main.c **** 
ARM GAS  /tmp/ccW2zlda.s 			page 51


 1575              		.loc 1 468 0
 1576 0628 15AB     		add	r3, sp, #84
 1577 062a 0422     		movs	r2, #4
 1578 062c 4FF4C871 		mov	r1, #400
 1579 0630 2846     		mov	r0, r5
 1580 0632 FFF7FEFF 		bl	inv_icm20948_write_mems
 1581              	.LVL203:
 470:Core/Src/main.c ****     myprintf("- DMP Compass Mount Matrix Set - PASS\r\n");
 1582              		.loc 1 470 0
 1583 0636 2043     		orrs	r0, r0, r4
 1584              	.LVL204:
 1585 0638 10F0FF0F 		tst	r0, #255
 1586 063c 42D0     		beq	.L142
 473:Core/Src/main.c ****     while(1) {};
 1587              		.loc 1 473 0
 1588 063e 2048     		ldr	r0, .L250+120
 1589 0640 FFF7FEFF 		bl	myprintf
 1590              	.LVL205:
 1591              	.L147:
 1592 0644 FEE7     		b	.L147
 1593              	.L251:
 1594 0646 00BF     		.align	2
 1595              	.L250:
 1596 0648 A0020000 		.word	.LC27
 1597 064c 00000000 		.word	myICM
 1598 0650 20040000 		.word	.LC40
 1599 0654 00040000 		.word	.LC39
 1600 0658 60040000 		.word	.LC42
 1601 065c 40040000 		.word	.LC41
 1602 0660 AC040000 		.word	.LC44
 1603 0664 80040000 		.word	.LC43
 1604 0668 04050000 		.word	.LC46
 1605 066c D8040000 		.word	.LC45
 1606 0670 48050000 		.word	.LC48
 1607 0674 30050000 		.word	.LC47
 1608 0678 80050000 		.word	.LC50
 1609 067c 60050000 		.word	.LC49
 1610 0680 C4050000 		.word	.LC52
 1611 0684 A0050000 		.word	.LC51
 1612 0688 08060000 		.word	.LC54
 1613 068c E8050000 		.word	.LC53
 1614 0690 50060000 		.word	.LC56
 1615 0694 28060000 		.word	.LC55
 1616 0698 B8020000 		.word	.LC28
 1617 069c 90060000 		.word	.LC58
 1618 06a0 78060000 		.word	.LC57
 1619 06a4 C8060000 		.word	.LC60
 1620 06a8 A8060000 		.word	.LC59
 1621 06ac 14070000 		.word	.LC62
 1622 06b0 E8060000 		.word	.LC61
 1623 06b4 6C070000 		.word	.LC64
 1624 06b8 40070000 		.word	.LC63
 1625 06bc 00000000 		.word	.LANCHOR4
 1626 06c0 C0070000 		.word	.LC66
 1627              	.L142:
 471:Core/Src/main.c ****   } else {
 1628              		.loc 1 471 0
ARM GAS  /tmp/ccW2zlda.s 			page 52


 1629 06c4 A748     		ldr	r0, .L252
 1630 06c6 FFF7FEFF 		bl	myprintf
 1631              	.LVL206:
 477:Core/Src/main.c ****   const unsigned char b2sMountMultiplierPlus[4] = {0x40, 0x00, 0x00, 0x00}; // Value taken from Inv
 1632              		.loc 1 477 0
 1633 06ca 0023     		movs	r3, #0
 1634 06cc 1493     		str	r3, [sp, #80]
 478:Core/Src/main.c ****   uint8_t b2s_mtx_stat = 1;
 1635              		.loc 1 478 0
 1636 06ce 4022     		movs	r2, #64
 1637 06d0 8DF84C20 		strb	r2, [sp, #76]
 1638 06d4 8DF84D30 		strb	r3, [sp, #77]
 1639 06d8 8DF84E30 		strb	r3, [sp, #78]
 1640 06dc 8DF84F30 		strb	r3, [sp, #79]
 1641              	.LVL207:
 480:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_01, 4, &b2sMountMultiplierZero[0]) == 
 1642              		.loc 1 480 0
 1643 06e0 A14D     		ldr	r5, .L252+4
 1644 06e2 13AB     		add	r3, sp, #76
 1645 06e4 0422     		movs	r2, #4
 1646 06e6 4FF45061 		mov	r1, #3328
 1647 06ea 2846     		mov	r0, r5
 1648 06ec FFF7FEFF 		bl	inv_icm20948_write_mems
 1649              	.LVL208:
 1650 06f0 0446     		mov	r4, r0
 1651              	.LVL209:
 481:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_02, 4, &b2sMountMultiplierZero[0]) == 
 1652              		.loc 1 481 0
 1653 06f2 14AB     		add	r3, sp, #80
 1654 06f4 0422     		movs	r2, #4
 1655 06f6 40F60451 		movw	r1, #3332
 1656 06fa 2846     		mov	r0, r5
 1657 06fc FFF7FEFF 		bl	inv_icm20948_write_mems
 1658              	.LVL210:
 1659 0700 0443     		orrs	r4, r4, r0
 1660              	.LVL211:
 1661 0702 E4B2     		uxtb	r4, r4
 1662              	.LVL212:
 482:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_10, 4, &b2sMountMultiplierZero[0]) == 
 1663              		.loc 1 482 0
 1664 0704 14AB     		add	r3, sp, #80
 1665 0706 0422     		movs	r2, #4
 1666 0708 40F60851 		movw	r1, #3336
 1667 070c 2846     		mov	r0, r5
 1668 070e FFF7FEFF 		bl	inv_icm20948_write_mems
 1669              	.LVL213:
 1670 0712 0443     		orrs	r4, r4, r0
 1671              	.LVL214:
 1672 0714 E4B2     		uxtb	r4, r4
 1673              	.LVL215:
 483:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_11, 4, &b2sMountMultiplierPlus[0]) == 
 1674              		.loc 1 483 0
 1675 0716 14AB     		add	r3, sp, #80
 1676 0718 0422     		movs	r2, #4
 1677 071a 40F60C51 		movw	r1, #3340
 1678 071e 2846     		mov	r0, r5
 1679 0720 FFF7FEFF 		bl	inv_icm20948_write_mems
ARM GAS  /tmp/ccW2zlda.s 			page 53


 1680              	.LVL216:
 1681 0724 0443     		orrs	r4, r4, r0
 1682              	.LVL217:
 1683 0726 E4B2     		uxtb	r4, r4
 1684              	.LVL218:
 484:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_12, 4, &b2sMountMultiplierZero[0]) == 
 1685              		.loc 1 484 0
 1686 0728 13AB     		add	r3, sp, #76
 1687 072a 0422     		movs	r2, #4
 1688 072c 4FF45161 		mov	r1, #3344
 1689 0730 2846     		mov	r0, r5
 1690 0732 FFF7FEFF 		bl	inv_icm20948_write_mems
 1691              	.LVL219:
 1692 0736 0443     		orrs	r4, r4, r0
 1693              	.LVL220:
 1694 0738 E4B2     		uxtb	r4, r4
 1695              	.LVL221:
 485:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_20, 4, &b2sMountMultiplierZero[0]) == 
 1696              		.loc 1 485 0
 1697 073a 14AB     		add	r3, sp, #80
 1698 073c 0422     		movs	r2, #4
 1699 073e 40F61451 		movw	r1, #3348
 1700 0742 2846     		mov	r0, r5
 1701 0744 FFF7FEFF 		bl	inv_icm20948_write_mems
 1702              	.LVL222:
 1703 0748 0443     		orrs	r4, r4, r0
 1704              	.LVL223:
 1705 074a E4B2     		uxtb	r4, r4
 1706              	.LVL224:
 486:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_21, 4, &b2sMountMultiplierZero[0]) == 
 1707              		.loc 1 486 0
 1708 074c 14AB     		add	r3, sp, #80
 1709 074e 0422     		movs	r2, #4
 1710 0750 40F61851 		movw	r1, #3352
 1711 0754 2846     		mov	r0, r5
 1712 0756 FFF7FEFF 		bl	inv_icm20948_write_mems
 1713              	.LVL225:
 1714 075a 0443     		orrs	r4, r4, r0
 1715              	.LVL226:
 1716 075c E4B2     		uxtb	r4, r4
 1717              	.LVL227:
 487:Core/Src/main.c ****   b2s_mtx_stat &= ( inv_icm20948_write_mems( &myICM, B2S_MTX_22, 4, &b2sMountMultiplierPlus[0]) == 
 1718              		.loc 1 487 0
 1719 075e 14AB     		add	r3, sp, #80
 1720 0760 0422     		movs	r2, #4
 1721 0762 40F61C51 		movw	r1, #3356
 1722 0766 2846     		mov	r0, r5
 1723 0768 FFF7FEFF 		bl	inv_icm20948_write_mems
 1724              	.LVL228:
 1725 076c 0443     		orrs	r4, r4, r0
 1726              	.LVL229:
 1727 076e E4B2     		uxtb	r4, r4
 1728              	.LVL230:
 488:Core/Src/main.c **** 
 1729              		.loc 1 488 0
 1730 0770 13AB     		add	r3, sp, #76
 1731 0772 0422     		movs	r2, #4
ARM GAS  /tmp/ccW2zlda.s 			page 54


 1732 0774 4FF45261 		mov	r1, #3360
 1733 0778 2846     		mov	r0, r5
 1734 077a FFF7FEFF 		bl	inv_icm20948_write_mems
 1735              	.LVL231:
 490:Core/Src/main.c ****     myprintf("- B2S Mount Matrix Set - PASS\r\n");
 1736              		.loc 1 490 0
 1737 077e 2043     		orrs	r0, r0, r4
 1738              	.LVL232:
 1739 0780 10F0FF0F 		tst	r0, #255
 1740 0784 03D0     		beq	.L145
 493:Core/Src/main.c ****     while(1) {};
 1741              		.loc 1 493 0
 1742 0786 7948     		ldr	r0, .L252+8
 1743 0788 FFF7FEFF 		bl	myprintf
 1744              	.LVL233:
 1745              	.L150:
 1746 078c FEE7     		b	.L150
 1747              	.L145:
 491:Core/Src/main.c ****   } else {
 1748              		.loc 1 491 0
 1749 078e 7848     		ldr	r0, .L252+12
 1750 0790 FFF7FEFF 		bl	myprintf
 1751              	.LVL234:
 497:Core/Src/main.c ****     myprintf("- DMP Gyroscope Sample Rate Select - PASS\r\n");
 1752              		.loc 1 497 0
 1753 0794 0322     		movs	r2, #3
 1754 0796 1321     		movs	r1, #19
 1755 0798 7348     		ldr	r0, .L252+4
 1756 079a FFF7FEFF 		bl	inv_icm20948_set_gyro_sf
 1757              	.LVL235:
 1758 079e 18B1     		cbz	r0, .L148
 500:Core/Src/main.c ****     while(1) {};
 1759              		.loc 1 500 0
 1760 07a0 7448     		ldr	r0, .L252+16
 1761 07a2 FFF7FEFF 		bl	myprintf
 1762              	.LVL236:
 1763              	.L153:
 1764 07a6 FEE7     		b	.L153
 1765              	.L148:
 498:Core/Src/main.c ****   } else {
 1766              		.loc 1 498 0
 1767 07a8 7348     		ldr	r0, .L252+20
 1768 07aa FFF7FEFF 		bl	myprintf
 1769              	.LVL237:
 504:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, GYRO_FULLSCALE, 4, gyroFullScale) == ICM_20948_Stat_Ok) {
 1770              		.loc 1 504 0
 1771 07ae 1023     		movs	r3, #16
 1772 07b0 8DF84830 		strb	r3, [sp, #72]
 1773 07b4 0023     		movs	r3, #0
 1774 07b6 8DF84930 		strb	r3, [sp, #73]
 1775 07ba 8DF84A30 		strb	r3, [sp, #74]
 1776 07be 8DF84B30 		strb	r3, [sp, #75]
 505:Core/Src/main.c ****     myprintf("- DMP Gyroscope Full Scale Select - PASS\r\n");
 1777              		.loc 1 505 0
 1778 07c2 12AB     		add	r3, sp, #72
 1779 07c4 0422     		movs	r2, #4
 1780 07c6 40F28C41 		movw	r1, #1164
ARM GAS  /tmp/ccW2zlda.s 			page 55


 1781 07ca 6748     		ldr	r0, .L252+4
 1782 07cc FFF7FEFF 		bl	inv_icm20948_write_mems
 1783              	.LVL238:
 1784 07d0 18B1     		cbz	r0, .L151
 508:Core/Src/main.c ****     while(1) {};
 1785              		.loc 1 508 0
 1786 07d2 6A48     		ldr	r0, .L252+24
 1787 07d4 FFF7FEFF 		bl	myprintf
 1788              	.LVL239:
 1789              	.L156:
 1790 07d8 FEE7     		b	.L156
 1791              	.L151:
 506:Core/Src/main.c ****   } else {
 1792              		.loc 1 506 0
 1793 07da 6948     		ldr	r0, .L252+28
 1794 07dc FFF7FEFF 		bl	myprintf
 1795              	.LVL240:
 512:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_ONLY_GAIN, 4, accelOnlyGain) == ICM_20948_Stat_Ok) {
 1796              		.loc 1 512 0
 1797 07e0 684B     		ldr	r3, .L252+32
 1798 07e2 9A68     		ldr	r2, [r3, #8]
 1799 07e4 1EAB     		add	r3, sp, #120
 1800 07e6 43F8342D 		str	r2, [r3, #-52]!
 513:Core/Src/main.c ****     myprintf("- DMP Accelerometer Gain Select - PASS\r\n");
 1801              		.loc 1 513 0
 1802 07ea 0422     		movs	r2, #4
 1803 07ec 4FF48671 		mov	r1, #268
 1804 07f0 5D48     		ldr	r0, .L252+4
 1805 07f2 FFF7FEFF 		bl	inv_icm20948_write_mems
 1806              	.LVL241:
 1807 07f6 18B1     		cbz	r0, .L154
 516:Core/Src/main.c ****     while(1) {};
 1808              		.loc 1 516 0
 1809 07f8 6348     		ldr	r0, .L252+36
 1810 07fa FFF7FEFF 		bl	myprintf
 1811              	.LVL242:
 1812              	.L159:
 1813 07fe FEE7     		b	.L159
 1814              	.L154:
 514:Core/Src/main.c ****   } else {
 1815              		.loc 1 514 0
 1816 0800 6248     		ldr	r0, .L252+40
 1817 0802 FFF7FEFF 		bl	myprintf
 1818              	.LVL243:
 520:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_ALPHA_VAR, 4, accelAlphaVar) == ICM_20948_Stat_Ok) {
 1819              		.loc 1 520 0
 1820 0806 5F4B     		ldr	r3, .L252+32
 1821 0808 DA68     		ldr	r2, [r3, #12]
 1822 080a 1EAB     		add	r3, sp, #120
 1823 080c 43F8382D 		str	r2, [r3, #-56]!
 521:Core/Src/main.c ****     myprintf("- DMP Accelerometer Alpha Select - PASS\r\n");
 1824              		.loc 1 521 0
 1825 0810 0422     		movs	r2, #4
 1826 0812 4FF4B661 		mov	r1, #1456
 1827 0816 5448     		ldr	r0, .L252+4
 1828 0818 FFF7FEFF 		bl	inv_icm20948_write_mems
 1829              	.LVL244:
ARM GAS  /tmp/ccW2zlda.s 			page 56


 1830 081c 18B1     		cbz	r0, .L157
 524:Core/Src/main.c ****     while(1) {};
 1831              		.loc 1 524 0
 1832 081e 5C48     		ldr	r0, .L252+44
 1833 0820 FFF7FEFF 		bl	myprintf
 1834              	.LVL245:
 1835              	.L162:
 1836 0824 FEE7     		b	.L162
 1837              	.L157:
 522:Core/Src/main.c ****   } else {
 1838              		.loc 1 522 0
 1839 0826 5B48     		ldr	r0, .L252+48
 1840 0828 FFF7FEFF 		bl	myprintf
 1841              	.LVL246:
 528:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_A_VAR, 4, accelAVar) == ICM_20948_Stat_Ok) {
 1842              		.loc 1 528 0
 1843 082c 554B     		ldr	r3, .L252+32
 1844 082e 1A69     		ldr	r2, [r3, #16]
 1845 0830 1EAB     		add	r3, sp, #120
 1846 0832 43F83C2D 		str	r2, [r3, #-60]!
 529:Core/Src/main.c ****     myprintf("- DMP Accelerometer A Var Select - PASS\r\n");
 1847              		.loc 1 529 0
 1848 0836 0422     		movs	r2, #4
 1849 0838 4FF4B861 		mov	r1, #1472
 1850 083c 4A48     		ldr	r0, .L252+4
 1851 083e FFF7FEFF 		bl	inv_icm20948_write_mems
 1852              	.LVL247:
 1853 0842 18B1     		cbz	r0, .L160
 532:Core/Src/main.c ****     while(1) {};
 1854              		.loc 1 532 0
 1855 0844 5448     		ldr	r0, .L252+52
 1856 0846 FFF7FEFF 		bl	myprintf
 1857              	.LVL248:
 1858              	.L165:
 1859 084a FEE7     		b	.L165
 1860              	.L160:
 530:Core/Src/main.c ****   } else {
 1861              		.loc 1 530 0
 1862 084c 5348     		ldr	r0, .L252+56
 1863 084e FFF7FEFF 		bl	myprintf
 1864              	.LVL249:
 536:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, ACCEL_CAL_RATE, 2, accelCalRate) == ICM_20948_Stat_Ok) {
 1865              		.loc 1 536 0
 1866 0852 1EAB     		add	r3, sp, #120
 1867 0854 0022     		movs	r2, #0
 1868 0856 43F8402D 		str	r2, [r3, #-64]!
 537:Core/Src/main.c ****     myprintf("- DMP Accelerometer Calibration Rate Select - PASS\r\n");
 1869              		.loc 1 537 0
 1870 085a 0222     		movs	r2, #2
 1871 085c 40F2E451 		movw	r1, #1508
 1872 0860 4148     		ldr	r0, .L252+4
 1873 0862 FFF7FEFF 		bl	inv_icm20948_write_mems
 1874              	.LVL250:
 1875 0866 18B1     		cbz	r0, .L163
 540:Core/Src/main.c ****     while(1) {};
 1876              		.loc 1 540 0
 1877 0868 4D48     		ldr	r0, .L252+60
ARM GAS  /tmp/ccW2zlda.s 			page 57


 1878 086a FFF7FEFF 		bl	myprintf
 1879              	.LVL251:
 1880              	.L168:
 1881 086e FEE7     		b	.L168
 1882              	.L163:
 538:Core/Src/main.c ****   } else {
 1883              		.loc 1 538 0
 1884 0870 4C48     		ldr	r0, .L252+64
 1885 0872 FFF7FEFF 		bl	myprintf
 1886              	.LVL252:
 544:Core/Src/main.c ****   if ( inv_icm20948_write_mems( &myICM, CPASS_TIME_BUFFER, 2, compassRate) == ICM_20948_Stat_Ok) {
 1887              		.loc 1 544 0
 1888 0876 0023     		movs	r3, #0
 1889 0878 8DF83430 		strb	r3, [sp, #52]
 1890 087c 6423     		movs	r3, #100
 1891 087e 8DF83530 		strb	r3, [sp, #53]
 545:Core/Src/main.c ****     myprintf("- DMP Compass Sample Rate Select - PASS\r\n");
 1892              		.loc 1 545 0
 1893 0882 0DAB     		add	r3, sp, #52
 1894 0884 0222     		movs	r2, #2
 1895 0886 40F20E71 		movw	r1, #1806
 1896 088a 3748     		ldr	r0, .L252+4
 1897 088c FFF7FEFF 		bl	inv_icm20948_write_mems
 1898              	.LVL253:
 1899 0890 18B1     		cbz	r0, .L166
 548:Core/Src/main.c ****     while(1) {};
 1900              		.loc 1 548 0
 1901 0892 4548     		ldr	r0, .L252+68
 1902 0894 FFF7FEFF 		bl	myprintf
 1903              	.LVL254:
 1904              	.L171:
 1905 0898 FEE7     		b	.L171
 1906              	.L166:
 546:Core/Src/main.c ****   } else {
 1907              		.loc 1 546 0
 1908 089a 4448     		ldr	r0, .L252+72
 1909 089c FFF7FEFF 		bl	myprintf
 1910              	.LVL255:
 552:Core/Src/main.c ****     myprintf("- DMP Enable Orientation - PASS\r\n");
 1911              		.loc 1 552 0
 1912 08a0 0122     		movs	r2, #1
 1913 08a2 1221     		movs	r1, #18
 1914 08a4 3048     		ldr	r0, .L252+4
 1915 08a6 FFF7FEFF 		bl	inv_icm20948_enable_dmp_sensor
 1916              	.LVL256:
 1917 08aa 18B1     		cbz	r0, .L169
 555:Core/Src/main.c ****     while(1) {};
 1918              		.loc 1 555 0
 1919 08ac 4048     		ldr	r0, .L252+76
 1920 08ae FFF7FEFF 		bl	myprintf
 1921              	.LVL257:
 1922              	.L174:
 1923 08b2 FEE7     		b	.L174
 1924              	.L169:
 553:Core/Src/main.c ****   } else {
 1925              		.loc 1 553 0
 1926 08b4 3F48     		ldr	r0, .L252+80
ARM GAS  /tmp/ccW2zlda.s 			page 58


 1927 08b6 FFF7FEFF 		bl	myprintf
 1928              	.LVL258:
 558:Core/Src/main.c ****     myprintf("- DMP Set Sensor Period - PASS\r\n");
 1929              		.loc 1 558 0
 1930 08ba 0022     		movs	r2, #0
 1931 08bc A821     		movs	r1, #168
 1932 08be 2A48     		ldr	r0, .L252+4
 1933 08c0 FFF7FEFF 		bl	inv_icm20948_set_dmp_sensor_period
 1934              	.LVL259:
 1935 08c4 18B1     		cbz	r0, .L172
 561:Core/Src/main.c ****     while(1) {};
 1936              		.loc 1 561 0
 1937 08c6 3C48     		ldr	r0, .L252+84
 1938 08c8 FFF7FEFF 		bl	myprintf
 1939              	.LVL260:
 1940              	.L177:
 1941 08cc FEE7     		b	.L177
 1942              	.L172:
 559:Core/Src/main.c ****   } else {
 1943              		.loc 1 559 0
 1944 08ce 3B48     		ldr	r0, .L252+88
 1945 08d0 FFF7FEFF 		bl	myprintf
 1946              	.LVL261:
 564:Core/Src/main.c ****     myprintf("- Enable FIFO - PASS\r\n");
 1947              		.loc 1 564 0
 1948 08d4 0121     		movs	r1, #1
 1949 08d6 2448     		ldr	r0, .L252+4
 1950 08d8 FFF7FEFF 		bl	ICM_20948_enable_FIFO
 1951              	.LVL262:
 1952 08dc 18B1     		cbz	r0, .L175
 567:Core/Src/main.c ****     while(1) {};
 1953              		.loc 1 567 0
 1954 08de 3848     		ldr	r0, .L252+92
 1955 08e0 FFF7FEFF 		bl	myprintf
 1956              	.LVL263:
 1957              	.L180:
 1958 08e4 FEE7     		b	.L180
 1959              	.L175:
 565:Core/Src/main.c ****   } else {
 1960              		.loc 1 565 0
 1961 08e6 3748     		ldr	r0, .L252+96
 1962 08e8 FFF7FEFF 		bl	myprintf
 1963              	.LVL264:
 570:Core/Src/main.c ****     myprintf("- Enable DMP - PASS\r\n");
 1964              		.loc 1 570 0
 1965 08ec 0121     		movs	r1, #1
 1966 08ee 1E48     		ldr	r0, .L252+4
 1967 08f0 FFF7FEFF 		bl	ICM_20948_enable_DMP
 1968              	.LVL265:
 1969 08f4 18B1     		cbz	r0, .L178
 573:Core/Src/main.c ****     while(1) {};
 1970              		.loc 1 573 0
 1971 08f6 3448     		ldr	r0, .L252+100
 1972 08f8 FFF7FEFF 		bl	myprintf
 1973              	.LVL266:
 1974              	.L183:
 1975 08fc FEE7     		b	.L183
ARM GAS  /tmp/ccW2zlda.s 			page 59


 1976              	.L178:
 571:Core/Src/main.c ****   } else {
 1977              		.loc 1 571 0
 1978 08fe 3348     		ldr	r0, .L252+104
 1979 0900 FFF7FEFF 		bl	myprintf
 1980              	.LVL267:
 576:Core/Src/main.c ****     myprintf("- Reset DMP - PASS\r\n");
 1981              		.loc 1 576 0
 1982 0904 1848     		ldr	r0, .L252+4
 1983 0906 FFF7FEFF 		bl	ICM_20948_reset_DMP
 1984              	.LVL268:
 1985 090a 18B1     		cbz	r0, .L181
 579:Core/Src/main.c ****     while(1) {};
 1986              		.loc 1 579 0
 1987 090c 3048     		ldr	r0, .L252+108
 1988 090e FFF7FEFF 		bl	myprintf
 1989              	.LVL269:
 1990              	.L186:
 1991 0912 FEE7     		b	.L186
 1992              	.L181:
 577:Core/Src/main.c ****   } else {
 1993              		.loc 1 577 0
 1994 0914 2F48     		ldr	r0, .L252+112
 1995 0916 FFF7FEFF 		bl	myprintf
 1996              	.LVL270:
 582:Core/Src/main.c ****     myprintf("- Reset FIFO - PASS\r\n");
 1997              		.loc 1 582 0
 1998 091a 1348     		ldr	r0, .L252+4
 1999 091c FFF7FEFF 		bl	ICM_20948_reset_FIFO
 2000              	.LVL271:
 2001 0920 18B1     		cbz	r0, .L184
 585:Core/Src/main.c ****     while(1) {};
 2002              		.loc 1 585 0
 2003 0922 2D48     		ldr	r0, .L252+116
 2004 0924 FFF7FEFF 		bl	myprintf
 2005              	.LVL272:
 2006              	.L189:
 2007 0928 FEE7     		b	.L189
 2008              	.L184:
 583:Core/Src/main.c ****   } else {
 2009              		.loc 1 583 0
 2010 092a 2C48     		ldr	r0, .L252+120
 2011 092c FFF7FEFF 		bl	myprintf
 2012              	.LVL273:
 589:Core/Src/main.c ****   myprintf("\r\nICM 20948 DMP Enable - PASS\r\n");
 2013              		.loc 1 589 0
 2014 0930 6420     		movs	r0, #100
 2015 0932 FFF7FEFF 		bl	HAL_Delay
 2016              	.LVL274:
 590:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 2017              		.loc 1 590 0
 2018 0936 2A48     		ldr	r0, .L252+124
 2019 0938 FFF7FEFF 		bl	myprintf
 2020              	.LVL275:
 591:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 2021              		.loc 1 591 0
 2022 093c 294C     		ldr	r4, .L252+128
ARM GAS  /tmp/ccW2zlda.s 			page 60


 2023 093e 0022     		movs	r2, #0
 2024 0940 2021     		movs	r1, #32
 2025 0942 2046     		mov	r0, r4
 2026 0944 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2027              	.LVL276:
 592:Core/Src/main.c **** 
 2028              		.loc 1 592 0
 2029 0948 0122     		movs	r2, #1
 2030 094a 1021     		movs	r1, #16
 2031 094c 2046     		mov	r0, r4
 2032 094e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2033              	.LVL277:
 596:Core/Src/main.c ****     myprintf("No response from ms5637");
 2034              		.loc 1 596 0
 2035 0952 FFF7FEFF 		bl	ms5637_is_connected
 2036              	.LVL278:
 2037 0956 0028     		cmp	r0, #0
 2038 0958 4AD1     		bne	.L187
 597:Core/Src/main.c ****     while(1) {}
 2039              		.loc 1 597 0
 2040 095a 2348     		ldr	r0, .L252+132
 2041 095c FFF7FEFF 		bl	myprintf
 2042              	.LVL279:
 2043              	.L190:
 2044 0960 FEE7     		b	.L190
 2045              	.L253:
 2046 0962 00BF     		.align	2
 2047              	.L252:
 2048 0964 98070000 		.word	.LC65
 2049 0968 00000000 		.word	myICM
 2050 096c 08080000 		.word	.LC68
 2051 0970 E8070000 		.word	.LC67
 2052 0974 54080000 		.word	.LC70
 2053 0978 28080000 		.word	.LC69
 2054 097c AC080000 		.word	.LC72
 2055 0980 80080000 		.word	.LC71
 2056 0984 00000000 		.word	.LANCHOR4
 2057 0988 04090000 		.word	.LC74
 2058 098c D8080000 		.word	.LC73
 2059 0990 5C090000 		.word	.LC76
 2060 0994 30090000 		.word	.LC75
 2061 0998 B4090000 		.word	.LC78
 2062 099c 88090000 		.word	.LC77
 2063 09a0 180A0000 		.word	.LC80
 2064 09a4 E0090000 		.word	.LC79
 2065 09a8 7C0A0000 		.word	.LC82
 2066 09ac 500A0000 		.word	.LC81
 2067 09b0 CC0A0000 		.word	.LC84
 2068 09b4 A80A0000 		.word	.LC83
 2069 09b8 140B0000 		.word	.LC86
 2070 09bc F00A0000 		.word	.LC85
 2071 09c0 500B0000 		.word	.LC88
 2072 09c4 380B0000 		.word	.LC87
 2073 09c8 800B0000 		.word	.LC90
 2074 09cc 680B0000 		.word	.LC89
 2075 09d0 B00B0000 		.word	.LC92
 2076 09d4 980B0000 		.word	.LC91
ARM GAS  /tmp/ccW2zlda.s 			page 61


 2077 09d8 E80B0000 		.word	.LC94
 2078 09dc 30050000 		.word	.LC47
 2079 09e0 C80B0000 		.word	.LC93
 2080 09e4 00080048 		.word	1207961600
 2081 09e8 000C0000 		.word	.LC95
 2082 09ec 00000000 		.word	0
 2083              	.L187:
 600:Core/Src/main.c ****   float temperature = 0;
 2084              		.loc 1 600 0
 2085 09f0 FFF7FEFF 		bl	ms5637_reset
 2086              	.LVL280:
 601:Core/Src/main.c ****   float pressure = 0;
 2087              		.loc 1 601 0
 2088 09f4 1FED038A 		vldr.32	s16, .L252+136
 2089 09f8 8DED0C8A 		vstr.32	s16, [sp, #48]
 602:Core/Src/main.c ****   float altitude = 0;
 2090              		.loc 1 602 0
 2091 09fc 8DED0B8A 		vstr.32	s16, [sp, #44]
 2092              	.LVL281:
 611:Core/Src/main.c ****   char buf[16] = {};
 2093              		.loc 1 611 0
 2094 0a00 FFF7FEFF 		bl	ssd1306_Init
 2095              	.LVL282:
 612:Core/Src/main.c **** 
 2096              		.loc 1 612 0
 2097 0a04 0024     		movs	r4, #0
 2098 0a06 0794     		str	r4, [sp, #28]
 2099 0a08 0894     		str	r4, [sp, #32]
 2100 0a0a 0994     		str	r4, [sp, #36]
 2101 0a0c 0A94     		str	r4, [sp, #40]
 614:Core/Src/main.c **** 
 2102              		.loc 1 614 0
 2103 0a0e 764D     		ldr	r5, .L254+24
 2104 0a10 2A68     		ldr	r2, [r5]
 2105 0a12 1368     		ldr	r3, [r2]
 2106 0a14 43F00103 		orr	r3, r3, #1
 2107 0a18 1360     		str	r3, [r2]
 616:Core/Src/main.c **** 
 2108              		.loc 1 616 0
 2109 0a1a 7448     		ldr	r0, .L254+28
 2110 0a1c FFF7FEFF 		bl	HAL_OPAMP_Start
 2111              	.LVL283:
 618:Core/Src/main.c ****   lwrb_init(&hgps_buff, hgps_buff_data, 512);
 2112              		.loc 1 618 0
 2113 0a20 7348     		ldr	r0, .L254+32
 2114 0a22 FFF7FEFF 		bl	lwgps_init
 2115              	.LVL284:
 619:Core/Src/main.c ****   
 2116              		.loc 1 619 0
 2117 0a26 4FF40072 		mov	r2, #512
 2118 0a2a 7249     		ldr	r1, .L254+36
 2119 0a2c 7248     		ldr	r0, .L254+40
 2120 0a2e FFF7FEFF 		bl	lwrb_init
 2121              	.LVL285:
 625:Core/Src/main.c **** 
 2122              		.loc 1 625 0
 2123 0a32 2A68     		ldr	r2, [r5]
ARM GAS  /tmp/ccW2zlda.s 			page 62


 2124 0a34 1368     		ldr	r3, [r2]
 2125 0a36 43F02003 		orr	r3, r3, #32
 2126 0a3a 1360     		str	r3, [r2]
 608:Core/Src/main.c ****   uint32_t avg_batv = 0;
 2127              		.loc 1 608 0
 2128 0a3c F0EE488A 		vmov.f32	s17, s16
 2129              	.LVL286:
 2130              	.L197:
 2131              	.LBB8:
 629:Core/Src/main.c **** 
 2132              		.loc 1 629 0
 2133 0a40 6E48     		ldr	r0, .L254+44
 2134 0a42 FFF7FEFF 		bl	HAL_ADC_Start
 2135              	.LVL287:
 631:Core/Src/main.c ****       myprintf("Failed to get Temperature and Pressure\r\n");
 2136              		.loc 1 631 0
 2137 0a46 0BA9     		add	r1, sp, #44
 2138 0a48 0CA8     		add	r0, sp, #48
 2139 0a4a FFF7FEFF 		bl	ms5637_read_temperature_and_pressure
 2140              	.LVL288:
 2141 0a4e 18B1     		cbz	r0, .L191
 632:Core/Src/main.c ****       while(1) {}
 2142              		.loc 1 632 0
 2143 0a50 6B48     		ldr	r0, .L254+48
 2144 0a52 FFF7FEFF 		bl	myprintf
 2145              	.LVL289:
 2146              	.L192:
 2147 0a56 FEE7     		b	.L192
 2148              	.L191:
 638:Core/Src/main.c ****     uint16_t batv = HAL_ADC_GetValue(&hadc5);
 2149              		.loc 1 638 0
 2150 0a58 684D     		ldr	r5, .L254+44
 2151 0a5a 0A21     		movs	r1, #10
 2152 0a5c 2846     		mov	r0, r5
 2153 0a5e FFF7FEFF 		bl	HAL_ADC_PollForConversion
 2154              	.LVL290:
 639:Core/Src/main.c **** 
 2155              		.loc 1 639 0
 2156 0a62 2846     		mov	r0, r5
 2157 0a64 FFF7FEFF 		bl	HAL_ADC_GetValue
 2158              	.LVL291:
 2159 0a68 0646     		mov	r6, r0
 2160              	.LVL292:
 645:Core/Src/main.c ****     avg_alt_sum += altitude;
 2161              		.loc 1 645 0
 2162 0a6a 0B98     		ldr	r0, [sp, #44]	@ float
 2163 0a6c FFF7FEFF 		bl	__aeabi_f2d
 2164              	.LVL293:
 2165 0a70 41EC100B 		vmov	d0, r0, r1
 2166 0a74 FFF7FEFF 		bl	log
 2167              	.LVL294:
 2168 0a78 55A3     		adr	r3, .L254
 2169 0a7a D3E90023 		ldrd	r2, [r3]
 2170 0a7e 51EC100B 		vmov	r0, r1, d0
 2171 0a82 FFF7FEFF 		bl	__aeabi_dsub
 2172              	.LVL295:
 2173 0a86 54A3     		adr	r3, .L254+8
ARM GAS  /tmp/ccW2zlda.s 			page 63


 2174 0a88 D3E90023 		ldrd	r2, [r3]
 2175 0a8c FFF7FEFF 		bl	__aeabi_dmul
 2176              	.LVL296:
 2177 0a90 8046     		mov	r8, r0
 2178 0a92 8946     		mov	r9, r1
 2179 0a94 0C98     		ldr	r0, [sp, #48]	@ float
 2180 0a96 FFF7FEFF 		bl	__aeabi_f2d
 2181              	.LVL297:
 2182 0a9a 51A3     		adr	r3, .L254+16
 2183 0a9c D3E90023 		ldrd	r2, [r3]
 2184 0aa0 FFF7FEFF 		bl	__aeabi_dadd
 2185              	.LVL298:
 2186 0aa4 0246     		mov	r2, r0
 2187 0aa6 0B46     		mov	r3, r1
 2188 0aa8 4046     		mov	r0, r8
 2189 0aaa 4946     		mov	r1, r9
 2190 0aac FFF7FEFF 		bl	__aeabi_dmul
 2191              	.LVL299:
 2192 0ab0 FFF7FEFF 		bl	__aeabi_d2f
 2193              	.LVL300:
 646:Core/Src/main.c ****     avg_batv_sum += batv;
 2194              		.loc 1 646 0
 2195 0ab4 07EE900A 		vmov	s15, r0
 2196 0ab8 38EE278A 		vadd.f32	s16, s16, s15
 2197              	.LVL301:
 2198 0abc B6B2     		uxth	r6, r6
 2199              	.LVL302:
 648:Core/Src/main.c ****     if(avg_count == 30) {
 2200              		.loc 1 648 0
 2201 0abe 0134     		adds	r4, r4, #1
 2202              	.LVL303:
 649:Core/Src/main.c ****       avg_alt = avg_alt_sum/avg_count;
 2203              		.loc 1 649 0
 2204 0ac0 1E2C     		cmp	r4, #30
 2205 0ac2 08D1     		bne	.L193
 650:Core/Src/main.c ****       avg_batv = avg_batv_sum/avg_count;
 2206              		.loc 1 650 0
 2207 0ac4 07EE904A 		vmov	s15, r4	@ int
 2208 0ac8 F8EEE77A 		vcvt.f32.s32	s15, s15
 2209 0acc C8EE278A 		vdiv.f32	s17, s16, s15
 2210              	.LVL304:
 652:Core/Src/main.c ****       avg_alt_sum = 0;
 2211              		.loc 1 652 0
 2212 0ad0 0024     		movs	r4, #0
 653:Core/Src/main.c ****       avg_batv_sum = 0;
 2213              		.loc 1 653 0
 2214 0ad2 9FED4C8A 		vldr.32	s16, .L254+52
 2215              	.LVL305:
 2216              	.L193:
 657:Core/Src/main.c ****         while (lwrb_read(&hgps_buff, &rx, 1) == 1) {
 2217              		.loc 1 657 0
 2218 0ad6 4848     		ldr	r0, .L254+40
 2219              	.LVL306:
 2220 0ad8 FFF7FEFF 		bl	lwrb_get_full
 2221              	.LVL307:
 2222 0adc 38B1     		cbz	r0, .L195
 2223              	.L194:
ARM GAS  /tmp/ccW2zlda.s 			page 64


 658:Core/Src/main.c ****             lwgps_process(&hgps, &rx, 1); 
 2224              		.loc 1 658 0
 2225 0ade 0122     		movs	r2, #1
 2226 0ae0 0DF11B01 		add	r1, sp, #27
 2227 0ae4 4448     		ldr	r0, .L254+40
 2228 0ae6 FFF7FEFF 		bl	lwrb_read
 2229              	.LVL308:
 2230 0aea 0128     		cmp	r0, #1
 2231 0aec 69D0     		beq	.L196
 2232              	.L195:
 663:Core/Src/main.c ****     sprintf(buf, "%2.1fC %4.0f %2.1fm", temperature, pressure, avg_alt );
 2233              		.loc 1 663 0
 2234 0aee 0020     		movs	r0, #0
 2235 0af0 FFF7FEFF 		bl	ssd1306_Fill
 2236              	.LVL309:
 664:Core/Src/main.c ****     ssd1306_SetCursor(1,1);
 2237              		.loc 1 664 0
 2238 0af4 0C98     		ldr	r0, [sp, #48]	@ float
 2239 0af6 FFF7FEFF 		bl	__aeabi_f2d
 2240              	.LVL310:
 2241 0afa 8046     		mov	r8, r0
 2242 0afc 8946     		mov	r9, r1
 2243 0afe 18EE900A 		vmov	r0, s17
 2244 0b02 FFF7FEFF 		bl	__aeabi_f2d
 2245              	.LVL311:
 2246 0b06 CDE90201 		strd	r0, [sp, #8]
 2247 0b0a 0B98     		ldr	r0, [sp, #44]	@ float
 2248 0b0c FFF7FEFF 		bl	__aeabi_f2d
 2249              	.LVL312:
 2250 0b10 CDE90001 		strd	r0, [sp]
 2251 0b14 4246     		mov	r2, r8
 2252 0b16 4B46     		mov	r3, r9
 2253 0b18 3B49     		ldr	r1, .L254+56
 2254 0b1a 07A8     		add	r0, sp, #28
 2255 0b1c FFF7FEFF 		bl	sprintf
 2256              	.LVL313:
 665:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 2257              		.loc 1 665 0
 2258 0b20 0121     		movs	r1, #1
 2259 0b22 0846     		mov	r0, r1
 2260 0b24 FFF7FEFF 		bl	ssd1306_SetCursor
 2261              	.LVL314:
 666:Core/Src/main.c ****     sprintf(buf, "%2.1fV %d/%d %2.1fm", (float)((2.5/4096)*batv)*2.0, hgps.sats_in_use, hgps.sats_i
 2262              		.loc 1 666 0
 2263 0b28 384D     		ldr	r5, .L254+60
 2264 0b2a 0123     		movs	r3, #1
 2265 0b2c 95E80600 		ldm	r5, {r1, r2}
 2266 0b30 07A8     		add	r0, sp, #28
 2267 0b32 FFF7FEFF 		bl	ssd1306_WriteString
 2268              	.LVL315:
 667:Core/Src/main.c ****     ssd1306_SetCursor(1,12);
 2269              		.loc 1 667 0
 2270 0b36 3046     		mov	r0, r6
 2271 0b38 FFF7FEFF 		bl	__aeabi_i2d
 2272              	.LVL316:
 2273 0b3c 0022     		movs	r2, #0
 2274 0b3e 344B     		ldr	r3, .L254+64
ARM GAS  /tmp/ccW2zlda.s 			page 65


 2275 0b40 FFF7FEFF 		bl	__aeabi_dmul
 2276              	.LVL317:
 2277 0b44 FFF7FEFF 		bl	__aeabi_d2f
 2278              	.LVL318:
 2279 0b48 FFF7FEFF 		bl	__aeabi_f2d
 2280              	.LVL319:
 2281 0b4c 284E     		ldr	r6, .L254+32
 2282              	.LVL320:
 2283 0b4e 96F82070 		ldrb	r7, [r6, #32]	@ zero_extendqisi2
 2284 0b52 96F84D80 		ldrb	r8, [r6, #77]	@ zero_extendqisi2
 2285 0b56 0246     		mov	r2, r0
 2286 0b58 0B46     		mov	r3, r1
 2287 0b5a FFF7FEFF 		bl	__aeabi_dadd
 2288              	.LVL321:
 2289 0b5e D6E90423 		ldrd	r2, [r6, #16]
 2290 0b62 CDE90223 		strd	r2, [sp, #8]
 2291 0b66 CDF80480 		str	r8, [sp, #4]
 2292 0b6a 0097     		str	r7, [sp]
 2293 0b6c 0246     		mov	r2, r0
 2294 0b6e 0B46     		mov	r3, r1
 2295 0b70 2849     		ldr	r1, .L254+68
 2296 0b72 07A8     		add	r0, sp, #28
 2297 0b74 FFF7FEFF 		bl	sprintf
 2298              	.LVL322:
 668:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 2299              		.loc 1 668 0
 2300 0b78 0C21     		movs	r1, #12
 2301 0b7a 0120     		movs	r0, #1
 2302 0b7c FFF7FEFF 		bl	ssd1306_SetCursor
 2303              	.LVL323:
 669:Core/Src/main.c ****     sprintf(buf, "%.5f %.5f", hgps.latitude, hgps.longitude );
 2304              		.loc 1 669 0
 2305 0b80 0123     		movs	r3, #1
 2306 0b82 95E80600 		ldm	r5, {r1, r2}
 2307 0b86 07A8     		add	r0, sp, #28
 2308 0b88 FFF7FEFF 		bl	ssd1306_WriteString
 2309              	.LVL324:
 670:Core/Src/main.c ****     ssd1306_SetCursor(1,22);
 2310              		.loc 1 670 0
 2311 0b8c D6E90223 		ldrd	r2, [r6, #8]
 2312 0b90 CDE90023 		strd	r2, [sp]
 2313 0b94 D6E90023 		ldrd	r2, [r6]
 2314 0b98 1F49     		ldr	r1, .L254+72
 2315 0b9a 07A8     		add	r0, sp, #28
 2316 0b9c FFF7FEFF 		bl	sprintf
 2317              	.LVL325:
 671:Core/Src/main.c ****     ssd1306_WriteString(buf, Font_7x10, White);
 2318              		.loc 1 671 0
 2319 0ba0 1621     		movs	r1, #22
 2320 0ba2 0120     		movs	r0, #1
 2321 0ba4 FFF7FEFF 		bl	ssd1306_SetCursor
 2322              	.LVL326:
 672:Core/Src/main.c **** 
 2323              		.loc 1 672 0
 2324 0ba8 0123     		movs	r3, #1
 2325 0baa 95E80600 		ldm	r5, {r1, r2}
 2326 0bae 07A8     		add	r0, sp, #28
ARM GAS  /tmp/ccW2zlda.s 			page 66


 2327 0bb0 FFF7FEFF 		bl	ssd1306_WriteString
 2328              	.LVL327:
 674:Core/Src/main.c ****     //HAL_Delay(5);
 2329              		.loc 1 674 0
 2330 0bb4 FFF7FEFF 		bl	ssd1306_UpdateScreen
 2331              	.LVL328:
 676:Core/Src/main.c ****   }
 2332              		.loc 1 676 0
 2333 0bb8 2021     		movs	r1, #32
 2334 0bba 1848     		ldr	r0, .L254+76
 2335 0bbc FFF7FEFF 		bl	HAL_GPIO_TogglePin
 2336              	.LVL329:
 2337              	.LBE8:
 627:Core/Src/main.c **** 
 2338              		.loc 1 627 0
 2339 0bc0 3EE7     		b	.L197
 2340              	.LVL330:
 2341              	.L196:
 2342              	.LBB9:
 659:Core/Src/main.c ****         }
 2343              		.loc 1 659 0
 2344 0bc2 0122     		movs	r2, #1
 2345 0bc4 0DF11B01 		add	r1, sp, #27
 2346 0bc8 0948     		ldr	r0, .L254+32
 2347 0bca FFF7FEFF 		bl	lwgps_process
 2348              	.LVL331:
 2349 0bce 86E7     		b	.L194
 2350              	.L255:
 2351              		.align	3
 2352              	.L254:
 2353 0bd0 1C63E33E 		.word	1055089436
 2354 0bd4 D3BB1B40 		.word	1075559379
 2355 0bd8 00000020 		.word	536870912
 2356 0bdc 68453DC0 		.word	-1069726360
 2357 0be0 66666666 		.word	1717986918
 2358 0be4 66127140 		.word	1081152102
 2359 0be8 00000000 		.word	huart1
 2360 0bec 00000000 		.word	hopamp4
 2361 0bf0 00000000 		.word	hgps
 2362 0bf4 00000000 		.word	hgps_buff_data
 2363 0bf8 00000000 		.word	hgps_buff
 2364 0bfc 00000000 		.word	hadc5
 2365 0c00 180C0000 		.word	.LC96
 2366 0c04 00000000 		.word	0
 2367 0c08 440C0000 		.word	.LC97
 2368 0c0c 00000000 		.word	Font_7x10
 2369 0c10 0000443F 		.word	1061421056
 2370 0c14 580C0000 		.word	.LC98
 2371 0c18 6C0C0000 		.word	.LC99
 2372 0c1c 00080048 		.word	1207961600
 2373              	.LBE9:
 2374              		.cfi_endproc
 2375              	.LFE336:
 2377              		.comm	hgps_buff_data,512,4
 2378              		.comm	hgps_buff,28,4
 2379              		.comm	hgps,176,8
 2380              		.comm	myICM,32,4
ARM GAS  /tmp/ccW2zlda.s 			page 67


 2381              		.global	mySerif
 2382              		.section	.rodata
 2383              		.align	2
 2384              		.set	.LANCHOR4,. + 0
 2385              	.LC0:
 2386 0000 09       		.byte	9
 2387 0001 99       		.byte	-103
 2388 0002 99       		.byte	-103
 2389 0003 99       		.byte	-103
 2390              	.LC1:
 2391 0004 F6       		.byte	-10
 2392 0005 66       		.byte	102
 2393 0006 66       		.byte	102
 2394 0007 67       		.byte	103
 2395              	.LC2:
 2396 0008 03       		.byte	3
 2397 0009 A4       		.byte	-92
 2398 000a 92       		.byte	-110
 2399 000b 49       		.byte	73
 2400              	.LC3:
 2401 000c 34       		.byte	52
 2402 000d 92       		.byte	-110
 2403 000e 49       		.byte	73
 2404 000f 25       		.byte	37
 2405              	.LC4:
 2406 0010 0B       		.byte	11
 2407 0011 6D       		.byte	109
 2408 0012 B6       		.byte	-74
 2409 0013 DB       		.byte	-37
 2410              		.section	.bss.buffer.14728,"aw",%nobits
 2411              		.align	2
 2412              		.set	.LANCHOR0,. + 0
 2415              	buffer.14728:
 2416 0000 00000000 		.space	256
 2416      00000000 
 2416      00000000 
 2416      00000000 
 2416      00000000 
 2417              		.section	.bss.rx_buffer.14857,"aw",%nobits
 2418              		.align	2
 2419              		.set	.LANCHOR2,. + 0
 2422              	rx_buffer.14857:
 2423 0000 00000000 		.space	513
 2423      00000000 
 2423      00000000 
 2423      00000000 
 2423      00000000 
 2424              		.section	.bss.rx_index.14858,"aw",%nobits
 2425              		.align	2
 2426              		.set	.LANCHOR1,. + 0
 2429              	rx_index.14858:
 2430 0000 00000000 		.space	4
 2431              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2432              		.align	2
 2433              	.LC5:
 2434 0000 0D0A4943 		.ascii	"\015\012ICM 20948 Setup\015\012\000"
 2434      4D203230 
ARM GAS  /tmp/ccW2zlda.s 			page 68


 2434      39343820 
 2434      53657475 
 2434      700D0A00 
 2435              	.LC6:
 2436 0014 2D205265 		.ascii	"- Read ID - PASS\015\012\000"
 2436      61642049 
 2436      44202D20 
 2436      50415353 
 2436      0D0A00
 2437 0027 00       		.space	1
 2438              	.LC7:
 2439 0028 2D205265 		.ascii	"- Read ID - FAIL (Remove Board Power)\015\012\000"
 2439      61642049 
 2439      44202D20 
 2439      4641494C 
 2439      20285265 
 2440              	.LC8:
 2441 0050 2D205357 		.ascii	"- SW Reset - PASS\015\012\000"
 2441      20526573 
 2441      6574202D 
 2441      20504153 
 2441      530D0A00 
 2442              	.LC9:
 2443 0064 2D205357 		.ascii	"- SW Reset - FAIL\015\012\000"
 2443      20526573 
 2443      6574202D 
 2443      20464149 
 2443      4C0D0A00 
 2444              	.LC10:
 2445 0078 2D205761 		.ascii	"- Wake from Sleep - PASS\015\012\000"
 2445      6B652066 
 2445      726F6D20 
 2445      536C6565 
 2445      70202D20 
 2446 0093 00       		.space	1
 2447              	.LC11:
 2448 0094 2D205761 		.ascii	"- Wake from Sleep - FAIL\015\012\000"
 2448      6B652066 
 2448      726F6D20 
 2448      536C6565 
 2448      70202D20 
 2449 00af 00       		.space	1
 2450              	.LC12:
 2451 00b0 2D204675 		.ascii	"- Full power mode - PASS\015\012\000"
 2451      6C6C2070 
 2451      6F776572 
 2451      206D6F64 
 2451      65202D20 
 2452 00cb 00       		.space	1
 2453              	.LC13:
 2454 00cc 2D204675 		.ascii	"- Full power mode - FAIL\015\012\000"
 2454      6C6C2070 
 2454      6F776572 
 2454      206D6F64 
 2454      65202D20 
 2455 00e7 00       		.space	1
 2456              	.LC14:
ARM GAS  /tmp/ccW2zlda.s 			page 69


 2457 00e8 2D204469 		.ascii	"- Disable I2C Passthrough - PASS\015\012\000"
 2457      7361626C 
 2457      65204932 
 2457      43205061 
 2457      73737468 
 2458 010b 00       		.space	1
 2459              	.LC15:
 2460 010c 2D204469 		.ascii	"- Disable I2C Passthrough - FAIL\015\012\000"
 2460      7361626C 
 2460      65204932 
 2460      43205061 
 2460      73737468 
 2461 012f 00       		.space	1
 2462              	.LC16:
 2463 0130 2D20456E 		.ascii	"- Enable I2C Master - PASS\015\012\000"
 2463      61626C65 
 2463      20493243 
 2463      204D6173 
 2463      74657220 
 2464 014d 000000   		.space	3
 2465              	.LC17:
 2466 0150 2D20456E 		.ascii	"- Enable I2C Master - FAIL\015\012\000"
 2466      61626C65 
 2466      20493243 
 2466      204D6173 
 2466      74657220 
 2467 016d 000000   		.space	3
 2468              	.LC18:
 2469 0170 2D204932 		.ascii	"- I2C Master Reset - PASS\015\012\000"
 2469      43204D61 
 2469      73746572 
 2469      20526573 
 2469      6574202D 
 2470              	.LC19:
 2471 018c 2D204932 		.ascii	"- I2C Master Reset - FAIL\015\012\000"
 2471      43204D61 
 2471      73746572 
 2471      20526573 
 2471      6574202D 
 2472              	.LC20:
 2473 01a8 2D20414B 		.ascii	"- AK09916 WHOIAM - 0x%02x - 0x%02x\015\012\000"
 2473      30393931 
 2473      36205748 
 2473      4F49414D 
 2473      202D2030 
 2474 01cd 000000   		.space	3
 2475              	.LC21:
 2476 01d0 2D20414B 		.ascii	"- AK09916 Configure Control 2 - PASS\015\012\000"
 2476      30393931 
 2476      3620436F 
 2476      6E666967 
 2476      75726520 
 2477 01f7 00       		.space	1
 2478              	.LC22:
 2479 01f8 2D20414B 		.ascii	"- AK09916 Configure Control 2 - FAIL\015\012\000"
 2479      30393931 
 2479      3620436F 
ARM GAS  /tmp/ccW2zlda.s 			page 70


 2479      6E666967 
 2479      75726520 
 2480 021f 00       		.space	1
 2481              	.LC23:
 2482 0220 2D20414B 		.ascii	"- AK09916 Configure Status 1- PASS\015\012\000"
 2482      30393931 
 2482      3620436F 
 2482      6E666967 
 2482      75726520 
 2483 0245 000000   		.space	3
 2484              	.LC24:
 2485 0248 2D20414B 		.ascii	"- AK09916 Configure Status 1 - FAIL\015\012\000"
 2485      30393931 
 2485      3620436F 
 2485      6E666967 
 2485      75726520 
 2486 026e 0000     		.space	2
 2487              	.LC25:
 2488 0270 2D205365 		.ascii	"- Set Clock - PASS\015\012\000"
 2488      7420436C 
 2488      6F636B20 
 2488      2D205041 
 2488      53530D0A 
 2489 0285 000000   		.space	3
 2490              	.LC26:
 2491 0288 2D205365 		.ascii	"- Set Clock - FAIL\015\012\000"
 2491      7420436C 
 2491      6F636B20 
 2491      2D204641 
 2491      494C0D0A 
 2492 029d 000000   		.space	3
 2493              	.LC27:
 2494 02a0 2D205365 		.ascii	"- Set Bank 0 - PASS\015\012\000"
 2494      74204261 
 2494      6E6B2030 
 2494      202D2050 
 2494      4153530D 
 2495 02b6 0000     		.space	2
 2496              	.LC28:
 2497 02b8 2D205365 		.ascii	"- Set Bank 0 - FAIL\015\012\000"
 2497      74204261 
 2497      6E6B2030 
 2497      202D2046 
 2497      41494C0D 
 2498 02ce 0000     		.space	2
 2499              	.LC29:
 2500 02d0 2D205772 		.ascii	"- Write Power Management 2 - PASS\015\012\000"
 2500      69746520 
 2500      506F7765 
 2500      72204D61 
 2500      6E616765 
 2501              	.LC30:
 2502 02f4 2D205772 		.ascii	"- Write Power Management 2 - FAIL\015\012\000"
 2502      69746520 
 2502      506F7765 
 2502      72204D61 
 2502      6E616765 
ARM GAS  /tmp/ccW2zlda.s 			page 71


 2503              	.LC31:
 2504 0318 2D205365 		.ascii	"- Set Sample Mode A G M - PASS\015\012\000"
 2504      74205361 
 2504      6D706C65 
 2504      204D6F64 
 2504      65204120 
 2505 0339 000000   		.space	3
 2506              	.LC32:
 2507 033c 2D205365 		.ascii	"- Set Sample Mode A G M - FAIL\015\012\000"
 2507      74205361 
 2507      6D706C65 
 2507      204D6F64 
 2507      65204120 
 2508 035d 000000   		.space	3
 2509              	.LC33:
 2510 0360 2D204469 		.ascii	"- Disable FIFO - PASS\015\012\000"
 2510      7361626C 
 2510      65204649 
 2510      464F202D 
 2510      20504153 
 2511              	.LC34:
 2512 0378 2D204469 		.ascii	"- Disable FIFO - FAIL\015\012\000"
 2512      7361626C 
 2512      65204649 
 2512      464F202D 
 2512      20464149 
 2513              	.LC35:
 2514 0390 2D204469 		.ascii	"- Disable DMP - PASS\015\012\000"
 2514      7361626C 
 2514      6520444D 
 2514      50202D20 
 2514      50415353 
 2515 03a7 00       		.space	1
 2516              	.LC36:
 2517 03a8 2D204469 		.ascii	"- Disable DMP - FAIL\015\012\000"
 2517      7361626C 
 2517      6520444D 
 2517      50202D20 
 2517      4641494C 
 2518 03bf 00       		.space	1
 2519              	.LC37:
 2520 03c0 2D205365 		.ascii	"- Set Full Scale A G - PASS\015\012\000"
 2520      74204675 
 2520      6C6C2053 
 2520      63616C65 
 2520      20412047 
 2521 03de 0000     		.space	2
 2522              	.LC38:
 2523 03e0 2D205365 		.ascii	"- Set Full Scale A G - FAIL\015\012\000"
 2523      74204675 
 2523      6C6C2053 
 2523      63616C65 
 2523      20412047 
 2524 03fe 0000     		.space	2
 2525              	.LC39:
 2526 0400 2D205365 		.ascii	"- Set FIFO Enable 1 - PASS\015\012\000"
 2526      74204649 
ARM GAS  /tmp/ccW2zlda.s 			page 72


 2526      464F2045 
 2526      6E61626C 
 2526      65203120 
 2527 041d 000000   		.space	3
 2528              	.LC40:
 2529 0420 2D205365 		.ascii	"- Set FIFO Enable 1 - FAIL\015\012\000"
 2529      74204649 
 2529      464F2045 
 2529      6E61626C 
 2529      65203120 
 2530 043d 000000   		.space	3
 2531              	.LC41:
 2532 0440 2D205365 		.ascii	"- Set FIFO Enable 2 - PASS\015\012\000"
 2532      74204649 
 2532      464F2045 
 2532      6E61626C 
 2532      65203220 
 2533 045d 000000   		.space	3
 2534              	.LC42:
 2535 0460 2D205365 		.ascii	"- Set FIFO Enable 2 - FAIL\015\012\000"
 2535      74204649 
 2535      464F2045 
 2535      6E61626C 
 2535      65203220 
 2536 047d 000000   		.space	3
 2537              	.LC43:
 2538 0480 2D205265 		.ascii	"- Read Data Ready Interrupt Enable - PASS\015\012\000"
 2538      61642044 
 2538      61746120 
 2538      52656164 
 2538      7920496E 
 2539              	.LC44:
 2540 04ac 2D205265 		.ascii	"- Read Data Ready Interrupt Enable - FAIL\015\012\000"
 2540      61642044 
 2540      61746120 
 2540      52656164 
 2540      7920496E 
 2541              	.LC45:
 2542 04d8 2D205365 		.ascii	"- Set Data Ready Interrupt Disable - PASS\015\012\000"
 2542      74204461 
 2542      74612052 
 2542      65616479 
 2542      20496E74 
 2543              	.LC46:
 2544 0504 2D205365 		.ascii	"- Set Data Ready Interrupt Disable - FAIL\015\012\000"
 2544      74204461 
 2544      74612052 
 2544      65616479 
 2544      20496E74 
 2545              	.LC47:
 2546 0530 2D205265 		.ascii	"- Reset FIFO - PASS\015\012\000"
 2546      73657420 
 2546      4649464F 
 2546      202D2050 
 2546      4153530D 
 2547 0546 0000     		.space	2
 2548              	.LC48:
ARM GAS  /tmp/ccW2zlda.s 			page 73


 2549 0548 2D205265 		.ascii	"- Reset FIFO - FAIL\015\012\000"
 2549      73657420 
 2549      4649464F 
 2549      202D2046 
 2549      41494C0D 
 2550 055e 0000     		.space	2
 2551              	.LC49:
 2552 0560 2D205365 		.ascii	"- Set Sample Rate A G - PASS\015\012\000"
 2552      74205361 
 2552      6D706C65 
 2552      20526174 
 2552      65204120 
 2553 057f 00       		.space	1
 2554              	.LC50:
 2555 0580 2D205365 		.ascii	"- Set Sample Rate A G - FAIL\015\012\000"
 2555      74205361 
 2555      6D706C65 
 2555      20526174 
 2555      65204120 
 2556 059f 00       		.space	1
 2557              	.LC51:
 2558 05a0 2D205365 		.ascii	"- Set DMP Start Address - PASS\015\012\000"
 2558      7420444D 
 2558      50205374 
 2558      61727420 
 2558      41646472 
 2559 05c1 000000   		.space	3
 2560              	.LC52:
 2561 05c4 2D205365 		.ascii	"- Set DMP Start Address - FAIL\015\012\000"
 2561      7420444D 
 2561      50205374 
 2561      61727420 
 2561      41646472 
 2562 05e5 000000   		.space	3
 2563              	.LC53:
 2564 05e8 2D204C6F 		.ascii	"- Load DMP Firmware - PASS\015\012\000"
 2564      61642044 
 2564      4D502046 
 2564      69726D77 
 2564      61726520 
 2565 0605 000000   		.space	3
 2566              	.LC54:
 2567 0608 2D204C6F 		.ascii	"- Load DMP Firmware - FAIL\015\012\000"
 2567      61642044 
 2567      4D502046 
 2567      69726D77 
 2567      61726520 
 2568 0625 000000   		.space	3
 2569              	.LC55:
 2570 0628 2D205365 		.ascii	"- Set DMP Start Address Bytes - PASS\015\012\000"
 2570      7420444D 
 2570      50205374 
 2570      61727420 
 2570      41646472 
 2571 064f 00       		.space	1
 2572              	.LC56:
 2573 0650 2D205365 		.ascii	"- Set DMP Start Address Bytes - FAIL\015\012\000"
ARM GAS  /tmp/ccW2zlda.s 			page 74


 2573      7420444D 
 2573      50205374 
 2573      61727420 
 2573      41646472 
 2574 0677 00       		.space	1
 2575              	.LC57:
 2576 0678 2D205365 		.ascii	"- Set HW Fix - PASS\015\012\000"
 2576      74204857 
 2576      20466978 
 2576      202D2050 
 2576      4153530D 
 2577 068e 0000     		.space	2
 2578              	.LC58:
 2579 0690 2D205365 		.ascii	"- Set HW Fix - FAIL\015\012\000"
 2579      74204857 
 2579      20466978 
 2579      202D2046 
 2579      41494C0D 
 2580 06a6 0000     		.space	2
 2581              	.LC59:
 2582 06a8 2D204649 		.ascii	"- FIFO Priority Select - PASS\015\012\000"
 2582      464F2050 
 2582      72696F72 
 2582      69747920 
 2582      53656C65 
 2583              	.LC60:
 2584 06c8 2D204649 		.ascii	"- FIFO Priority Select - FAIL\015\012\000"
 2584      464F2050 
 2584      72696F72 
 2584      69747920 
 2584      53656C65 
 2585              	.LC61:
 2586 06e8 2D20444D 		.ascii	"- DMP Accelerometer Scale 1 Select - PASS\015\012\000"
 2586      50204163 
 2586      63656C65 
 2586      726F6D65 
 2586      74657220 
 2587              	.LC62:
 2588 0714 2D20444D 		.ascii	"- DMP Accelerometer Scale 1 Select - FAIL\015\012\000"
 2588      50204163 
 2588      63656C65 
 2588      726F6D65 
 2588      74657220 
 2589              	.LC63:
 2590 0740 2D20444D 		.ascii	"- DMP Accelerometer Scale 2 Select - PASS\015\012\000"
 2590      50204163 
 2590      63656C65 
 2590      726F6D65 
 2590      74657220 
 2591              	.LC64:
 2592 076c 2D20444D 		.ascii	"- DMP Accelerometer Scale 2 Select - FAIL\015\012\000"
 2592      50204163 
 2592      63656C65 
 2592      726F6D65 
 2592      74657220 
 2593              	.LC65:
 2594 0798 2D20444D 		.ascii	"- DMP Compass Mount Matrix Set - PASS\015\012\000"
ARM GAS  /tmp/ccW2zlda.s 			page 75


 2594      5020436F 
 2594      6D706173 
 2594      73204D6F 
 2594      756E7420 
 2595              	.LC66:
 2596 07c0 2D20444D 		.ascii	"- DMP Compass Mount Matrix Set - Fail\015\012\000"
 2596      5020436F 
 2596      6D706173 
 2596      73204D6F 
 2596      756E7420 
 2597              	.LC67:
 2598 07e8 2D204232 		.ascii	"- B2S Mount Matrix Set - PASS\015\012\000"
 2598      53204D6F 
 2598      756E7420 
 2598      4D617472 
 2598      69782053 
 2599              	.LC68:
 2600 0808 2D204232 		.ascii	"- B2S Mount Matrix Set - Fail\015\012\000"
 2600      53204D6F 
 2600      756E7420 
 2600      4D617472 
 2600      69782053 
 2601              	.LC69:
 2602 0828 2D20444D 		.ascii	"- DMP Gyroscope Sample Rate Select - PASS\015\012\000"
 2602      50204779 
 2602      726F7363 
 2602      6F706520 
 2602      53616D70 
 2603              	.LC70:
 2604 0854 2D20444D 		.ascii	"- DMP Gyroscope Sample Rate Select - Fail\015\012\000"
 2604      50204779 
 2604      726F7363 
 2604      6F706520 
 2604      53616D70 
 2605              	.LC71:
 2606 0880 2D20444D 		.ascii	"- DMP Gyroscope Full Scale Select - PASS\015\012\000"
 2606      50204779 
 2606      726F7363 
 2606      6F706520 
 2606      46756C6C 
 2607 08ab 00       		.space	1
 2608              	.LC72:
 2609 08ac 2D20444D 		.ascii	"- DMP Gyroscope Full Scale Select - Fail\015\012\000"
 2609      50204779 
 2609      726F7363 
 2609      6F706520 
 2609      46756C6C 
 2610 08d7 00       		.space	1
 2611              	.LC73:
 2612 08d8 2D20444D 		.ascii	"- DMP Accelerometer Gain Select - PASS\015\012\000"
 2612      50204163 
 2612      63656C65 
 2612      726F6D65 
 2612      74657220 
 2613 0901 000000   		.space	3
 2614              	.LC74:
 2615 0904 2D20444D 		.ascii	"- DMP Accelerometer Gain Select - Fail\015\012\000"
ARM GAS  /tmp/ccW2zlda.s 			page 76


 2615      50204163 
 2615      63656C65 
 2615      726F6D65 
 2615      74657220 
 2616 092d 000000   		.space	3
 2617              	.LC75:
 2618 0930 2D20444D 		.ascii	"- DMP Accelerometer Alpha Select - PASS\015\012\000"
 2618      50204163 
 2618      63656C65 
 2618      726F6D65 
 2618      74657220 
 2619 095a 0000     		.space	2
 2620              	.LC76:
 2621 095c 2D20444D 		.ascii	"- DMP Accelerometer Alpha Select - Fail\015\012\000"
 2621      50204163 
 2621      63656C65 
 2621      726F6D65 
 2621      74657220 
 2622 0986 0000     		.space	2
 2623              	.LC77:
 2624 0988 2D20444D 		.ascii	"- DMP Accelerometer A Var Select - PASS\015\012\000"
 2624      50204163 
 2624      63656C65 
 2624      726F6D65 
 2624      74657220 
 2625 09b2 0000     		.space	2
 2626              	.LC78:
 2627 09b4 2D20444D 		.ascii	"- DMP Accelerometer A Var Select - Fail\015\012\000"
 2627      50204163 
 2627      63656C65 
 2627      726F6D65 
 2627      74657220 
 2628 09de 0000     		.space	2
 2629              	.LC79:
 2630 09e0 2D20444D 		.ascii	"- DMP Accelerometer Calibration Rate Select - PASS\015"
 2630      50204163 
 2630      63656C65 
 2630      726F6D65 
 2630      74657220 
 2631 0a13 0A00     		.ascii	"\012\000"
 2632 0a15 000000   		.space	3
 2633              	.LC80:
 2634 0a18 2D20444D 		.ascii	"- DMP Accelerometer Calibration Rate Select - Fail\015"
 2634      50204163 
 2634      63656C65 
 2634      726F6D65 
 2634      74657220 
 2635 0a4b 0A00     		.ascii	"\012\000"
 2636 0a4d 000000   		.space	3
 2637              	.LC81:
 2638 0a50 2D20444D 		.ascii	"- DMP Compass Sample Rate Select - PASS\015\012\000"
 2638      5020436F 
 2638      6D706173 
 2638      73205361 
 2638      6D706C65 
 2639 0a7a 0000     		.space	2
 2640              	.LC82:
ARM GAS  /tmp/ccW2zlda.s 			page 77


 2641 0a7c 2D20444D 		.ascii	"- DMP Compass Sample Rate Select - Fail\015\012\000"
 2641      5020436F 
 2641      6D706173 
 2641      73205361 
 2641      6D706C65 
 2642 0aa6 0000     		.space	2
 2643              	.LC83:
 2644 0aa8 2D20444D 		.ascii	"- DMP Enable Orientation - PASS\015\012\000"
 2644      5020456E 
 2644      61626C65 
 2644      204F7269 
 2644      656E7461 
 2645 0aca 0000     		.space	2
 2646              	.LC84:
 2647 0acc 2D20444D 		.ascii	"- DMP Enable Orientation - Fail\015\012\000"
 2647      5020456E 
 2647      61626C65 
 2647      204F7269 
 2647      656E7461 
 2648 0aee 0000     		.space	2
 2649              	.LC85:
 2650 0af0 2D20444D 		.ascii	"- DMP Set Sensor Period - PASS\015\012\000"
 2650      50205365 
 2650      74205365 
 2650      6E736F72 
 2650      20506572 
 2651 0b11 000000   		.space	3
 2652              	.LC86:
 2653 0b14 2D20444D 		.ascii	"- DMP Set Sensor Period - Fail\015\012\000"
 2653      50205365 
 2653      74205365 
 2653      6E736F72 
 2653      20506572 
 2654 0b35 000000   		.space	3
 2655              	.LC87:
 2656 0b38 2D20456E 		.ascii	"- Enable FIFO - PASS\015\012\000"
 2656      61626C65 
 2656      20464946 
 2656      4F202D20 
 2656      50415353 
 2657 0b4f 00       		.space	1
 2658              	.LC88:
 2659 0b50 2D20456E 		.ascii	"- Enable FIFO - Fail\015\012\000"
 2659      61626C65 
 2659      20464946 
 2659      4F202D20 
 2659      4661696C 
 2660 0b67 00       		.space	1
 2661              	.LC89:
 2662 0b68 2D20456E 		.ascii	"- Enable DMP - PASS\015\012\000"
 2662      61626C65 
 2662      20444D50 
 2662      202D2050 
 2662      4153530D 
 2663 0b7e 0000     		.space	2
 2664              	.LC90:
 2665 0b80 2D20456E 		.ascii	"- Enable DMP - Fail\015\012\000"
ARM GAS  /tmp/ccW2zlda.s 			page 78


 2665      61626C65 
 2665      20444D50 
 2665      202D2046 
 2665      61696C0D 
 2666 0b96 0000     		.space	2
 2667              	.LC91:
 2668 0b98 2D205265 		.ascii	"- Reset DMP - PASS\015\012\000"
 2668      73657420 
 2668      444D5020 
 2668      2D205041 
 2668      53530D0A 
 2669 0bad 000000   		.space	3
 2670              	.LC92:
 2671 0bb0 2D205265 		.ascii	"- Reset DMP - Fail\015\012\000"
 2671      73657420 
 2671      444D5020 
 2671      2D204661 
 2671      696C0D0A 
 2672 0bc5 000000   		.space	3
 2673              	.LC93:
 2674 0bc8 0D0A4943 		.ascii	"\015\012ICM 20948 DMP Enable - PASS\015\012\000"
 2674      4D203230 
 2674      39343820 
 2674      444D5020 
 2674      456E6162 
 2675              	.LC94:
 2676 0be8 2D205265 		.ascii	"- Reset FIFO - Fail\015\012\000"
 2676      73657420 
 2676      4649464F 
 2676      202D2046 
 2676      61696C0D 
 2677 0bfe 0000     		.space	2
 2678              	.LC95:
 2679 0c00 4E6F2072 		.ascii	"No response from ms5637\000"
 2679      6573706F 
 2679      6E736520 
 2679      66726F6D 
 2679      206D7335 
 2680              	.LC96:
 2681 0c18 4661696C 		.ascii	"Failed to get Temperature and Pressure\015\012\000"
 2681      65642074 
 2681      6F206765 
 2681      74205465 
 2681      6D706572 
 2682 0c41 000000   		.space	3
 2683              	.LC97:
 2684 0c44 25322E31 		.ascii	"%2.1fC %4.0f %2.1fm\000"
 2684      66432025 
 2684      342E3066 
 2684      2025322E 
 2684      31666D00 
 2685              	.LC98:
 2686 0c58 25322E31 		.ascii	"%2.1fV %d/%d %2.1fm\000"
 2686      66562025 
 2686      642F2564 
 2686      2025322E 
 2686      31666D00 
ARM GAS  /tmp/ccW2zlda.s 			page 79


 2687              	.LC99:
 2688 0c6c 252E3566 		.ascii	"%.5f %.5f\000"
 2688      20252E35 
 2688      6600
 2689              		.section	.rodata.mySerif,"a",%progbits
 2690              		.align	2
 2691              		.set	.LANCHOR3,. + 0
 2694              	mySerif:
 2695 0000 00000000 		.word	my_write_spi
 2696 0004 00000000 		.word	my_read_spi
 2697 0008 00000000 		.space	4
 2698              		.text
 2699              	.Letext0:
 2700              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2701              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2702              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 2703              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2704              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g484xx.h"
 2705              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 2706              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2707              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2708              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc.h"
 2709              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc_ex.h"
 2710              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 2711              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 2712              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 2713              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dac.h"
 2714              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2715              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_i2c.h"
 2716              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_opamp.h"
 2717              		.file 20 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_qspi.h"
 2718              		.file 21 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 2719              		.file 22 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 2720              		.file 23 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 2721              		.file 24 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2722              		.file 25 "Core/Inc/adc.h"
 2723              		.file 26 "Core/Inc/dac.h"
 2724              		.file 27 "Middlewares/Third_Party/FatFs/src/integer.h"
 2725              		.file 28 "/usr/include/newlib/sys/lock.h"
 2726              		.file 29 "/usr/include/newlib/sys/_types.h"
 2727              		.file 30 "/usr/include/newlib/sys/reent.h"
 2728              		.file 31 "/usr/include/newlib/stdlib.h"
 2729              		.file 32 "Middlewares/Third_Party/FatFs/src/ff.h"
 2730              		.file 33 "Middlewares/Third_Party/FatFs/src/diskio.h"
 2731              		.file 34 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 2732              		.file 35 "FATFS/Target/user_diskio.h"
 2733              		.file 36 "FATFS/App/app_fatfs.h"
 2734              		.file 37 "Core/Inc/i2c.h"
 2735              		.file 38 "Core/Inc/opamp.h"
 2736              		.file 39 "Core/Inc/quadspi.h"
 2737              		.file 40 "Core/Inc/spi.h"
 2738              		.file 41 "Core/Inc/tim.h"
 2739              		.file 42 "Core/Inc/usart.h"
 2740              		.file 43 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stdarg.h"
 2741              		.file 44 "<built-in>"
 2742              		.file 45 "/usr/include/newlib/stdio.h"
 2743              		.file 46 "Drivers/ICM_20948/ICM_20948_REGISTERS.h"
ARM GAS  /tmp/ccW2zlda.s 			page 80


 2744              		.file 47 "Drivers/ICM_20948/ICM_20948_ENUMERATIONS.h"
 2745              		.file 48 "Drivers/ICM_20948/AK09916_ENUMERATIONS.h"
 2746              		.file 49 "Drivers/ICM_20948/AK09916_REGISTERS.h"
 2747              		.file 50 "Drivers/ICM_20948/ICM_20948_DMP.h"
 2748              		.file 51 "Drivers/ICM_20948/ICM_20948_C.h"
 2749              		.file 52 "/usr/include/newlib/math.h"
 2750              		.file 53 "Drivers/ssd1306/ssd1306_fonts.h"
 2751              		.file 54 "Drivers/ssd1306/ssd1306.h"
 2752              		.file 55 "Drivers/MS5637/ms5637.h"
 2753              		.file 56 "Drivers/lwgps/src/include/lwgps/lwgps.h"
 2754              		.file 57 "Drivers/lwrb/src/include/lwrb/lwrb.h"
 2755              		.file 58 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_pwr_ex.h"
 2756              		.file 59 "Core/Inc/gpio.h"
 2757              		.file 60 "Core/Inc/dma.h"
 2758              		.file 61 "USB_Device/App/usb_device.h"
 2759              		.file 62 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccW2zlda.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccW2zlda.s:18     .text.my_write_spi:0000000000000000 $t
     /tmp/ccW2zlda.s:25     .text.my_write_spi:0000000000000000 my_write_spi
     /tmp/ccW2zlda.s:92     .text.my_write_spi:000000000000004c $d
     /tmp/ccW2zlda.s:98     .text.my_read_spi:0000000000000000 $t
     /tmp/ccW2zlda.s:105    .text.my_read_spi:0000000000000000 my_read_spi
     /tmp/ccW2zlda.s:171    .text.my_read_spi:000000000000004c $d
     /tmp/ccW2zlda.s:177    .text.myprintf:0000000000000000 $t
     /tmp/ccW2zlda.s:184    .text.myprintf:0000000000000000 myprintf
     /tmp/ccW2zlda.s:247    .text.myprintf:0000000000000034 $d
     /tmp/ccW2zlda.s:252    .text.UART_GPS_Callback:0000000000000000 $t
     /tmp/ccW2zlda.s:259    .text.UART_GPS_Callback:0000000000000000 UART_GPS_Callback
     /tmp/ccW2zlda.s:343    .text.UART_GPS_Callback:0000000000000060 $d
                            *COM*:000000000000001c hgps_buff
     /tmp/ccW2zlda.s:352    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccW2zlda.s:359    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccW2zlda.s:390    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccW2zlda.s:395    .text.Error_Handler:0000000000000000 $t
     /tmp/ccW2zlda.s:402    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccW2zlda.s:428    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccW2zlda.s:435    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccW2zlda.s:572    .text.SystemClock_Config:00000000000000a8 $d
     /tmp/ccW2zlda.s:583    .text.main:0000000000000000 $t
     /tmp/ccW2zlda.s:590    .text.main:0000000000000000 main
     /tmp/ccW2zlda.s:1137   .text.main:0000000000000318 $d
                            *COM*:0000000000000020 myICM
     /tmp/ccW2zlda.s:1176   .text.main:00000000000003ac $t
     /tmp/ccW2zlda.s:1596   .text.main:0000000000000648 $d
     /tmp/ccW2zlda.s:1629   .text.main:00000000000006c4 $t
     /tmp/ccW2zlda.s:2048   .text.main:0000000000000964 $d
     /tmp/ccW2zlda.s:2085   .text.main:00000000000009f0 $t
     /tmp/ccW2zlda.s:2353   .text.main:0000000000000bd0 $d
                            *COM*:00000000000000b0 hgps
                            *COM*:0000000000000200 hgps_buff_data
     /tmp/ccW2zlda.s:2694   .rodata.mySerif:0000000000000000 mySerif
     /tmp/ccW2zlda.s:2383   .rodata:0000000000000000 $d
     /tmp/ccW2zlda.s:2411   .bss.buffer.14728:0000000000000000 $d
     /tmp/ccW2zlda.s:2415   .bss.buffer.14728:0000000000000000 buffer.14728
     /tmp/ccW2zlda.s:2418   .bss.rx_buffer.14857:0000000000000000 $d
     /tmp/ccW2zlda.s:2422   .bss.rx_buffer.14857:0000000000000000 rx_buffer.14857
     /tmp/ccW2zlda.s:2425   .bss.rx_index.14858:0000000000000000 $d
     /tmp/ccW2zlda.s:2429   .bss.rx_index.14858:0000000000000000 rx_index.14858
     /tmp/ccW2zlda.s:2432   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccW2zlda.s:2690   .rodata.mySerif:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_SPI_Transmit
hspi3
HAL_SPI_Receive
vsnprintf
strlen
CDC_Transmit_FS
lwrb_write
HAL_IncTick
memset
ARM GAS  /tmp/ccW2zlda.s 			page 82


HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_f2d
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
__aeabi_i2d
HAL_Init
MX_GPIO_Init
MX_DMA_Init
MX_QUADSPI1_Init
MX_SPI3_Init
MX_TIM8_Init
MX_ADC2_Init
MX_DAC3_Init
MX_OPAMP2_Init
MX_OPAMP4_Init
MX_TIM1_Init
MX_TIM20_Init
MX_FATFS_Init
MX_UART5_Init
MX_I2C2_Init
MX_USB_Device_Init
MX_USART1_UART_Init
MX_ADC5_Init
HAL_Delay
ICM_20948_link_serif
ICM_20948_check_id
ICM_20948_sw_reset
ICM_20948_sleep
ICM_20948_low_power
ICM_20948_i2c_master_passthrough
ICM_20948_i2c_master_enable
ICM_20948_i2c_master_reset
ICM_20948_i2c_master_single_r
ICM_20948_i2c_master_single_w
ICM_20948_i2c_controller_configure_peripheral
ICM_20948_set_clock_source
ICM_20948_set_bank
ICM_20948_execute_w
ICM_20948_set_sample_mode
ICM_20948_enable_FIFO
ICM_20948_enable_DMP
ICM_20948_set_full_scale
ICM_20948_int_enable
ICM_20948_reset_FIFO
ICM_20948_set_sample_rate
ICM_20948_set_dmp_start_address
ICM_20948_firmware_load
inv_icm20948_write_mems
inv_icm20948_set_gyro_sf
inv_icm20948_enable_dmp_sensor
inv_icm20948_set_dmp_sensor_period
ICM_20948_reset_DMP
ARM GAS  /tmp/ccW2zlda.s 			page 83


ms5637_is_connected
ms5637_reset
ssd1306_Init
HAL_OPAMP_Start
lwgps_init
lwrb_init
HAL_ADC_Start
ms5637_read_temperature_and_pressure
HAL_ADC_PollForConversion
HAL_ADC_GetValue
log
lwrb_get_full
lwrb_read
ssd1306_Fill
sprintf
ssd1306_SetCursor
ssd1306_WriteString
ssd1306_UpdateScreen
HAL_GPIO_TogglePin
lwgps_process
huart1
hopamp4
hadc5
Font_7x10
