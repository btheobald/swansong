ARM GAS  /tmp/ccIpPNgw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"lwrb.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.lwrb_init,"ax",%progbits
  18              		.align	1
  19              		.global	lwrb_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	lwrb_init:
  26              	.LFB0:
  27              		.file 1 "Drivers/lwrb/src/lwrb/lwrb.c"
   1:Drivers/lwrb/src/lwrb/lwrb.c **** /**
   2:Drivers/lwrb/src/lwrb/lwrb.c ****  * \file            lwrb.c
   3:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Lightweight ring buffer
   4:Drivers/lwrb/src/lwrb/lwrb.c ****  */
   5:Drivers/lwrb/src/lwrb/lwrb.c **** 
   6:Drivers/lwrb/src/lwrb/lwrb.c **** /*
   7:Drivers/lwrb/src/lwrb/lwrb.c ****  * Copyright (c) 2020 Tilen MAJERLE
   8:Drivers/lwrb/src/lwrb/lwrb.c ****  *
   9:Drivers/lwrb/src/lwrb/lwrb.c ****  * Permission is hereby granted, free of charge, to any person
  10:Drivers/lwrb/src/lwrb/lwrb.c ****  * obtaining a copy of this software and associated documentation
  11:Drivers/lwrb/src/lwrb/lwrb.c ****  * files (the "Software"), to deal in the Software without restriction,
  12:Drivers/lwrb/src/lwrb/lwrb.c ****  * including without limitation the rights to use, copy, modify, merge,
  13:Drivers/lwrb/src/lwrb/lwrb.c ****  * publish, distribute, sublicense, and/or sell copies of the Software,
  14:Drivers/lwrb/src/lwrb/lwrb.c ****  * and to permit persons to whom the Software is furnished to do so,
  15:Drivers/lwrb/src/lwrb/lwrb.c ****  * subject to the following conditions:
  16:Drivers/lwrb/src/lwrb/lwrb.c ****  *
  17:Drivers/lwrb/src/lwrb/lwrb.c ****  * The above copyright notice and this permission notice shall be
  18:Drivers/lwrb/src/lwrb/lwrb.c ****  * included in all copies or substantial portions of the Software.
  19:Drivers/lwrb/src/lwrb/lwrb.c ****  *
  20:Drivers/lwrb/src/lwrb/lwrb.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  21:Drivers/lwrb/src/lwrb/lwrb.c ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  22:Drivers/lwrb/src/lwrb/lwrb.c ****  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
  23:Drivers/lwrb/src/lwrb/lwrb.c ****  * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  24:Drivers/lwrb/src/lwrb/lwrb.c ****  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  25:Drivers/lwrb/src/lwrb/lwrb.c ****  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  26:Drivers/lwrb/src/lwrb/lwrb.c ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  27:Drivers/lwrb/src/lwrb/lwrb.c ****  * OTHER DEALINGS IN THE SOFTWARE.
  28:Drivers/lwrb/src/lwrb/lwrb.c ****  *
  29:Drivers/lwrb/src/lwrb/lwrb.c ****  * This file is part of LwRB - Lightweight ring buffer library.
  30:Drivers/lwrb/src/lwrb/lwrb.c ****  *
  31:Drivers/lwrb/src/lwrb/lwrb.c ****  * Author:          Tilen MAJERLE <tilen@majerle.eu>
ARM GAS  /tmp/ccIpPNgw.s 			page 2


  32:Drivers/lwrb/src/lwrb/lwrb.c ****  * Version:         v2.0.1
  33:Drivers/lwrb/src/lwrb/lwrb.c ****  */
  34:Drivers/lwrb/src/lwrb/lwrb.c **** #include "lwrb/lwrb.h"
  35:Drivers/lwrb/src/lwrb/lwrb.c **** 
  36:Drivers/lwrb/src/lwrb/lwrb.c **** /* Memory set and copy functions */
  37:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MEMSET                      memset
  38:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MEMCPY                      memcpy
  39:Drivers/lwrb/src/lwrb/lwrb.c **** 
  40:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MAGIC1                      (0xDEADBEEF)
  41:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MAGIC2                      (~0xDEADBEEF)
  42:Drivers/lwrb/src/lwrb/lwrb.c **** 
  43:Drivers/lwrb/src/lwrb/lwrb.c **** #if LWRB_USE_MAGIC
  44:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_IS_VALID(b)                 ((b) != NULL && (b)->magic1 == BUF_MAGIC1 && (b)->magic2 ==
  45:Drivers/lwrb/src/lwrb/lwrb.c **** #else
  46:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_IS_VALID(b)                 ((b) != NULL && (b)->buff != NULL && (b)->size > 0)
  47:Drivers/lwrb/src/lwrb/lwrb.c **** #endif /* LWRB_USE_MAGIC */
  48:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
  49:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))
  50:Drivers/lwrb/src/lwrb/lwrb.c **** #define BUF_SEND_EVT(b, type, bp)       do { if ((b)->evt_fn != NULL) { (b)->evt_fn((b), (type), (b
  51:Drivers/lwrb/src/lwrb/lwrb.c **** 
  52:Drivers/lwrb/src/lwrb/lwrb.c **** /**
  53:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Initialize buffer handle to default values with size and buffer data array
  54:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
  55:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buffdata: Pointer to memory to use as buffer data
  56:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       size: Size of `buffdata` in units of bytes
  57:Drivers/lwrb/src/lwrb/lwrb.c ****  *                      Maximum number of bytes buffer can hold is `size - 1`
  58:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          `1` on success, `0` otherwise
  59:Drivers/lwrb/src/lwrb/lwrb.c ****  */
  60:Drivers/lwrb/src/lwrb/lwrb.c **** uint8_t
  61:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
  28              		.loc 1 61 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  62:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff == NULL || buffdata == NULL || size == 0) {
  34              		.loc 1 62 0
  35 0000 98B1     		cbz	r0, .L3
  36 0002 0346     		mov	r3, r0
  37              		.loc 1 62 0 is_stmt 0 discriminator 1
  38 0004 99B1     		cbz	r1, .L4
  39              		.loc 1 62 0 discriminator 2
  40 0006 0AB9     		cbnz	r2, .L10
  63:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
  41              		.loc 1 63 0 is_stmt 1
  42 0008 0020     		movs	r0, #0
  43              	.LVL1:
  64:Drivers/lwrb/src/lwrb/lwrb.c ****     }
  65:Drivers/lwrb/src/lwrb/lwrb.c **** 
  66:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
  67:Drivers/lwrb/src/lwrb/lwrb.c **** 
  68:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->size = size;
  69:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->buff = buffdata;
  70:Drivers/lwrb/src/lwrb/lwrb.c **** 
  71:Drivers/lwrb/src/lwrb/lwrb.c **** #if LWRB_USE_MAGIC
  72:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->magic1 = BUF_MAGIC1;
ARM GAS  /tmp/ccIpPNgw.s 			page 3


  73:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->magic2 = BUF_MAGIC2;
  74:Drivers/lwrb/src/lwrb/lwrb.c **** #endif /* LWRB_USE_MAGIC */
  75:Drivers/lwrb/src/lwrb/lwrb.c **** 
  76:Drivers/lwrb/src/lwrb/lwrb.c ****     return 1;
  77:Drivers/lwrb/src/lwrb/lwrb.c **** }
  44              		.loc 1 77 0
  45 000a 7047     		bx	lr
  46              	.LVL2:
  47              	.L10:
  61:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff == NULL || buffdata == NULL || size == 0) {
  48              		.loc 1 61 0
  49 000c 10B4     		push	{r4}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 4
  52              		.cfi_offset 4, -4
  66:Drivers/lwrb/src/lwrb/lwrb.c **** 
  53              		.loc 1 66 0
  54 000e 0020     		movs	r0, #0
  55              	.LVL3:
  56 0010 D860     		str	r0, [r3, #12]	@ unaligned
  57 0012 1861     		str	r0, [r3, #16]	@ unaligned
  58 0014 5861     		str	r0, [r3, #20]	@ unaligned
  68:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->buff = buffdata;
  59              		.loc 1 68 0
  60 0016 9A60     		str	r2, [r3, #8]
  69:Drivers/lwrb/src/lwrb/lwrb.c **** 
  61              		.loc 1 69 0
  62 0018 5960     		str	r1, [r3, #4]
  72:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->magic2 = BUF_MAGIC2;
  63              		.loc 1 72 0
  64 001a 064A     		ldr	r2, .L11
  65              	.LVL4:
  66 001c 1A60     		str	r2, [r3]
  73:Drivers/lwrb/src/lwrb/lwrb.c **** #endif /* LWRB_USE_MAGIC */
  67              		.loc 1 73 0
  68 001e 064A     		ldr	r2, .L11+4
  69 0020 9A61     		str	r2, [r3, #24]
  76:Drivers/lwrb/src/lwrb/lwrb.c **** }
  70              		.loc 1 76 0
  71 0022 0120     		movs	r0, #1
  72              		.loc 1 77 0
  73 0024 5DF8044B 		ldr	r4, [sp], #4
  74              	.LCFI1:
  75              		.cfi_restore 4
  76              		.cfi_def_cfa_offset 0
  77 0028 7047     		bx	lr
  78              	.LVL5:
  79              	.L3:
  63:Drivers/lwrb/src/lwrb/lwrb.c ****     }
  80              		.loc 1 63 0
  81 002a 0020     		movs	r0, #0
  82              	.LVL6:
  83 002c 7047     		bx	lr
  84              	.LVL7:
  85              	.L4:
  86 002e 0020     		movs	r0, #0
  87              	.LVL8:
ARM GAS  /tmp/ccIpPNgw.s 			page 4


  88 0030 7047     		bx	lr
  89              	.L12:
  90 0032 00BF     		.align	2
  91              	.L11:
  92 0034 EFBEADDE 		.word	-559038737
  93 0038 10415221 		.word	559038736
  94              		.cfi_endproc
  95              	.LFE0:
  97              		.section	.text.lwrb_is_ready,"ax",%progbits
  98              		.align	1
  99              		.global	lwrb_is_ready
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu fpv4-sp-d16
 105              	lwrb_is_ready:
 106              	.LFB1:
  78:Drivers/lwrb/src/lwrb/lwrb.c **** 
  79:Drivers/lwrb/src/lwrb/lwrb.c **** /**
  80:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Check if buff is initialized and ready to use
  81:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
  82:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          `1` if ready, `0` otherwise
  83:Drivers/lwrb/src/lwrb/lwrb.c ****  */
  84:Drivers/lwrb/src/lwrb/lwrb.c **** uint8_t
  85:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_is_ready(LWRB_VOLATILE lwrb_t* buff) {
 107              		.loc 1 85 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.LVL9:
  86:Drivers/lwrb/src/lwrb/lwrb.c ****     return BUF_IS_VALID(buff);
 113              		.loc 1 86 0
 114 0000 88B1     		cbz	r0, .L15
 115              		.loc 1 86 0 is_stmt 0 discriminator 1
 116 0002 0168     		ldr	r1, [r0]
 117 0004 0B4A     		ldr	r2, .L22
 118 0006 9142     		cmp	r1, r2
 119 0008 01D0     		beq	.L20
 120              		.loc 1 86 0
 121 000a 0020     		movs	r0, #0
 122              	.LVL10:
 123 000c 7047     		bx	lr
 124              	.LVL11:
 125              	.L20:
 126              		.loc 1 86 0 discriminator 3
 127 000e 8169     		ldr	r1, [r0, #24]
 128 0010 094A     		ldr	r2, .L22+4
 129 0012 9142     		cmp	r1, r2
 130 0014 01D0     		beq	.L21
 131              		.loc 1 86 0
 132 0016 0020     		movs	r0, #0
 133              	.LVL12:
 134 0018 7047     		bx	lr
 135              	.LVL13:
 136              	.L21:
 137              		.loc 1 86 0 discriminator 5
ARM GAS  /tmp/ccIpPNgw.s 			page 5


 138 001a 4268     		ldr	r2, [r0, #4]
 139 001c 2AB1     		cbz	r2, .L18
 140              		.loc 1 86 0 discriminator 7
 141 001e 8368     		ldr	r3, [r0, #8]
 142 0020 2BB9     		cbnz	r3, .L19
 143              		.loc 1 86 0
 144 0022 0020     		movs	r0, #0
 145              	.LVL14:
 146 0024 7047     		bx	lr
 147              	.LVL15:
 148              	.L15:
 149 0026 0020     		movs	r0, #0
 150              	.LVL16:
 151 0028 7047     		bx	lr
 152              	.LVL17:
 153              	.L18:
 154 002a 0020     		movs	r0, #0
 155              	.LVL18:
 156 002c 7047     		bx	lr
 157              	.LVL19:
 158              	.L19:
 159 002e 0120     		movs	r0, #1
 160              	.LVL20:
  87:Drivers/lwrb/src/lwrb/lwrb.c **** }
 161              		.loc 1 87 0 is_stmt 1
 162 0030 7047     		bx	lr
 163              	.L23:
 164 0032 00BF     		.align	2
 165              	.L22:
 166 0034 EFBEADDE 		.word	-559038737
 167 0038 10415221 		.word	559038736
 168              		.cfi_endproc
 169              	.LFE1:
 171              		.section	.text.lwrb_free,"ax",%progbits
 172              		.align	1
 173              		.global	lwrb_free
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	lwrb_free:
 180              	.LFB2:
  88:Drivers/lwrb/src/lwrb/lwrb.c **** 
  89:Drivers/lwrb/src/lwrb/lwrb.c **** /**
  90:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Free buffer memory
  91:Drivers/lwrb/src/lwrb/lwrb.c ****  * \note            Since implementation does not use dynamic allocation,
  92:Drivers/lwrb/src/lwrb/lwrb.c ****  *                  it just sets buffer handle to `NULL`
  93:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
  94:Drivers/lwrb/src/lwrb/lwrb.c ****  */
  95:Drivers/lwrb/src/lwrb/lwrb.c **** void
  96:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_free(LWRB_VOLATILE lwrb_t* buff) {
 181              		.loc 1 96 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 186              	.LVL21:
ARM GAS  /tmp/ccIpPNgw.s 			page 6


  97:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 187              		.loc 1 97 0
 188 0000 18B1     		cbz	r0, .L24
 189              		.loc 1 97 0 is_stmt 0 discriminator 1
 190 0002 0168     		ldr	r1, [r0]
 191 0004 084A     		ldr	r2, .L27
 192 0006 9142     		cmp	r1, r2
 193 0008 00D0     		beq	.L26
 194              	.L24:
  98:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->buff = NULL;
  99:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 100:Drivers/lwrb/src/lwrb/lwrb.c **** }
 195              		.loc 1 100 0 is_stmt 1
 196 000a 7047     		bx	lr
 197              	.L26:
  97:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 198              		.loc 1 97 0 discriminator 2
 199 000c 8169     		ldr	r1, [r0, #24]
 200 000e 074A     		ldr	r2, .L27+4
 201 0010 9142     		cmp	r1, r2
 202 0012 FAD1     		bne	.L24
  97:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 203              		.loc 1 97 0 is_stmt 0 discriminator 3
 204 0014 4268     		ldr	r2, [r0, #4]
 205 0016 002A     		cmp	r2, #0
 206 0018 F7D0     		beq	.L24
  97:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 207              		.loc 1 97 0 discriminator 4
 208 001a 8268     		ldr	r2, [r0, #8]
 209 001c 002A     		cmp	r2, #0
 210 001e F4D0     		beq	.L24
  98:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->buff = NULL;
 211              		.loc 1 98 0 is_stmt 1
 212 0020 0022     		movs	r2, #0
 213 0022 4260     		str	r2, [r0, #4]
 214              		.loc 1 100 0
 215 0024 F1E7     		b	.L24
 216              	.L28:
 217 0026 00BF     		.align	2
 218              	.L27:
 219 0028 EFBEADDE 		.word	-559038737
 220 002c 10415221 		.word	559038736
 221              		.cfi_endproc
 222              	.LFE2:
 224              		.section	.text.lwrb_set_evt_fn,"ax",%progbits
 225              		.align	1
 226              		.global	lwrb_set_evt_fn
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	lwrb_set_evt_fn:
 233              	.LFB3:
 101:Drivers/lwrb/src/lwrb/lwrb.c **** 
 102:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 103:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Set event function callback for different buffer operations
 104:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
ARM GAS  /tmp/ccIpPNgw.s 			page 7


 105:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       evt_fn: Callback function
 106:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 107:Drivers/lwrb/src/lwrb/lwrb.c **** void
 108:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 234              		.loc 1 108 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL22:
 109:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 240              		.loc 1 109 0
 241 0000 0346     		mov	r3, r0
 242 0002 18B1     		cbz	r0, .L29
 243              		.loc 1 109 0 is_stmt 0 discriminator 1
 244 0004 0068     		ldr	r0, [r0]
 245              	.LVL23:
 246 0006 084A     		ldr	r2, .L32
 247 0008 9042     		cmp	r0, r2
 248 000a 00D0     		beq	.L31
 249              	.L29:
 110:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->evt_fn = evt_fn;
 111:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 112:Drivers/lwrb/src/lwrb/lwrb.c **** }
 250              		.loc 1 112 0 is_stmt 1
 251 000c 7047     		bx	lr
 252              	.L31:
 109:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 253              		.loc 1 109 0 discriminator 2
 254 000e 9869     		ldr	r0, [r3, #24]
 255 0010 064A     		ldr	r2, .L32+4
 256 0012 9042     		cmp	r0, r2
 257 0014 FAD1     		bne	.L29
 109:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 258              		.loc 1 109 0 is_stmt 0 discriminator 3
 259 0016 5A68     		ldr	r2, [r3, #4]
 260 0018 002A     		cmp	r2, #0
 261 001a F7D0     		beq	.L29
 109:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 262              		.loc 1 109 0 discriminator 4
 263 001c 9A68     		ldr	r2, [r3, #8]
 264 001e 002A     		cmp	r2, #0
 265 0020 F4D0     		beq	.L29
 110:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->evt_fn = evt_fn;
 266              		.loc 1 110 0 is_stmt 1
 267 0022 5961     		str	r1, [r3, #20]
 268              		.loc 1 112 0
 269 0024 F2E7     		b	.L29
 270              	.L33:
 271 0026 00BF     		.align	2
 272              	.L32:
 273 0028 EFBEADDE 		.word	-559038737
 274 002c 10415221 		.word	559038736
 275              		.cfi_endproc
 276              	.LFE3:
 278              		.section	.text.lwrb_get_free,"ax",%progbits
 279              		.align	1
ARM GAS  /tmp/ccIpPNgw.s 			page 8


 280              		.global	lwrb_get_free
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu fpv4-sp-d16
 286              	lwrb_get_free:
 287              	.LFB7:
 113:Drivers/lwrb/src/lwrb/lwrb.c **** 
 114:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 115:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Write data to buffer.
 116:Drivers/lwrb/src/lwrb/lwrb.c ****  * Copies data from `data` array to buffer and marks buffer as full for maximum `btw` number of byt
 117:Drivers/lwrb/src/lwrb/lwrb.c ****  *
 118:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 119:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       data: Pointer to data to write into buffer
 120:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       btw: Number of bytes to write
 121:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes written to buffer.
 122:Drivers/lwrb/src/lwrb/lwrb.c ****  *                      When returned value is less than `btw`, there was no enough memory availabl
 123:Drivers/lwrb/src/lwrb/lwrb.c ****  *                      to copy full data array
 124:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 125:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 126:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 127:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t tocopy, free;
 128:Drivers/lwrb/src/lwrb/lwrb.c ****     const uint8_t* d = data;
 129:Drivers/lwrb/src/lwrb/lwrb.c **** 
 130:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 131:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 132:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 133:Drivers/lwrb/src/lwrb/lwrb.c **** 
 134:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Calculate maximum number of bytes available to write */
 135:Drivers/lwrb/src/lwrb/lwrb.c ****     free = lwrb_get_free(buff);
 136:Drivers/lwrb/src/lwrb/lwrb.c ****     btw = BUF_MIN(free, btw);
 137:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btw == 0) {
 138:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 139:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 140:Drivers/lwrb/src/lwrb/lwrb.c **** 
 141:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 1: Write data to linear part of buffer */
 142:Drivers/lwrb/src/lwrb/lwrb.c ****     tocopy = BUF_MIN(buff->size - buff->w, btw);
 143:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 144:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->w += tocopy;
 145:Drivers/lwrb/src/lwrb/lwrb.c ****     btw -= tocopy;
 146:Drivers/lwrb/src/lwrb/lwrb.c **** 
 147:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 2: Write data to beginning of buffer (overflow part) */
 148:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btw > 0) {
 149:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 150:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w = btw;
 151:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 152:Drivers/lwrb/src/lwrb/lwrb.c **** 
 153:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 3: Check end of buffer */
 154:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->w >= buff->size) {
 155:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w = 0;
 156:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 157:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 158:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btw;
 159:Drivers/lwrb/src/lwrb/lwrb.c **** }
 160:Drivers/lwrb/src/lwrb/lwrb.c **** 
 161:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 162:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Read data from buffer.
ARM GAS  /tmp/ccIpPNgw.s 			page 9


 163:Drivers/lwrb/src/lwrb/lwrb.c ****  * Copies data from buffer to `data` array and marks buffer as free for maximum `btr` number of byt
 164:Drivers/lwrb/src/lwrb/lwrb.c ****  *
 165:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 166:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[out]      data: Pointer to output memory to copy buffer data to
 167:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       btr: Number of bytes to read
 168:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes read and copied to data array
 169:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 170:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 171:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_read(LWRB_VOLATILE lwrb_t* buff, void* data, size_t btr) {
 172:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t tocopy, full;
 173:Drivers/lwrb/src/lwrb/lwrb.c ****     uint8_t* d = data;
 174:Drivers/lwrb/src/lwrb/lwrb.c **** 
 175:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 176:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 177:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 178:Drivers/lwrb/src/lwrb/lwrb.c **** 
 179:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Calculate maximum number of bytes available to read */
 180:Drivers/lwrb/src/lwrb/lwrb.c ****     full = lwrb_get_full(buff);
 181:Drivers/lwrb/src/lwrb/lwrb.c ****     btr = BUF_MIN(full, btr);
 182:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btr == 0) {
 183:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 184:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 185:Drivers/lwrb/src/lwrb/lwrb.c **** 
 186:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 1: Read data from linear part of buffer */
 187:Drivers/lwrb/src/lwrb/lwrb.c ****     tocopy = BUF_MIN(buff->size - buff->r, btr);
 188:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 189:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->r += tocopy;
 190:Drivers/lwrb/src/lwrb/lwrb.c ****     btr -= tocopy;
 191:Drivers/lwrb/src/lwrb/lwrb.c **** 
 192:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 2: Read data from beginning of buffer (overflow part) */
 193:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btr > 0) {
 194:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 195:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r = btr;
 196:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 197:Drivers/lwrb/src/lwrb/lwrb.c **** 
 198:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 3: Check end of buffer */
 199:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->r >= buff->size) {
 200:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r = 0;
 201:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 202:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 203:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btr;
 204:Drivers/lwrb/src/lwrb/lwrb.c **** }
 205:Drivers/lwrb/src/lwrb/lwrb.c **** 
 206:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 207:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Read from buffer without changing read pointer (peek only)
 208:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 209:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       skip_count: Number of bytes to skip before reading data
 210:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[out]      data: Pointer to output memory to copy buffer data to
 211:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       btp: Number of bytes to peek
 212:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes peeked and written to output array
 213:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 214:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 215:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_peek(LWRB_VOLATILE lwrb_t* buff, size_t skip_count, void* data, size_t btp) {
 216:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t full, tocopy, r;
 217:Drivers/lwrb/src/lwrb/lwrb.c ****     uint8_t* d = data;
 218:Drivers/lwrb/src/lwrb/lwrb.c **** 
 219:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff) || data == NULL || btp == 0) {
ARM GAS  /tmp/ccIpPNgw.s 			page 10


 220:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 221:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 222:Drivers/lwrb/src/lwrb/lwrb.c **** 
 223:Drivers/lwrb/src/lwrb/lwrb.c ****     r = buff->r;
 224:Drivers/lwrb/src/lwrb/lwrb.c **** 
 225:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Calculate maximum number of bytes available to read */
 226:Drivers/lwrb/src/lwrb/lwrb.c ****     full = lwrb_get_full(buff);
 227:Drivers/lwrb/src/lwrb/lwrb.c **** 
 228:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Skip beginning of buffer */
 229:Drivers/lwrb/src/lwrb/lwrb.c ****     if (skip_count >= full) {
 230:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 231:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 232:Drivers/lwrb/src/lwrb/lwrb.c ****     r += skip_count;
 233:Drivers/lwrb/src/lwrb/lwrb.c ****     full -= skip_count;
 234:Drivers/lwrb/src/lwrb/lwrb.c ****     if (r >= buff->size) {
 235:Drivers/lwrb/src/lwrb/lwrb.c ****         r -= buff->size;
 236:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 237:Drivers/lwrb/src/lwrb/lwrb.c **** 
 238:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Check maximum number of bytes available to read after skip */
 239:Drivers/lwrb/src/lwrb/lwrb.c ****     btp = BUF_MIN(full, btp);
 240:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btp == 0) {
 241:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 242:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 243:Drivers/lwrb/src/lwrb/lwrb.c **** 
 244:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 1: Read data from linear part of buffer */
 245:Drivers/lwrb/src/lwrb/lwrb.c ****     tocopy = BUF_MIN(buff->size - r, btp);
 246:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
 247:Drivers/lwrb/src/lwrb/lwrb.c ****     btp -= tocopy;
 248:Drivers/lwrb/src/lwrb/lwrb.c **** 
 249:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Step 2: Read data from beginning of buffer (overflow part) */
 250:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btp > 0) {
 251:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 252:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 253:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btp;
 254:Drivers/lwrb/src/lwrb/lwrb.c **** }
 255:Drivers/lwrb/src/lwrb/lwrb.c **** 
 256:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 257:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get available size in buffer for write operation
 258:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 259:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of free bytes in memory
 260:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 261:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 262:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 288              		.loc 1 262 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
 293              	.LVL24:
 263:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t size, w, r;
 264:Drivers/lwrb/src/lwrb/lwrb.c **** 
 265:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 294              		.loc 1 265 0
 295 0000 0346     		mov	r3, r0
 296 0002 D0B1     		cbz	r0, .L38
 297              		.loc 1 265 0 is_stmt 0 discriminator 1
 298 0004 0168     		ldr	r1, [r0]
ARM GAS  /tmp/ccIpPNgw.s 			page 11


 299 0006 0F4A     		ldr	r2, .L44
 300 0008 9142     		cmp	r1, r2
 301 000a 01D0     		beq	.L42
 266:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 302              		.loc 1 266 0 is_stmt 1
 303 000c 0020     		movs	r0, #0
 304              	.LVL25:
 305 000e 7047     		bx	lr
 306              	.LVL26:
 307              	.L42:
 265:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 308              		.loc 1 265 0 discriminator 2
 309 0010 8169     		ldr	r1, [r0, #24]
 310 0012 0D4A     		ldr	r2, .L44+4
 311 0014 9142     		cmp	r1, r2
 312 0016 01D0     		beq	.L43
 313              		.loc 1 266 0
 314 0018 0020     		movs	r0, #0
 315              	.LVL27:
 316 001a 7047     		bx	lr
 317              	.LVL28:
 318              	.L43:
 265:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 319              		.loc 1 265 0 discriminator 3
 320 001c 4268     		ldr	r2, [r0, #4]
 321 001e 72B1     		cbz	r2, .L41
 265:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 322              		.loc 1 265 0 is_stmt 0 discriminator 4
 323 0020 8068     		ldr	r0, [r0, #8]
 324              	.LVL29:
 325 0022 68B1     		cbz	r0, .L34
 267:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 268:Drivers/lwrb/src/lwrb/lwrb.c **** 
 269:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Use temporary values in case they are changed during operations */
 270:Drivers/lwrb/src/lwrb/lwrb.c ****     w = buff->w;
 326              		.loc 1 270 0 is_stmt 1
 327 0024 1A69     		ldr	r2, [r3, #16]
 328              	.LVL30:
 271:Drivers/lwrb/src/lwrb/lwrb.c ****     r = buff->r;
 329              		.loc 1 271 0
 330 0026 DB68     		ldr	r3, [r3, #12]
 331              	.LVL31:
 272:Drivers/lwrb/src/lwrb/lwrb.c ****     if (w == r) {
 332              		.loc 1 272 0
 333 0028 9A42     		cmp	r2, r3
 334 002a 01D0     		beq	.L36
 273:Drivers/lwrb/src/lwrb/lwrb.c ****         size = buff->size;
 274:Drivers/lwrb/src/lwrb/lwrb.c ****     } else if (r > w) {
 335              		.loc 1 274 0
 336 002c 02D2     		bcs	.L37
 275:Drivers/lwrb/src/lwrb/lwrb.c ****         size = r - w;
 337              		.loc 1 275 0
 338 002e 981A     		subs	r0, r3, r2
 339              	.LVL32:
 340              	.L36:
 276:Drivers/lwrb/src/lwrb/lwrb.c ****     } else {
 277:Drivers/lwrb/src/lwrb/lwrb.c ****         size = buff->size - (w - r);
ARM GAS  /tmp/ccIpPNgw.s 			page 12


 278:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 279:Drivers/lwrb/src/lwrb/lwrb.c **** 
 280:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Buffer free size is always 1 less than actual size */
 281:Drivers/lwrb/src/lwrb/lwrb.c ****     return size - 1;
 341              		.loc 1 281 0
 342 0030 0138     		subs	r0, r0, #1
 343              	.LVL33:
 344 0032 7047     		bx	lr
 345              	.LVL34:
 346              	.L37:
 277:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 347              		.loc 1 277 0
 348 0034 9B1A     		subs	r3, r3, r2
 349              	.LVL35:
 350 0036 1844     		add	r0, r0, r3
 351              	.LVL36:
 352 0038 FAE7     		b	.L36
 353              	.LVL37:
 354              	.L38:
 266:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 355              		.loc 1 266 0
 356 003a 0020     		movs	r0, #0
 357              	.LVL38:
 358 003c 7047     		bx	lr
 359              	.LVL39:
 360              	.L41:
 361 003e 0020     		movs	r0, #0
 362              	.LVL40:
 363              	.L34:
 282:Drivers/lwrb/src/lwrb/lwrb.c **** }
 364              		.loc 1 282 0
 365 0040 7047     		bx	lr
 366              	.L45:
 367 0042 00BF     		.align	2
 368              	.L44:
 369 0044 EFBEADDE 		.word	-559038737
 370 0048 10415221 		.word	559038736
 371              		.cfi_endproc
 372              	.LFE7:
 374              		.section	.text.lwrb_write,"ax",%progbits
 375              		.align	1
 376              		.global	lwrb_write
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	lwrb_write:
 383              	.LFB4:
 126:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t tocopy, free;
 384              		.loc 1 126 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL41:
 389 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 390              	.LCFI2:
 391              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccIpPNgw.s 			page 13


 392              		.cfi_offset 4, -24
 393              		.cfi_offset 5, -20
 394              		.cfi_offset 6, -16
 395              		.cfi_offset 7, -12
 396              		.cfi_offset 8, -8
 397              		.cfi_offset 14, -4
 398              	.LVL42:
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 399              		.loc 1 130 0
 400 0004 0028     		cmp	r0, #0
 401 0006 48D0     		beq	.L50
 402 0008 0446     		mov	r4, r0
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 403              		.loc 1 130 0 is_stmt 0 discriminator 1
 404 000a 0368     		ldr	r3, [r0]
 405 000c 2848     		ldr	r0, .L63
 406              	.LVL43:
 407 000e 8342     		cmp	r3, r0
 408 0010 03D0     		beq	.L59
 131:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 409              		.loc 1 131 0 is_stmt 1
 410 0012 0025     		movs	r5, #0
 411              	.LVL44:
 412              	.L46:
 159:Drivers/lwrb/src/lwrb/lwrb.c **** 
 413              		.loc 1 159 0
 414 0014 2846     		mov	r0, r5
 415 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 416              	.LVL45:
 417              	.L59:
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 418              		.loc 1 130 0 discriminator 2
 419 001a A369     		ldr	r3, [r4, #24]
 420 001c 2548     		ldr	r0, .L63+4
 421 001e 8342     		cmp	r3, r0
 422 0020 01D0     		beq	.L60
 131:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 423              		.loc 1 131 0
 424 0022 0025     		movs	r5, #0
 425 0024 F6E7     		b	.L46
 426              	.L60:
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 427              		.loc 1 130 0 discriminator 3
 428 0026 6768     		ldr	r7, [r4, #4]
 429 0028 002F     		cmp	r7, #0
 430 002a 38D0     		beq	.L53
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 431              		.loc 1 130 0 is_stmt 0 discriminator 4
 432 002c A568     		ldr	r5, [r4, #8]
 433 002e 002D     		cmp	r5, #0
 434 0030 F0D0     		beq	.L46
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 435              		.loc 1 130 0 discriminator 5
 436 0032 0029     		cmp	r1, #0
 437 0034 35D0     		beq	.L54
 130:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 438              		.loc 1 130 0 discriminator 6
ARM GAS  /tmp/ccIpPNgw.s 			page 14


 439 0036 002A     		cmp	r2, #0
 440 0038 35D0     		beq	.L55
 441 003a 1646     		mov	r6, r2
 442 003c 8846     		mov	r8, r1
 135:Drivers/lwrb/src/lwrb/lwrb.c ****     btw = BUF_MIN(free, btw);
 443              		.loc 1 135 0 is_stmt 1
 444 003e 2046     		mov	r0, r4
 445 0040 FFF7FEFF 		bl	lwrb_get_free
 446              	.LVL46:
 136:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btw == 0) {
 447              		.loc 1 136 0
 448 0044 8642     		cmp	r6, r0
 449 0046 28BF     		it	cs
 450 0048 0646     		movcs	r6, r0
 451              	.LVL47:
 137:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 452              		.loc 1 137 0
 453 004a 0EB9     		cbnz	r6, .L61
 138:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 454              		.loc 1 138 0
 455 004c 3546     		mov	r5, r6
 456 004e E1E7     		b	.L46
 457              	.L61:
 142:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 458              		.loc 1 142 0
 459 0050 2069     		ldr	r0, [r4, #16]
 460              	.LVL48:
 461 0052 2D1A     		subs	r5, r5, r0
 462 0054 B542     		cmp	r5, r6
 463 0056 28BF     		it	cs
 464 0058 3546     		movcs	r5, r6
 465              	.LVL49:
 143:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->w += tocopy;
 466              		.loc 1 143 0
 467 005a 2A46     		mov	r2, r5
 468 005c 4146     		mov	r1, r8
 469 005e 3844     		add	r0, r0, r7
 470 0060 FFF7FEFF 		bl	memcpy
 471              	.LVL50:
 144:Drivers/lwrb/src/lwrb/lwrb.c ****     btw -= tocopy;
 472              		.loc 1 144 0
 473 0064 2369     		ldr	r3, [r4, #16]
 474 0066 2B44     		add	r3, r3, r5
 475 0068 2361     		str	r3, [r4, #16]
 476              	.LVL51:
 148:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 477              		.loc 1 148 0
 478 006a 771B     		subs	r7, r6, r5
 479              	.LVL52:
 480 006c 0DD1     		bne	.L62
 481              	.L48:
 154:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w = 0;
 482              		.loc 1 154 0
 483 006e 2269     		ldr	r2, [r4, #16]
 484 0070 A368     		ldr	r3, [r4, #8]
 485 0072 9A42     		cmp	r2, r3
 486 0074 01D3     		bcc	.L49
ARM GAS  /tmp/ccIpPNgw.s 			page 15


 155:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 487              		.loc 1 155 0
 488 0076 0023     		movs	r3, #0
 489 0078 2361     		str	r3, [r4, #16]
 490              	.L49:
 157:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btw;
 491              		.loc 1 157 0
 492 007a 6369     		ldr	r3, [r4, #20]
 493 007c ABB1     		cbz	r3, .L57
 157:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btw;
 494              		.loc 1 157 0 is_stmt 0 discriminator 1
 495 007e 3246     		mov	r2, r6
 496 0080 0121     		movs	r1, #1
 497 0082 2046     		mov	r0, r4
 498 0084 9847     		blx	r3
 499              	.LVL53:
 158:Drivers/lwrb/src/lwrb/lwrb.c **** }
 500              		.loc 1 158 0 is_stmt 1 discriminator 1
 501 0086 3546     		mov	r5, r6
 502              	.LVL54:
 503 0088 C4E7     		b	.L46
 504              	.LVL55:
 505              	.L62:
 149:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w = btw;
 506              		.loc 1 149 0
 507 008a 3A46     		mov	r2, r7
 508 008c 08EB0501 		add	r1, r8, r5
 509 0090 6068     		ldr	r0, [r4, #4]
 510 0092 FFF7FEFF 		bl	memcpy
 511              	.LVL56:
 150:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 512              		.loc 1 150 0
 513 0096 2761     		str	r7, [r4, #16]
 514 0098 E9E7     		b	.L48
 515              	.LVL57:
 516              	.L50:
 131:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 517              		.loc 1 131 0
 518 009a 0025     		movs	r5, #0
 519 009c BAE7     		b	.L46
 520              	.LVL58:
 521              	.L53:
 522 009e 0025     		movs	r5, #0
 523 00a0 B8E7     		b	.L46
 524              	.L54:
 525 00a2 0025     		movs	r5, #0
 526 00a4 B6E7     		b	.L46
 527              	.L55:
 528 00a6 1546     		mov	r5, r2
 529 00a8 B4E7     		b	.L46
 530              	.LVL59:
 531              	.L57:
 158:Drivers/lwrb/src/lwrb/lwrb.c **** }
 532              		.loc 1 158 0
 533 00aa 3546     		mov	r5, r6
 534              	.LVL60:
 535 00ac B2E7     		b	.L46
ARM GAS  /tmp/ccIpPNgw.s 			page 16


 536              	.L64:
 537 00ae 00BF     		.align	2
 538              	.L63:
 539 00b0 EFBEADDE 		.word	-559038737
 540 00b4 10415221 		.word	559038736
 541              		.cfi_endproc
 542              	.LFE4:
 544              		.section	.text.lwrb_get_full,"ax",%progbits
 545              		.align	1
 546              		.global	lwrb_get_full
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 550              		.fpu fpv4-sp-d16
 552              	lwrb_get_full:
 553              	.LFB8:
 283:Drivers/lwrb/src/lwrb/lwrb.c **** 
 284:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 285:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get number of bytes currently available in buffer
 286:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 287:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes ready to be read
 288:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 289:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 290:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 554              		.loc 1 290 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559              	.LVL61:
 291:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t w, r, size;
 292:Drivers/lwrb/src/lwrb/lwrb.c **** 
 293:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 560              		.loc 1 293 0
 561 0000 0346     		mov	r3, r0
 562 0002 C8B1     		cbz	r0, .L68
 563              		.loc 1 293 0 is_stmt 0 discriminator 1
 564 0004 0168     		ldr	r1, [r0]
 565 0006 0F4A     		ldr	r2, .L76
 566 0008 9142     		cmp	r1, r2
 567 000a 01D0     		beq	.L73
 294:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 568              		.loc 1 294 0 is_stmt 1
 569 000c 0020     		movs	r0, #0
 570              	.LVL62:
 571 000e 7047     		bx	lr
 572              	.LVL63:
 573              	.L73:
 293:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 574              		.loc 1 293 0 discriminator 2
 575 0010 8169     		ldr	r1, [r0, #24]
 576 0012 0D4A     		ldr	r2, .L76+4
 577 0014 9142     		cmp	r1, r2
 578 0016 01D0     		beq	.L74
 579              		.loc 1 294 0
 580 0018 0020     		movs	r0, #0
 581              	.LVL64:
ARM GAS  /tmp/ccIpPNgw.s 			page 17


 582 001a 7047     		bx	lr
 583              	.LVL65:
 584              	.L74:
 293:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 585              		.loc 1 293 0 discriminator 3
 586 001c 4268     		ldr	r2, [r0, #4]
 587 001e 6AB1     		cbz	r2, .L71
 293:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 588              		.loc 1 293 0 is_stmt 0 discriminator 4
 589 0020 8068     		ldr	r0, [r0, #8]
 590              	.LVL66:
 591 0022 70B1     		cbz	r0, .L65
 295:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 296:Drivers/lwrb/src/lwrb/lwrb.c **** 
 297:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Use temporary values in case they are changed during operations */
 298:Drivers/lwrb/src/lwrb/lwrb.c ****     w = buff->w;
 592              		.loc 1 298 0 is_stmt 1
 593 0024 1A69     		ldr	r2, [r3, #16]
 594              	.LVL67:
 299:Drivers/lwrb/src/lwrb/lwrb.c ****     r = buff->r;
 595              		.loc 1 299 0
 596 0026 DB68     		ldr	r3, [r3, #12]
 597              	.LVL68:
 300:Drivers/lwrb/src/lwrb/lwrb.c ****     if (w == r) {
 598              		.loc 1 300 0
 599 0028 9A42     		cmp	r2, r3
 600 002a 09D0     		beq	.L72
 301:Drivers/lwrb/src/lwrb/lwrb.c ****         size = 0;
 302:Drivers/lwrb/src/lwrb/lwrb.c ****     } else if (w > r) {
 601              		.loc 1 302 0
 602 002c 02D8     		bhi	.L75
 303:Drivers/lwrb/src/lwrb/lwrb.c ****         size = w - r;
 304:Drivers/lwrb/src/lwrb/lwrb.c ****     } else {
 305:Drivers/lwrb/src/lwrb/lwrb.c ****         size = buff->size - (r - w);
 603              		.loc 1 305 0
 604 002e D21A     		subs	r2, r2, r3
 605              	.LVL69:
 606 0030 1044     		add	r0, r0, r2
 607              	.LVL70:
 608 0032 7047     		bx	lr
 609              	.LVL71:
 610              	.L75:
 303:Drivers/lwrb/src/lwrb/lwrb.c ****         size = w - r;
 611              		.loc 1 303 0
 612 0034 D01A     		subs	r0, r2, r3
 613              	.LVL72:
 614 0036 7047     		bx	lr
 615              	.LVL73:
 616              	.L68:
 294:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 617              		.loc 1 294 0
 618 0038 0020     		movs	r0, #0
 619              	.LVL74:
 620 003a 7047     		bx	lr
 621              	.LVL75:
 622              	.L71:
 623 003c 0020     		movs	r0, #0
ARM GAS  /tmp/ccIpPNgw.s 			page 18


 624              	.LVL76:
 625 003e 7047     		bx	lr
 626              	.LVL77:
 627              	.L72:
 301:Drivers/lwrb/src/lwrb/lwrb.c ****         size = 0;
 628              		.loc 1 301 0
 629 0040 0020     		movs	r0, #0
 630              	.LVL78:
 631              	.L65:
 306:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 307:Drivers/lwrb/src/lwrb/lwrb.c ****     return size;
 308:Drivers/lwrb/src/lwrb/lwrb.c **** }
 632              		.loc 1 308 0
 633 0042 7047     		bx	lr
 634              	.L77:
 635              		.align	2
 636              	.L76:
 637 0044 EFBEADDE 		.word	-559038737
 638 0048 10415221 		.word	559038736
 639              		.cfi_endproc
 640              	.LFE8:
 642              		.section	.text.lwrb_read,"ax",%progbits
 643              		.align	1
 644              		.global	lwrb_read
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv4-sp-d16
 650              	lwrb_read:
 651              	.LFB5:
 171:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t tocopy, full;
 652              		.loc 1 171 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              	.LVL79:
 657 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 658              	.LCFI3:
 659              		.cfi_def_cfa_offset 24
 660              		.cfi_offset 4, -24
 661              		.cfi_offset 5, -20
 662              		.cfi_offset 6, -16
 663              		.cfi_offset 7, -12
 664              		.cfi_offset 8, -8
 665              		.cfi_offset 14, -4
 666              	.LVL80:
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 667              		.loc 1 175 0
 668 0004 0028     		cmp	r0, #0
 669 0006 49D0     		beq	.L82
 670 0008 0346     		mov	r3, r0
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 671              		.loc 1 175 0 is_stmt 0 discriminator 1
 672 000a 0568     		ldr	r5, [r0]
 673 000c 284C     		ldr	r4, .L95
 674 000e A542     		cmp	r5, r4
 675 0010 03D0     		beq	.L91
ARM GAS  /tmp/ccIpPNgw.s 			page 19


 176:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 676              		.loc 1 176 0 is_stmt 1
 677 0012 0025     		movs	r5, #0
 678              	.LVL81:
 679              	.L78:
 204:Drivers/lwrb/src/lwrb/lwrb.c **** 
 680              		.loc 1 204 0
 681 0014 2846     		mov	r0, r5
 682 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 683              	.LVL82:
 684              	.L91:
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 685              		.loc 1 175 0 discriminator 2
 686 001a 8469     		ldr	r4, [r0, #24]
 687 001c 2548     		ldr	r0, .L95+4
 688              	.LVL83:
 689 001e 8442     		cmp	r4, r0
 690 0020 01D0     		beq	.L92
 176:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 691              		.loc 1 176 0
 692 0022 0025     		movs	r5, #0
 693 0024 F6E7     		b	.L78
 694              	.L92:
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 695              		.loc 1 175 0 discriminator 3
 696 0026 5F68     		ldr	r7, [r3, #4]
 697 0028 002F     		cmp	r7, #0
 698 002a 39D0     		beq	.L85
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 699              		.loc 1 175 0 is_stmt 0 discriminator 4
 700 002c 9D68     		ldr	r5, [r3, #8]
 701 002e 002D     		cmp	r5, #0
 702 0030 F0D0     		beq	.L78
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 703              		.loc 1 175 0 discriminator 5
 704 0032 0029     		cmp	r1, #0
 705 0034 36D0     		beq	.L86
 175:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 706              		.loc 1 175 0 discriminator 6
 707 0036 002A     		cmp	r2, #0
 708 0038 36D0     		beq	.L87
 709 003a 1C46     		mov	r4, r3
 710 003c 1646     		mov	r6, r2
 711 003e 8846     		mov	r8, r1
 180:Drivers/lwrb/src/lwrb/lwrb.c ****     btr = BUF_MIN(full, btr);
 712              		.loc 1 180 0 is_stmt 1
 713 0040 1846     		mov	r0, r3
 714 0042 FFF7FEFF 		bl	lwrb_get_full
 715              	.LVL84:
 181:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btr == 0) {
 716              		.loc 1 181 0
 717 0046 8642     		cmp	r6, r0
 718 0048 28BF     		it	cs
 719 004a 0646     		movcs	r6, r0
 720              	.LVL85:
 182:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 721              		.loc 1 182 0
ARM GAS  /tmp/ccIpPNgw.s 			page 20


 722 004c 0EB9     		cbnz	r6, .L93
 183:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 723              		.loc 1 183 0
 724 004e 3546     		mov	r5, r6
 725 0050 E0E7     		b	.L78
 726              	.L93:
 187:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 727              		.loc 1 187 0
 728 0052 E168     		ldr	r1, [r4, #12]
 729 0054 6D1A     		subs	r5, r5, r1
 730 0056 B542     		cmp	r5, r6
 731 0058 28BF     		it	cs
 732 005a 3546     		movcs	r5, r6
 733              	.LVL86:
 188:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->r += tocopy;
 734              		.loc 1 188 0
 735 005c 2A46     		mov	r2, r5
 736 005e 3944     		add	r1, r1, r7
 737 0060 4046     		mov	r0, r8
 738              	.LVL87:
 739 0062 FFF7FEFF 		bl	memcpy
 740              	.LVL88:
 189:Drivers/lwrb/src/lwrb/lwrb.c ****     btr -= tocopy;
 741              		.loc 1 189 0
 742 0066 E368     		ldr	r3, [r4, #12]
 743 0068 2B44     		add	r3, r3, r5
 744 006a E360     		str	r3, [r4, #12]
 745              	.LVL89:
 193:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 746              		.loc 1 193 0
 747 006c 771B     		subs	r7, r6, r5
 748              	.LVL90:
 749 006e 0DD1     		bne	.L94
 750              	.L80:
 199:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r = 0;
 751              		.loc 1 199 0
 752 0070 E268     		ldr	r2, [r4, #12]
 753 0072 A368     		ldr	r3, [r4, #8]
 754 0074 9A42     		cmp	r2, r3
 755 0076 01D3     		bcc	.L81
 200:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 756              		.loc 1 200 0
 757 0078 0023     		movs	r3, #0
 758 007a E360     		str	r3, [r4, #12]
 759              	.L81:
 202:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btr;
 760              		.loc 1 202 0
 761 007c 6369     		ldr	r3, [r4, #20]
 762 007e ABB1     		cbz	r3, .L89
 202:Drivers/lwrb/src/lwrb/lwrb.c ****     return tocopy + btr;
 763              		.loc 1 202 0 is_stmt 0 discriminator 1
 764 0080 3246     		mov	r2, r6
 765 0082 0021     		movs	r1, #0
 766 0084 2046     		mov	r0, r4
 767 0086 9847     		blx	r3
 768              	.LVL91:
 203:Drivers/lwrb/src/lwrb/lwrb.c **** }
ARM GAS  /tmp/ccIpPNgw.s 			page 21


 769              		.loc 1 203 0 is_stmt 1 discriminator 1
 770 0088 3546     		mov	r5, r6
 771              	.LVL92:
 772 008a C3E7     		b	.L78
 773              	.LVL93:
 774              	.L94:
 194:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r = btr;
 775              		.loc 1 194 0
 776 008c 3A46     		mov	r2, r7
 777 008e 6168     		ldr	r1, [r4, #4]
 778 0090 08EB0500 		add	r0, r8, r5
 779 0094 FFF7FEFF 		bl	memcpy
 780              	.LVL94:
 195:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 781              		.loc 1 195 0
 782 0098 E760     		str	r7, [r4, #12]
 783 009a E9E7     		b	.L80
 784              	.LVL95:
 785              	.L82:
 176:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 786              		.loc 1 176 0
 787 009c 0025     		movs	r5, #0
 788 009e B9E7     		b	.L78
 789              	.LVL96:
 790              	.L85:
 791 00a0 0025     		movs	r5, #0
 792 00a2 B7E7     		b	.L78
 793              	.L86:
 794 00a4 0025     		movs	r5, #0
 795 00a6 B5E7     		b	.L78
 796              	.L87:
 797 00a8 1546     		mov	r5, r2
 798 00aa B3E7     		b	.L78
 799              	.LVL97:
 800              	.L89:
 203:Drivers/lwrb/src/lwrb/lwrb.c **** }
 801              		.loc 1 203 0
 802 00ac 3546     		mov	r5, r6
 803              	.LVL98:
 804 00ae B1E7     		b	.L78
 805              	.L96:
 806              		.align	2
 807              	.L95:
 808 00b0 EFBEADDE 		.word	-559038737
 809 00b4 10415221 		.word	559038736
 810              		.cfi_endproc
 811              	.LFE5:
 813              		.section	.text.lwrb_peek,"ax",%progbits
 814              		.align	1
 815              		.global	lwrb_peek
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	lwrb_peek:
 822              	.LFB6:
 215:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t full, tocopy, r;
ARM GAS  /tmp/ccIpPNgw.s 			page 22


 823              		.loc 1 215 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              	.LVL99:
 828 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 829              	.LCFI4:
 830              		.cfi_def_cfa_offset 32
 831              		.cfi_offset 4, -32
 832              		.cfi_offset 5, -28
 833              		.cfi_offset 6, -24
 834              		.cfi_offset 7, -20
 835              		.cfi_offset 8, -16
 836              		.cfi_offset 9, -12
 837              		.cfi_offset 10, -8
 838              		.cfi_offset 14, -4
 839              	.LVL100:
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 840              		.loc 1 219 0
 841 0004 0028     		cmp	r0, #0
 842 0006 40D0     		beq	.L100
 843 0008 0446     		mov	r4, r0
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 844              		.loc 1 219 0 is_stmt 0 discriminator 1
 845 000a 0668     		ldr	r6, [r0]
 846 000c 244D     		ldr	r5, .L114
 847 000e AE42     		cmp	r6, r5
 848 0010 03D0     		beq	.L110
 220:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 849              		.loc 1 220 0 is_stmt 1
 850 0012 0025     		movs	r5, #0
 851              	.LVL101:
 852              	.L97:
 254:Drivers/lwrb/src/lwrb/lwrb.c **** 
 853              		.loc 1 254 0
 854 0014 2846     		mov	r0, r5
 855 0016 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 856              	.LVL102:
 857              	.L110:
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 858              		.loc 1 219 0 discriminator 2
 859 001a 8569     		ldr	r5, [r0, #24]
 860 001c 2148     		ldr	r0, .L114+4
 861              	.LVL103:
 862 001e 8542     		cmp	r5, r0
 863 0020 01D0     		beq	.L111
 220:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 864              		.loc 1 220 0
 865 0022 0025     		movs	r5, #0
 866 0024 F6E7     		b	.L97
 867              	.L111:
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 868              		.loc 1 219 0 discriminator 3
 869 0026 6768     		ldr	r7, [r4, #4]
 870 0028 8FB3     		cbz	r7, .L103
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 871              		.loc 1 219 0 is_stmt 0 discriminator 4
ARM GAS  /tmp/ccIpPNgw.s 			page 23


 872 002a A568     		ldr	r5, [r4, #8]
 873 002c 002D     		cmp	r5, #0
 874 002e F1D0     		beq	.L97
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 875              		.loc 1 219 0 discriminator 5
 876 0030 7AB3     		cbz	r2, .L104
 219:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 877              		.loc 1 219 0 discriminator 6
 878 0032 83B3     		cbz	r3, .L105
 879 0034 1E46     		mov	r6, r3
 880 0036 9046     		mov	r8, r2
 881 0038 8946     		mov	r9, r1
 223:Drivers/lwrb/src/lwrb/lwrb.c **** 
 882              		.loc 1 223 0 is_stmt 1
 883 003a D4F80CA0 		ldr	r10, [r4, #12]
 884              	.LVL104:
 226:Drivers/lwrb/src/lwrb/lwrb.c **** 
 885              		.loc 1 226 0
 886 003e 2046     		mov	r0, r4
 887 0040 FFF7FEFF 		bl	lwrb_get_full
 888              	.LVL105:
 229:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 889              		.loc 1 229 0
 890 0044 4845     		cmp	r0, r9
 891 0046 28D9     		bls	.L106
 232:Drivers/lwrb/src/lwrb/lwrb.c ****     full -= skip_count;
 892              		.loc 1 232 0
 893 0048 0AEB0901 		add	r1, r10, r9
 894              	.LVL106:
 233:Drivers/lwrb/src/lwrb/lwrb.c ****     if (r >= buff->size) {
 895              		.loc 1 233 0
 896 004c A0EB0903 		sub	r3, r0, r9
 897              	.LVL107:
 234:Drivers/lwrb/src/lwrb/lwrb.c ****         r -= buff->size;
 898              		.loc 1 234 0
 899 0050 8D42     		cmp	r5, r1
 900 0052 00D8     		bhi	.L99
 235:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 901              		.loc 1 235 0
 902 0054 491B     		subs	r1, r1, r5
 903              	.LVL108:
 904              	.L99:
 239:Drivers/lwrb/src/lwrb/lwrb.c ****     if (btp == 0) {
 905              		.loc 1 239 0
 906 0056 9E42     		cmp	r6, r3
 907 0058 28BF     		it	cs
 908 005a 1E46     		movcs	r6, r3
 909              	.LVL109:
 240:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 910              		.loc 1 240 0
 911 005c 0EB9     		cbnz	r6, .L112
 241:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 912              		.loc 1 241 0
 913 005e 3546     		mov	r5, r6
 914 0060 D8E7     		b	.L97
 915              	.L112:
 245:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
ARM GAS  /tmp/ccIpPNgw.s 			page 24


 916              		.loc 1 245 0
 917 0062 6D1A     		subs	r5, r5, r1
 918 0064 B542     		cmp	r5, r6
 919 0066 28BF     		it	cs
 920 0068 3546     		movcs	r5, r6
 921              	.LVL110:
 246:Drivers/lwrb/src/lwrb/lwrb.c ****     btp -= tocopy;
 922              		.loc 1 246 0
 923 006a 2A46     		mov	r2, r5
 924 006c 3944     		add	r1, r1, r7
 925              	.LVL111:
 926 006e 4046     		mov	r0, r8
 927 0070 FFF7FEFF 		bl	memcpy
 928              	.LVL112:
 250:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 929              		.loc 1 250 0
 930 0074 721B     		subs	r2, r6, r5
 931              	.LVL113:
 932 0076 01D1     		bne	.L113
 253:Drivers/lwrb/src/lwrb/lwrb.c **** }
 933              		.loc 1 253 0
 934 0078 3546     		mov	r5, r6
 935              	.LVL114:
 936 007a CBE7     		b	.L97
 937              	.LVL115:
 938              	.L113:
 251:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 939              		.loc 1 251 0
 940 007c 6168     		ldr	r1, [r4, #4]
 941 007e 08EB0500 		add	r0, r8, r5
 942 0082 FFF7FEFF 		bl	memcpy
 943              	.LVL116:
 253:Drivers/lwrb/src/lwrb/lwrb.c **** }
 944              		.loc 1 253 0
 945 0086 3546     		mov	r5, r6
 946              	.LVL117:
 947 0088 C4E7     		b	.L97
 948              	.LVL118:
 949              	.L100:
 220:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 950              		.loc 1 220 0
 951 008a 0025     		movs	r5, #0
 952 008c C2E7     		b	.L97
 953              	.LVL119:
 954              	.L103:
 955 008e 0025     		movs	r5, #0
 956 0090 C0E7     		b	.L97
 957              	.L104:
 958 0092 0025     		movs	r5, #0
 959 0094 BEE7     		b	.L97
 960              	.L105:
 961 0096 1D46     		mov	r5, r3
 962 0098 BCE7     		b	.L97
 963              	.LVL120:
 964              	.L106:
 230:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 965              		.loc 1 230 0
ARM GAS  /tmp/ccIpPNgw.s 			page 25


 966 009a 0025     		movs	r5, #0
 967 009c BAE7     		b	.L97
 968              	.L115:
 969 009e 00BF     		.align	2
 970              	.L114:
 971 00a0 EFBEADDE 		.word	-559038737
 972 00a4 10415221 		.word	559038736
 973              		.cfi_endproc
 974              	.LFE6:
 976              		.section	.text.lwrb_reset,"ax",%progbits
 977              		.align	1
 978              		.global	lwrb_reset
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu fpv4-sp-d16
 984              	lwrb_reset:
 985              	.LFB9:
 309:Drivers/lwrb/src/lwrb/lwrb.c **** 
 310:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 311:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Resets buffer to default values. Buffer size is not modified
 312:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 313:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 314:Drivers/lwrb/src/lwrb/lwrb.c **** void
 315:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_reset(LWRB_VOLATILE lwrb_t* buff) {
 986              		.loc 1 315 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              	.LVL121:
 316:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 991              		.loc 1 316 0
 992 0000 18B1     		cbz	r0, .L119
 993              		.loc 1 316 0 is_stmt 0 discriminator 1
 994 0002 0168     		ldr	r1, [r0]
 995 0004 0B4A     		ldr	r2, .L123
 996 0006 9142     		cmp	r1, r2
 997 0008 00D0     		beq	.L122
 998              	.L119:
 999 000a 7047     		bx	lr
 1000              	.L122:
 1001              		.loc 1 316 0 discriminator 2
 1002 000c 8169     		ldr	r1, [r0, #24]
 1003 000e 0A4A     		ldr	r2, .L123+4
 1004 0010 9142     		cmp	r1, r2
 1005 0012 FAD1     		bne	.L119
 1006              		.loc 1 316 0 discriminator 3
 1007 0014 4268     		ldr	r2, [r0, #4]
 1008 0016 002A     		cmp	r2, #0
 1009 0018 F7D0     		beq	.L119
 1010              		.loc 1 316 0 discriminator 4
 1011 001a 8268     		ldr	r2, [r0, #8]
 1012 001c 002A     		cmp	r2, #0
 1013 001e F4D0     		beq	.L119
 315:Drivers/lwrb/src/lwrb/lwrb.c ****     if (BUF_IS_VALID(buff)) {
 1014              		.loc 1 315 0 is_stmt 1
 1015 0020 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccIpPNgw.s 			page 26


 1016              	.LCFI5:
 1017              		.cfi_def_cfa_offset 8
 1018              		.cfi_offset 4, -8
 1019              		.cfi_offset 14, -4
 317:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w = 0;
 1020              		.loc 1 317 0
 1021 0022 0022     		movs	r2, #0
 1022 0024 0261     		str	r2, [r0, #16]
 318:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r = 0;
 1023              		.loc 1 318 0
 1024 0026 C260     		str	r2, [r0, #12]
 319:Drivers/lwrb/src/lwrb/lwrb.c ****         BUF_SEND_EVT(buff, LWRB_EVT_RESET, 0);
 1025              		.loc 1 319 0
 1026 0028 4469     		ldr	r4, [r0, #20]
 1027 002a 0CB1     		cbz	r4, .L116
 1028              		.loc 1 319 0 is_stmt 0 discriminator 1
 1029 002c 0221     		movs	r1, #2
 1030 002e A047     		blx	r4
 1031              	.LVL122:
 1032              	.L116:
 320:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 321:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1033              		.loc 1 321 0 is_stmt 1
 1034 0030 10BD     		pop	{r4, pc}
 1035              	.L124:
 1036 0032 00BF     		.align	2
 1037              	.L123:
 1038 0034 EFBEADDE 		.word	-559038737
 1039 0038 10415221 		.word	559038736
 1040              		.cfi_endproc
 1041              	.LFE9:
 1043              		.section	.text.lwrb_get_linear_block_read_address,"ax",%progbits
 1044              		.align	1
 1045              		.global	lwrb_get_linear_block_read_address
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1049              		.fpu fpv4-sp-d16
 1051              	lwrb_get_linear_block_read_address:
 1052              	.LFB10:
 322:Drivers/lwrb/src/lwrb/lwrb.c **** 
 323:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 324:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get linear address for buffer for fast read
 325:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 326:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Linear buffer start address
 327:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 328:Drivers/lwrb/src/lwrb/lwrb.c **** void*
 329:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 1053              		.loc 1 329 0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 0
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057              		@ link register save eliminated.
 1058              	.LVL123:
 330:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 1059              		.loc 1 330 0
 1060 0000 0346     		mov	r3, r0
ARM GAS  /tmp/ccIpPNgw.s 			page 27


 1061 0002 70B1     		cbz	r0, .L127
 1062              		.loc 1 330 0 is_stmt 0 discriminator 1
 1063 0004 0168     		ldr	r1, [r0]
 1064 0006 0C4A     		ldr	r2, .L132
 1065 0008 9142     		cmp	r1, r2
 1066 000a 0CD1     		bne	.L128
 1067              		.loc 1 330 0 discriminator 2
 1068 000c 8169     		ldr	r1, [r0, #24]
 1069 000e 0B4A     		ldr	r2, .L132+4
 1070 0010 9142     		cmp	r1, r2
 1071 0012 0AD1     		bne	.L129
 1072              		.loc 1 330 0 discriminator 3
 1073 0014 4068     		ldr	r0, [r0, #4]
 1074              	.LVL124:
 1075 0016 50B1     		cbz	r0, .L130
 1076              		.loc 1 330 0 discriminator 4
 1077 0018 9A68     		ldr	r2, [r3, #8]
 1078 001a 52B1     		cbz	r2, .L131
 331:Drivers/lwrb/src/lwrb/lwrb.c ****         return NULL;
 332:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 333:Drivers/lwrb/src/lwrb/lwrb.c ****     return &buff->buff[buff->r];
 1079              		.loc 1 333 0 is_stmt 1
 1080 001c DB68     		ldr	r3, [r3, #12]
 1081              	.LVL125:
 1082 001e 1844     		add	r0, r0, r3
 1083 0020 7047     		bx	lr
 1084              	.LVL126:
 1085              	.L127:
 331:Drivers/lwrb/src/lwrb/lwrb.c ****         return NULL;
 1086              		.loc 1 331 0
 1087 0022 0020     		movs	r0, #0
 1088              	.LVL127:
 1089 0024 7047     		bx	lr
 1090              	.LVL128:
 1091              	.L128:
 1092 0026 0020     		movs	r0, #0
 1093              	.LVL129:
 1094 0028 7047     		bx	lr
 1095              	.LVL130:
 1096              	.L129:
 1097 002a 0020     		movs	r0, #0
 1098              	.LVL131:
 1099 002c 7047     		bx	lr
 1100              	.L130:
 1101 002e 0020     		movs	r0, #0
 1102 0030 7047     		bx	lr
 1103              	.L131:
 1104 0032 0020     		movs	r0, #0
 334:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1105              		.loc 1 334 0
 1106 0034 7047     		bx	lr
 1107              	.L133:
 1108 0036 00BF     		.align	2
 1109              	.L132:
 1110 0038 EFBEADDE 		.word	-559038737
 1111 003c 10415221 		.word	559038736
 1112              		.cfi_endproc
ARM GAS  /tmp/ccIpPNgw.s 			page 28


 1113              	.LFE10:
 1115              		.section	.text.lwrb_get_linear_block_read_length,"ax",%progbits
 1116              		.align	1
 1117              		.global	lwrb_get_linear_block_read_length
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu fpv4-sp-d16
 1123              	lwrb_get_linear_block_read_length:
 1124              	.LFB11:
 335:Drivers/lwrb/src/lwrb/lwrb.c **** 
 336:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 337:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get length of linear block address before it overflows for read operation
 338:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 339:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Linear buffer size in units of bytes for read operation
 340:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 341:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 342:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 1125              		.loc 1 342 0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 1130              	.LVL132:
 343:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t w, r, len;
 344:Drivers/lwrb/src/lwrb/lwrb.c **** 
 345:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 1131              		.loc 1 345 0
 1132 0000 0346     		mov	r3, r0
 1133 0002 C8B1     		cbz	r0, .L137
 1134              		.loc 1 345 0 is_stmt 0 discriminator 1
 1135 0004 0168     		ldr	r1, [r0]
 1136 0006 0F4A     		ldr	r2, .L145
 1137 0008 9142     		cmp	r1, r2
 1138 000a 01D0     		beq	.L142
 346:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1139              		.loc 1 346 0 is_stmt 1
 1140 000c 0020     		movs	r0, #0
 1141              	.LVL133:
 1142 000e 7047     		bx	lr
 1143              	.LVL134:
 1144              	.L142:
 345:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1145              		.loc 1 345 0 discriminator 2
 1146 0010 8169     		ldr	r1, [r0, #24]
 1147 0012 0D4A     		ldr	r2, .L145+4
 1148 0014 9142     		cmp	r1, r2
 1149 0016 01D0     		beq	.L143
 1150              		.loc 1 346 0
 1151 0018 0020     		movs	r0, #0
 1152              	.LVL135:
 1153 001a 7047     		bx	lr
 1154              	.LVL136:
 1155              	.L143:
 345:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1156              		.loc 1 345 0 discriminator 3
 1157 001c 4268     		ldr	r2, [r0, #4]
ARM GAS  /tmp/ccIpPNgw.s 			page 29


 1158 001e 6AB1     		cbz	r2, .L140
 345:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1159              		.loc 1 345 0 is_stmt 0 discriminator 4
 1160 0020 8068     		ldr	r0, [r0, #8]
 1161              	.LVL137:
 1162 0022 70B1     		cbz	r0, .L134
 347:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 348:Drivers/lwrb/src/lwrb/lwrb.c **** 
 349:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Use temporary values in case they are changed during operations */
 350:Drivers/lwrb/src/lwrb/lwrb.c ****     w = buff->w;
 1163              		.loc 1 350 0 is_stmt 1
 1164 0024 1A69     		ldr	r2, [r3, #16]
 1165              	.LVL138:
 351:Drivers/lwrb/src/lwrb/lwrb.c ****     r = buff->r;
 1166              		.loc 1 351 0
 1167 0026 DB68     		ldr	r3, [r3, #12]
 1168              	.LVL139:
 352:Drivers/lwrb/src/lwrb/lwrb.c ****     if (w > r) {
 1169              		.loc 1 352 0
 1170 0028 9A42     		cmp	r2, r3
 1171 002a 03D8     		bhi	.L144
 353:Drivers/lwrb/src/lwrb/lwrb.c ****         len = w - r;
 354:Drivers/lwrb/src/lwrb/lwrb.c ****     } else if (r > w) {
 1172              		.loc 1 354 0
 1173 002c 9A42     		cmp	r2, r3
 1174 002e 07D2     		bcs	.L141
 355:Drivers/lwrb/src/lwrb/lwrb.c ****         len = buff->size - r;
 1175              		.loc 1 355 0
 1176 0030 C01A     		subs	r0, r0, r3
 1177              	.LVL140:
 1178 0032 7047     		bx	lr
 1179              	.LVL141:
 1180              	.L144:
 353:Drivers/lwrb/src/lwrb/lwrb.c ****         len = w - r;
 1181              		.loc 1 353 0
 1182 0034 D01A     		subs	r0, r2, r3
 1183              	.LVL142:
 1184 0036 7047     		bx	lr
 1185              	.LVL143:
 1186              	.L137:
 346:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1187              		.loc 1 346 0
 1188 0038 0020     		movs	r0, #0
 1189              	.LVL144:
 1190 003a 7047     		bx	lr
 1191              	.LVL145:
 1192              	.L140:
 1193 003c 0020     		movs	r0, #0
 1194              	.LVL146:
 1195 003e 7047     		bx	lr
 1196              	.LVL147:
 1197              	.L141:
 356:Drivers/lwrb/src/lwrb/lwrb.c ****     } else {
 357:Drivers/lwrb/src/lwrb/lwrb.c ****         len = 0;
 1198              		.loc 1 357 0
 1199 0040 0020     		movs	r0, #0
 1200              	.LVL148:
ARM GAS  /tmp/ccIpPNgw.s 			page 30


 1201              	.L134:
 358:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 359:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 360:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1202              		.loc 1 360 0
 1203 0042 7047     		bx	lr
 1204              	.L146:
 1205              		.align	2
 1206              	.L145:
 1207 0044 EFBEADDE 		.word	-559038737
 1208 0048 10415221 		.word	559038736
 1209              		.cfi_endproc
 1210              	.LFE11:
 1212              		.section	.text.lwrb_skip,"ax",%progbits
 1213              		.align	1
 1214              		.global	lwrb_skip
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	lwrb_skip:
 1221              	.LFB12:
 361:Drivers/lwrb/src/lwrb/lwrb.c **** 
 362:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 363:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Skip (ignore; advance read pointer) buffer data
 364:Drivers/lwrb/src/lwrb/lwrb.c ****  * Marks data as read in the buffer and increases free memory for up to `len` bytes
 365:Drivers/lwrb/src/lwrb/lwrb.c ****  *
 366:Drivers/lwrb/src/lwrb/lwrb.c ****  * \note            Useful at the end of streaming transfer such as DMA
 367:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 368:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       len: Number of bytes to skip and mark as read
 369:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes skipped
 370:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 371:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 372:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 1222              		.loc 1 372 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              	.LVL149:
 1227 0000 70B5     		push	{r4, r5, r6, lr}
 1228              	.LCFI6:
 1229              		.cfi_def_cfa_offset 16
 1230              		.cfi_offset 4, -16
 1231              		.cfi_offset 5, -12
 1232              		.cfi_offset 6, -8
 1233              		.cfi_offset 14, -4
 373:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t full;
 374:Drivers/lwrb/src/lwrb/lwrb.c **** 
 375:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff) || len == 0) {
 1234              		.loc 1 375 0
 1235 0002 48B3     		cbz	r0, .L150
 1236 0004 0446     		mov	r4, r0
 1237              		.loc 1 375 0 is_stmt 0 discriminator 1
 1238 0006 0068     		ldr	r0, [r0]
 1239              	.LVL150:
 1240 0008 174A     		ldr	r2, .L159
 1241 000a 9042     		cmp	r0, r2
ARM GAS  /tmp/ccIpPNgw.s 			page 31


 1242 000c 02D0     		beq	.L157
 376:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1243              		.loc 1 376 0 is_stmt 1
 1244 000e 0025     		movs	r5, #0
 1245              	.LVL151:
 1246              	.L147:
 377:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 378:Drivers/lwrb/src/lwrb/lwrb.c **** 
 379:Drivers/lwrb/src/lwrb/lwrb.c ****     full = lwrb_get_full(buff);
 380:Drivers/lwrb/src/lwrb/lwrb.c ****     len = BUF_MIN(len, full);
 381:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->r += len;
 382:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->r >= buff->size) {
 383:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r -= buff->size;
 384:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 385:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 386:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 387:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1247              		.loc 1 387 0
 1248 0010 2846     		mov	r0, r5
 1249 0012 70BD     		pop	{r4, r5, r6, pc}
 1250              	.LVL152:
 1251              	.L157:
 375:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1252              		.loc 1 375 0 discriminator 2
 1253 0014 A069     		ldr	r0, [r4, #24]
 1254 0016 154A     		ldr	r2, .L159+4
 1255 0018 9042     		cmp	r0, r2
 1256 001a 01D0     		beq	.L158
 376:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1257              		.loc 1 376 0
 1258 001c 0025     		movs	r5, #0
 1259 001e F7E7     		b	.L147
 1260              	.L158:
 375:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1261              		.loc 1 375 0 discriminator 3
 1262 0020 6268     		ldr	r2, [r4, #4]
 1263 0022 DAB1     		cbz	r2, .L153
 375:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1264              		.loc 1 375 0 is_stmt 0 discriminator 4
 1265 0024 A568     		ldr	r5, [r4, #8]
 1266 0026 002D     		cmp	r5, #0
 1267 0028 F2D0     		beq	.L147
 375:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1268              		.loc 1 375 0 discriminator 5
 1269 002a C9B1     		cbz	r1, .L154
 1270 002c 0E46     		mov	r6, r1
 379:Drivers/lwrb/src/lwrb/lwrb.c ****     len = BUF_MIN(len, full);
 1271              		.loc 1 379 0 is_stmt 1
 1272 002e 2046     		mov	r0, r4
 1273 0030 FFF7FEFF 		bl	lwrb_get_full
 1274              	.LVL153:
 380:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->r += len;
 1275              		.loc 1 380 0
 1276 0034 8642     		cmp	r6, r0
 1277 0036 28BF     		it	cs
 1278 0038 0646     		movcs	r6, r0
 1279              	.LVL154:
ARM GAS  /tmp/ccIpPNgw.s 			page 32


 381:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->r >= buff->size) {
 1280              		.loc 1 381 0
 1281 003a E368     		ldr	r3, [r4, #12]
 1282 003c 3344     		add	r3, r3, r6
 1283 003e E360     		str	r3, [r4, #12]
 382:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->r -= buff->size;
 1284              		.loc 1 382 0
 1285 0040 9D42     		cmp	r5, r3
 1286 0042 01D8     		bhi	.L149
 383:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1287              		.loc 1 383 0
 1288 0044 5B1B     		subs	r3, r3, r5
 1289 0046 E360     		str	r3, [r4, #12]
 1290              	.L149:
 385:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 1291              		.loc 1 385 0
 1292 0048 6369     		ldr	r3, [r4, #20]
 1293 004a 5BB1     		cbz	r3, .L155
 385:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 1294              		.loc 1 385 0 is_stmt 0 discriminator 1
 1295 004c 3246     		mov	r2, r6
 1296 004e 0021     		movs	r1, #0
 1297 0050 2046     		mov	r0, r4
 1298              	.LVL155:
 1299 0052 9847     		blx	r3
 1300              	.LVL156:
 386:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1301              		.loc 1 386 0 is_stmt 1 discriminator 1
 1302 0054 3546     		mov	r5, r6
 1303 0056 DBE7     		b	.L147
 1304              	.LVL157:
 1305              	.L150:
 376:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1306              		.loc 1 376 0
 1307 0058 0025     		movs	r5, #0
 1308 005a D9E7     		b	.L147
 1309              	.LVL158:
 1310              	.L153:
 1311 005c 0025     		movs	r5, #0
 1312 005e D7E7     		b	.L147
 1313              	.L154:
 1314 0060 0D46     		mov	r5, r1
 1315 0062 D5E7     		b	.L147
 1316              	.LVL159:
 1317              	.L155:
 386:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1318              		.loc 1 386 0
 1319 0064 3546     		mov	r5, r6
 1320 0066 D3E7     		b	.L147
 1321              	.L160:
 1322              		.align	2
 1323              	.L159:
 1324 0068 EFBEADDE 		.word	-559038737
 1325 006c 10415221 		.word	559038736
 1326              		.cfi_endproc
 1327              	.LFE12:
 1329              		.section	.text.lwrb_get_linear_block_write_address,"ax",%progbits
ARM GAS  /tmp/ccIpPNgw.s 			page 33


 1330              		.align	1
 1331              		.global	lwrb_get_linear_block_write_address
 1332              		.syntax unified
 1333              		.thumb
 1334              		.thumb_func
 1335              		.fpu fpv4-sp-d16
 1337              	lwrb_get_linear_block_write_address:
 1338              	.LFB13:
 388:Drivers/lwrb/src/lwrb/lwrb.c **** 
 389:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 390:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get linear address for buffer for fast read
 391:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 392:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Linear buffer start address
 393:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 394:Drivers/lwrb/src/lwrb/lwrb.c **** void*
 395:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_linear_block_write_address(LWRB_VOLATILE lwrb_t* buff) {
 1339              		.loc 1 395 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 0
 1342              		@ frame_needed = 0, uses_anonymous_args = 0
 1343              		@ link register save eliminated.
 1344              	.LVL160:
 396:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 1345              		.loc 1 396 0
 1346 0000 0346     		mov	r3, r0
 1347 0002 70B1     		cbz	r0, .L163
 1348              		.loc 1 396 0 is_stmt 0 discriminator 1
 1349 0004 0168     		ldr	r1, [r0]
 1350 0006 0C4A     		ldr	r2, .L168
 1351 0008 9142     		cmp	r1, r2
 1352 000a 0CD1     		bne	.L164
 1353              		.loc 1 396 0 discriminator 2
 1354 000c 8169     		ldr	r1, [r0, #24]
 1355 000e 0B4A     		ldr	r2, .L168+4
 1356 0010 9142     		cmp	r1, r2
 1357 0012 0AD1     		bne	.L165
 1358              		.loc 1 396 0 discriminator 3
 1359 0014 4068     		ldr	r0, [r0, #4]
 1360              	.LVL161:
 1361 0016 50B1     		cbz	r0, .L166
 1362              		.loc 1 396 0 discriminator 4
 1363 0018 9A68     		ldr	r2, [r3, #8]
 1364 001a 52B1     		cbz	r2, .L167
 397:Drivers/lwrb/src/lwrb/lwrb.c ****         return NULL;
 398:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 399:Drivers/lwrb/src/lwrb/lwrb.c ****     return &buff->buff[buff->w];
 1365              		.loc 1 399 0 is_stmt 1
 1366 001c 1B69     		ldr	r3, [r3, #16]
 1367              	.LVL162:
 1368 001e 1844     		add	r0, r0, r3
 1369 0020 7047     		bx	lr
 1370              	.LVL163:
 1371              	.L163:
 397:Drivers/lwrb/src/lwrb/lwrb.c ****         return NULL;
 1372              		.loc 1 397 0
 1373 0022 0020     		movs	r0, #0
 1374              	.LVL164:
ARM GAS  /tmp/ccIpPNgw.s 			page 34


 1375 0024 7047     		bx	lr
 1376              	.LVL165:
 1377              	.L164:
 1378 0026 0020     		movs	r0, #0
 1379              	.LVL166:
 1380 0028 7047     		bx	lr
 1381              	.LVL167:
 1382              	.L165:
 1383 002a 0020     		movs	r0, #0
 1384              	.LVL168:
 1385 002c 7047     		bx	lr
 1386              	.L166:
 1387 002e 0020     		movs	r0, #0
 1388 0030 7047     		bx	lr
 1389              	.L167:
 1390 0032 0020     		movs	r0, #0
 400:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1391              		.loc 1 400 0
 1392 0034 7047     		bx	lr
 1393              	.L169:
 1394 0036 00BF     		.align	2
 1395              	.L168:
 1396 0038 EFBEADDE 		.word	-559038737
 1397 003c 10415221 		.word	559038736
 1398              		.cfi_endproc
 1399              	.LFE13:
 1401              		.section	.text.lwrb_get_linear_block_write_length,"ax",%progbits
 1402              		.align	1
 1403              		.global	lwrb_get_linear_block_write_length
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	lwrb_get_linear_block_write_length:
 1410              	.LFB14:
 401:Drivers/lwrb/src/lwrb/lwrb.c **** 
 402:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 403:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Get length of linear block address before it overflows for write operation
 404:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 405:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Linear buffer size in units of bytes for write operation
 406:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 407:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 408:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_get_linear_block_write_length(LWRB_VOLATILE lwrb_t* buff) {
 1411              		.loc 1 408 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 1416              	.LVL169:
 409:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t w, r, len;
 410:Drivers/lwrb/src/lwrb/lwrb.c **** 
 411:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff)) {
 1417              		.loc 1 411 0
 1418 0000 0346     		mov	r3, r0
 1419 0002 D0B1     		cbz	r0, .L173
 1420              		.loc 1 411 0 is_stmt 0 discriminator 1
 1421 0004 0168     		ldr	r1, [r0]
ARM GAS  /tmp/ccIpPNgw.s 			page 35


 1422 0006 0F4A     		ldr	r2, .L179
 1423 0008 9142     		cmp	r1, r2
 1424 000a 01D0     		beq	.L177
 412:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1425              		.loc 1 412 0 is_stmt 1
 1426 000c 0020     		movs	r0, #0
 1427              	.LVL170:
 1428 000e 7047     		bx	lr
 1429              	.LVL171:
 1430              	.L177:
 411:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1431              		.loc 1 411 0 discriminator 2
 1432 0010 8169     		ldr	r1, [r0, #24]
 1433 0012 0D4A     		ldr	r2, .L179+4
 1434 0014 9142     		cmp	r1, r2
 1435 0016 01D0     		beq	.L178
 1436              		.loc 1 412 0
 1437 0018 0020     		movs	r0, #0
 1438              	.LVL172:
 1439 001a 7047     		bx	lr
 1440              	.LVL173:
 1441              	.L178:
 411:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1442              		.loc 1 411 0 discriminator 3
 1443 001c 4268     		ldr	r2, [r0, #4]
 1444 001e 72B1     		cbz	r2, .L176
 411:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1445              		.loc 1 411 0 is_stmt 0 discriminator 4
 1446 0020 8068     		ldr	r0, [r0, #8]
 1447              	.LVL174:
 1448 0022 68B1     		cbz	r0, .L170
 413:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 414:Drivers/lwrb/src/lwrb/lwrb.c **** 
 415:Drivers/lwrb/src/lwrb/lwrb.c ****     /* Use temporary values in case they are changed during operations */
 416:Drivers/lwrb/src/lwrb/lwrb.c ****     w = buff->w;
 1449              		.loc 1 416 0 is_stmt 1
 1450 0024 1A69     		ldr	r2, [r3, #16]
 1451              	.LVL175:
 417:Drivers/lwrb/src/lwrb/lwrb.c ****     r = buff->r;
 1452              		.loc 1 417 0
 1453 0026 DB68     		ldr	r3, [r3, #12]
 1454              	.LVL176:
 418:Drivers/lwrb/src/lwrb/lwrb.c ****     if (w >= r) {
 1455              		.loc 1 418 0
 1456 0028 9A42     		cmp	r2, r3
 1457 002a 03D3     		bcc	.L172
 419:Drivers/lwrb/src/lwrb/lwrb.c ****         len = buff->size - w;
 1458              		.loc 1 419 0
 1459 002c 801A     		subs	r0, r0, r2
 1460              	.LVL177:
 420:Drivers/lwrb/src/lwrb/lwrb.c ****         /*
 421:Drivers/lwrb/src/lwrb/lwrb.c ****          * When read pointer is 0,
 422:Drivers/lwrb/src/lwrb/lwrb.c ****          * maximal length is one less as if too many bytes
 423:Drivers/lwrb/src/lwrb/lwrb.c ****          * are written, buffer would be considered empty again (r == w)
 424:Drivers/lwrb/src/lwrb/lwrb.c ****          */
 425:Drivers/lwrb/src/lwrb/lwrb.c ****         if (r == 0) {
 1461              		.loc 1 425 0
ARM GAS  /tmp/ccIpPNgw.s 			page 36


 1462 002e 3BB9     		cbnz	r3, .L170
 426:Drivers/lwrb/src/lwrb/lwrb.c ****             /*
 427:Drivers/lwrb/src/lwrb/lwrb.c ****              * Cannot overflow:
 428:Drivers/lwrb/src/lwrb/lwrb.c ****              * - If r is not 0, statement does not get called
 429:Drivers/lwrb/src/lwrb/lwrb.c ****              * - buff->size cannot be 0 and if r is 0, len is greater 0
 430:Drivers/lwrb/src/lwrb/lwrb.c ****              */
 431:Drivers/lwrb/src/lwrb/lwrb.c ****             --len;
 1463              		.loc 1 431 0
 1464 0030 0138     		subs	r0, r0, #1
 1465              	.LVL178:
 1466 0032 7047     		bx	lr
 1467              	.LVL179:
 1468              	.L172:
 432:Drivers/lwrb/src/lwrb/lwrb.c ****         }
 433:Drivers/lwrb/src/lwrb/lwrb.c ****     } else {
 434:Drivers/lwrb/src/lwrb/lwrb.c ****         len = r - w - 1;
 1469              		.loc 1 434 0
 1470 0034 981A     		subs	r0, r3, r2
 1471 0036 0138     		subs	r0, r0, #1
 1472              	.LVL180:
 1473 0038 7047     		bx	lr
 1474              	.LVL181:
 1475              	.L173:
 412:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1476              		.loc 1 412 0
 1477 003a 0020     		movs	r0, #0
 1478              	.LVL182:
 1479 003c 7047     		bx	lr
 1480              	.LVL183:
 1481              	.L176:
 1482 003e 0020     		movs	r0, #0
 1483              	.LVL184:
 1484              	.L170:
 435:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 436:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 437:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1485              		.loc 1 437 0
 1486 0040 7047     		bx	lr
 1487              	.L180:
 1488 0042 00BF     		.align	2
 1489              	.L179:
 1490 0044 EFBEADDE 		.word	-559038737
 1491 0048 10415221 		.word	559038736
 1492              		.cfi_endproc
 1493              	.LFE14:
 1495              		.section	.text.lwrb_advance,"ax",%progbits
 1496              		.align	1
 1497              		.global	lwrb_advance
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
 1503              	lwrb_advance:
 1504              	.LFB15:
 438:Drivers/lwrb/src/lwrb/lwrb.c **** 
 439:Drivers/lwrb/src/lwrb/lwrb.c **** /**
 440:Drivers/lwrb/src/lwrb/lwrb.c ****  * \brief           Advance write pointer in the buffer.
ARM GAS  /tmp/ccIpPNgw.s 			page 37


 441:Drivers/lwrb/src/lwrb/lwrb.c ****  * Similar to skip function but modifies write pointer instead of read
 442:Drivers/lwrb/src/lwrb/lwrb.c ****  *
 443:Drivers/lwrb/src/lwrb/lwrb.c ****  * \note            Useful when hardware is writing to buffer and application needs to increase num
 444:Drivers/lwrb/src/lwrb/lwrb.c ****  *                      of bytes written to buffer by hardware
 445:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       buff: Buffer handle
 446:Drivers/lwrb/src/lwrb/lwrb.c ****  * \param[in]       len: Number of bytes to advance
 447:Drivers/lwrb/src/lwrb/lwrb.c ****  * \return          Number of bytes advanced for write operation
 448:Drivers/lwrb/src/lwrb/lwrb.c ****  */
 449:Drivers/lwrb/src/lwrb/lwrb.c **** size_t
 450:Drivers/lwrb/src/lwrb/lwrb.c **** lwrb_advance(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 1505              		.loc 1 450 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              	.LVL185:
 1510 0000 70B5     		push	{r4, r5, r6, lr}
 1511              	.LCFI7:
 1512              		.cfi_def_cfa_offset 16
 1513              		.cfi_offset 4, -16
 1514              		.cfi_offset 5, -12
 1515              		.cfi_offset 6, -8
 1516              		.cfi_offset 14, -4
 451:Drivers/lwrb/src/lwrb/lwrb.c ****     size_t free;
 452:Drivers/lwrb/src/lwrb/lwrb.c **** 
 453:Drivers/lwrb/src/lwrb/lwrb.c ****     if (!BUF_IS_VALID(buff) || len == 0) {
 1517              		.loc 1 453 0
 1518 0002 48B3     		cbz	r0, .L184
 1519 0004 0446     		mov	r4, r0
 1520              		.loc 1 453 0 is_stmt 0 discriminator 1
 1521 0006 0068     		ldr	r0, [r0]
 1522              	.LVL186:
 1523 0008 174A     		ldr	r2, .L193
 1524 000a 9042     		cmp	r0, r2
 1525 000c 02D0     		beq	.L191
 454:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1526              		.loc 1 454 0 is_stmt 1
 1527 000e 0025     		movs	r5, #0
 1528              	.LVL187:
 1529              	.L181:
 455:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 456:Drivers/lwrb/src/lwrb/lwrb.c **** 
 457:Drivers/lwrb/src/lwrb/lwrb.c ****     free = lwrb_get_free(buff);
 458:Drivers/lwrb/src/lwrb/lwrb.c ****     len = BUF_MIN(len, free);
 459:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->w += len;
 460:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->w >= buff->size) {
 461:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w -= buff->size;
 462:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 463:Drivers/lwrb/src/lwrb/lwrb.c ****     BUF_SEND_EVT(buff, LWRB_EVT_WRITE, len);
 464:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 465:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1530              		.loc 1 465 0
 1531 0010 2846     		mov	r0, r5
 1532 0012 70BD     		pop	{r4, r5, r6, pc}
 1533              	.LVL188:
 1534              	.L191:
 453:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1535              		.loc 1 453 0 discriminator 2
ARM GAS  /tmp/ccIpPNgw.s 			page 38


 1536 0014 A069     		ldr	r0, [r4, #24]
 1537 0016 154A     		ldr	r2, .L193+4
 1538 0018 9042     		cmp	r0, r2
 1539 001a 01D0     		beq	.L192
 454:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1540              		.loc 1 454 0
 1541 001c 0025     		movs	r5, #0
 1542 001e F7E7     		b	.L181
 1543              	.L192:
 453:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1544              		.loc 1 453 0 discriminator 3
 1545 0020 6268     		ldr	r2, [r4, #4]
 1546 0022 DAB1     		cbz	r2, .L187
 453:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1547              		.loc 1 453 0 is_stmt 0 discriminator 4
 1548 0024 A568     		ldr	r5, [r4, #8]
 1549 0026 002D     		cmp	r5, #0
 1550 0028 F2D0     		beq	.L181
 453:Drivers/lwrb/src/lwrb/lwrb.c ****         return 0;
 1551              		.loc 1 453 0 discriminator 5
 1552 002a C9B1     		cbz	r1, .L188
 1553 002c 0E46     		mov	r6, r1
 457:Drivers/lwrb/src/lwrb/lwrb.c ****     len = BUF_MIN(len, free);
 1554              		.loc 1 457 0 is_stmt 1
 1555 002e 2046     		mov	r0, r4
 1556 0030 FFF7FEFF 		bl	lwrb_get_free
 1557              	.LVL189:
 458:Drivers/lwrb/src/lwrb/lwrb.c ****     buff->w += len;
 1558              		.loc 1 458 0
 1559 0034 8642     		cmp	r6, r0
 1560 0036 28BF     		it	cs
 1561 0038 0646     		movcs	r6, r0
 1562              	.LVL190:
 459:Drivers/lwrb/src/lwrb/lwrb.c ****     if (buff->w >= buff->size) {
 1563              		.loc 1 459 0
 1564 003a 2369     		ldr	r3, [r4, #16]
 1565 003c 3344     		add	r3, r3, r6
 1566 003e 2361     		str	r3, [r4, #16]
 460:Drivers/lwrb/src/lwrb/lwrb.c ****         buff->w -= buff->size;
 1567              		.loc 1 460 0
 1568 0040 9D42     		cmp	r5, r3
 1569 0042 01D8     		bhi	.L183
 461:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1570              		.loc 1 461 0
 1571 0044 5B1B     		subs	r3, r3, r5
 1572 0046 2361     		str	r3, [r4, #16]
 1573              	.L183:
 463:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 1574              		.loc 1 463 0
 1575 0048 6369     		ldr	r3, [r4, #20]
 1576 004a 5BB1     		cbz	r3, .L189
 463:Drivers/lwrb/src/lwrb/lwrb.c ****     return len;
 1577              		.loc 1 463 0 is_stmt 0 discriminator 1
 1578 004c 3246     		mov	r2, r6
 1579 004e 0121     		movs	r1, #1
 1580 0050 2046     		mov	r0, r4
 1581              	.LVL191:
ARM GAS  /tmp/ccIpPNgw.s 			page 39


 1582 0052 9847     		blx	r3
 1583              	.LVL192:
 464:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1584              		.loc 1 464 0 is_stmt 1 discriminator 1
 1585 0054 3546     		mov	r5, r6
 1586 0056 DBE7     		b	.L181
 1587              	.LVL193:
 1588              	.L184:
 454:Drivers/lwrb/src/lwrb/lwrb.c ****     }
 1589              		.loc 1 454 0
 1590 0058 0025     		movs	r5, #0
 1591 005a D9E7     		b	.L181
 1592              	.LVL194:
 1593              	.L187:
 1594 005c 0025     		movs	r5, #0
 1595 005e D7E7     		b	.L181
 1596              	.L188:
 1597 0060 0D46     		mov	r5, r1
 1598 0062 D5E7     		b	.L181
 1599              	.LVL195:
 1600              	.L189:
 464:Drivers/lwrb/src/lwrb/lwrb.c **** }
 1601              		.loc 1 464 0
 1602 0064 3546     		mov	r5, r6
 1603 0066 D3E7     		b	.L181
 1604              	.L194:
 1605              		.align	2
 1606              	.L193:
 1607 0068 EFBEADDE 		.word	-559038737
 1608 006c 10415221 		.word	559038736
 1609              		.cfi_endproc
 1610              	.LFE15:
 1612              		.text
 1613              	.Letext0:
 1614              		.file 2 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1615              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1616              		.file 4 "/usr/include/newlib/sys/lock.h"
 1617              		.file 5 "/usr/include/newlib/sys/_types.h"
 1618              		.file 6 "/usr/include/newlib/sys/reent.h"
 1619              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 1620              		.file 8 "Drivers/lwrb/src/include/lwrb/lwrb.h"
 1621              		.file 9 "<built-in>"
ARM GAS  /tmp/ccIpPNgw.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 lwrb.c
     /tmp/ccIpPNgw.s:18     .text.lwrb_init:0000000000000000 $t
     /tmp/ccIpPNgw.s:25     .text.lwrb_init:0000000000000000 lwrb_init
     /tmp/ccIpPNgw.s:92     .text.lwrb_init:0000000000000034 $d
     /tmp/ccIpPNgw.s:98     .text.lwrb_is_ready:0000000000000000 $t
     /tmp/ccIpPNgw.s:105    .text.lwrb_is_ready:0000000000000000 lwrb_is_ready
     /tmp/ccIpPNgw.s:166    .text.lwrb_is_ready:0000000000000034 $d
     /tmp/ccIpPNgw.s:172    .text.lwrb_free:0000000000000000 $t
     /tmp/ccIpPNgw.s:179    .text.lwrb_free:0000000000000000 lwrb_free
     /tmp/ccIpPNgw.s:219    .text.lwrb_free:0000000000000028 $d
     /tmp/ccIpPNgw.s:225    .text.lwrb_set_evt_fn:0000000000000000 $t
     /tmp/ccIpPNgw.s:232    .text.lwrb_set_evt_fn:0000000000000000 lwrb_set_evt_fn
     /tmp/ccIpPNgw.s:273    .text.lwrb_set_evt_fn:0000000000000028 $d
     /tmp/ccIpPNgw.s:279    .text.lwrb_get_free:0000000000000000 $t
     /tmp/ccIpPNgw.s:286    .text.lwrb_get_free:0000000000000000 lwrb_get_free
     /tmp/ccIpPNgw.s:369    .text.lwrb_get_free:0000000000000044 $d
     /tmp/ccIpPNgw.s:375    .text.lwrb_write:0000000000000000 $t
     /tmp/ccIpPNgw.s:382    .text.lwrb_write:0000000000000000 lwrb_write
     /tmp/ccIpPNgw.s:539    .text.lwrb_write:00000000000000b0 $d
     /tmp/ccIpPNgw.s:545    .text.lwrb_get_full:0000000000000000 $t
     /tmp/ccIpPNgw.s:552    .text.lwrb_get_full:0000000000000000 lwrb_get_full
     /tmp/ccIpPNgw.s:637    .text.lwrb_get_full:0000000000000044 $d
     /tmp/ccIpPNgw.s:643    .text.lwrb_read:0000000000000000 $t
     /tmp/ccIpPNgw.s:650    .text.lwrb_read:0000000000000000 lwrb_read
     /tmp/ccIpPNgw.s:808    .text.lwrb_read:00000000000000b0 $d
     /tmp/ccIpPNgw.s:814    .text.lwrb_peek:0000000000000000 $t
     /tmp/ccIpPNgw.s:821    .text.lwrb_peek:0000000000000000 lwrb_peek
     /tmp/ccIpPNgw.s:971    .text.lwrb_peek:00000000000000a0 $d
     /tmp/ccIpPNgw.s:977    .text.lwrb_reset:0000000000000000 $t
     /tmp/ccIpPNgw.s:984    .text.lwrb_reset:0000000000000000 lwrb_reset
     /tmp/ccIpPNgw.s:1038   .text.lwrb_reset:0000000000000034 $d
     /tmp/ccIpPNgw.s:1044   .text.lwrb_get_linear_block_read_address:0000000000000000 $t
     /tmp/ccIpPNgw.s:1051   .text.lwrb_get_linear_block_read_address:0000000000000000 lwrb_get_linear_block_read_address
     /tmp/ccIpPNgw.s:1110   .text.lwrb_get_linear_block_read_address:0000000000000038 $d
     /tmp/ccIpPNgw.s:1116   .text.lwrb_get_linear_block_read_length:0000000000000000 $t
     /tmp/ccIpPNgw.s:1123   .text.lwrb_get_linear_block_read_length:0000000000000000 lwrb_get_linear_block_read_length
     /tmp/ccIpPNgw.s:1207   .text.lwrb_get_linear_block_read_length:0000000000000044 $d
     /tmp/ccIpPNgw.s:1213   .text.lwrb_skip:0000000000000000 $t
     /tmp/ccIpPNgw.s:1220   .text.lwrb_skip:0000000000000000 lwrb_skip
     /tmp/ccIpPNgw.s:1324   .text.lwrb_skip:0000000000000068 $d
     /tmp/ccIpPNgw.s:1330   .text.lwrb_get_linear_block_write_address:0000000000000000 $t
     /tmp/ccIpPNgw.s:1337   .text.lwrb_get_linear_block_write_address:0000000000000000 lwrb_get_linear_block_write_address
     /tmp/ccIpPNgw.s:1396   .text.lwrb_get_linear_block_write_address:0000000000000038 $d
     /tmp/ccIpPNgw.s:1402   .text.lwrb_get_linear_block_write_length:0000000000000000 $t
     /tmp/ccIpPNgw.s:1409   .text.lwrb_get_linear_block_write_length:0000000000000000 lwrb_get_linear_block_write_length
     /tmp/ccIpPNgw.s:1490   .text.lwrb_get_linear_block_write_length:0000000000000044 $d
     /tmp/ccIpPNgw.s:1496   .text.lwrb_advance:0000000000000000 $t
     /tmp/ccIpPNgw.s:1503   .text.lwrb_advance:0000000000000000 lwrb_advance
     /tmp/ccIpPNgw.s:1607   .text.lwrb_advance:0000000000000068 $d

UNDEFINED SYMBOLS
memcpy
